// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: rainstorm.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_rainstorm_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_rainstorm_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_rainstorm_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_rainstorm_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_rainstorm_2eproto;
namespace rainstorm {
class AckDataChunk;
struct AckDataChunkDefaultTypeInternal;
extern AckDataChunkDefaultTypeInternal _AckDataChunk_default_instance_;
class DataChunk;
struct DataChunkDefaultTypeInternal;
extern DataChunkDefaultTypeInternal _DataChunk_default_instance_;
class KV;
struct KVDefaultTypeInternal;
extern KVDefaultTypeInternal _KV_default_instance_;
class NewSrcTaskRequest;
struct NewSrcTaskRequestDefaultTypeInternal;
extern NewSrcTaskRequestDefaultTypeInternal _NewSrcTaskRequest_default_instance_;
class NewStageTaskRequest;
struct NewStageTaskRequestDefaultTypeInternal;
extern NewStageTaskRequestDefaultTypeInternal _NewStageTaskRequest_default_instance_;
class OperationStatus;
struct OperationStatusDefaultTypeInternal;
extern OperationStatusDefaultTypeInternal _OperationStatus_default_instance_;
class StreamDataChunk;
struct StreamDataChunkDefaultTypeInternal;
extern StreamDataChunkDefaultTypeInternal _StreamDataChunk_default_instance_;
class UpdateDstTaskRecieveRequest;
struct UpdateDstTaskRecieveRequestDefaultTypeInternal;
extern UpdateDstTaskRecieveRequestDefaultTypeInternal _UpdateDstTaskRecieveRequest_default_instance_;
class UpdateSrcTaskSendRequest;
struct UpdateSrcTaskSendRequestDefaultTypeInternal;
extern UpdateSrcTaskSendRequestDefaultTypeInternal _UpdateSrcTaskSendRequest_default_instance_;
}  // namespace rainstorm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace rainstorm {
enum StatusCode : int {
  SUCCESS = 0,
  INVALID = 1,
  NOT_FOUND = 2,
  ALREADY_EXISTS = 3,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StatusCode_IsValid(int value);
extern const uint32_t StatusCode_internal_data_[];
constexpr StatusCode StatusCode_MIN = static_cast<StatusCode>(0);
constexpr StatusCode StatusCode_MAX = static_cast<StatusCode>(3);
constexpr int StatusCode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
StatusCode_descriptor();
template <typename T>
const std::string& StatusCode_Name(T value) {
  static_assert(std::is_same<T, StatusCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StatusCode_Name().");
  return StatusCode_Name(static_cast<StatusCode>(value));
}
template <>
inline const std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StatusCode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool StatusCode_Parse(absl::string_view name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
      StatusCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UpdateSrcTaskSendRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.UpdateSrcTaskSendRequest) */ {
 public:
  inline UpdateSrcTaskSendRequest() : UpdateSrcTaskSendRequest(nullptr) {}
  ~UpdateSrcTaskSendRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateSrcTaskSendRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateSrcTaskSendRequest(const UpdateSrcTaskSendRequest& from) : UpdateSrcTaskSendRequest(nullptr, from) {}
  inline UpdateSrcTaskSendRequest(UpdateSrcTaskSendRequest&& from) noexcept
      : UpdateSrcTaskSendRequest(nullptr, std::move(from)) {}
  inline UpdateSrcTaskSendRequest& operator=(const UpdateSrcTaskSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSrcTaskSendRequest& operator=(UpdateSrcTaskSendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSrcTaskSendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSrcTaskSendRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSrcTaskSendRequest*>(
        &_UpdateSrcTaskSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(UpdateSrcTaskSendRequest& a, UpdateSrcTaskSendRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateSrcTaskSendRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSrcTaskSendRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSrcTaskSendRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UpdateSrcTaskSendRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateSrcTaskSendRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateSrcTaskSendRequest& from) { UpdateSrcTaskSendRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateSrcTaskSendRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.UpdateSrcTaskSendRequest"; }

 protected:
  explicit UpdateSrcTaskSendRequest(::google::protobuf::Arena* arena);
  UpdateSrcTaskSendRequest(::google::protobuf::Arena* arena, const UpdateSrcTaskSendRequest& from);
  UpdateSrcTaskSendRequest(::google::protobuf::Arena* arena, UpdateSrcTaskSendRequest&& from) noexcept
      : UpdateSrcTaskSendRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kOldNextServerAddressFieldNumber = 2,
    kNewNextServerAddressFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string old_next_server_address = 2;
  void clear_old_next_server_address() ;
  const std::string& old_next_server_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_old_next_server_address(Arg_&& arg, Args_... args);
  std::string* mutable_old_next_server_address();
  PROTOBUF_NODISCARD std::string* release_old_next_server_address();
  void set_allocated_old_next_server_address(std::string* value);

  private:
  const std::string& _internal_old_next_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_next_server_address(
      const std::string& value);
  std::string* _internal_mutable_old_next_server_address();

  public:
  // string new_next_server_address = 3;
  void clear_new_next_server_address() ;
  const std::string& new_next_server_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_next_server_address(Arg_&& arg, Args_... args);
  std::string* mutable_new_next_server_address();
  PROTOBUF_NODISCARD std::string* release_new_next_server_address();
  void set_allocated_new_next_server_address(std::string* value);

  private:
  const std::string& _internal_new_next_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_next_server_address(
      const std::string& value);
  std::string* _internal_mutable_new_next_server_address();

  public:
  // @@protoc_insertion_point(class_scope:rainstorm.UpdateSrcTaskSendRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      91, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_UpdateSrcTaskSendRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateSrcTaskSendRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr old_next_server_address_;
    ::google::protobuf::internal::ArenaStringPtr new_next_server_address_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class UpdateDstTaskRecieveRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.UpdateDstTaskRecieveRequest) */ {
 public:
  inline UpdateDstTaskRecieveRequest() : UpdateDstTaskRecieveRequest(nullptr) {}
  ~UpdateDstTaskRecieveRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateDstTaskRecieveRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateDstTaskRecieveRequest(const UpdateDstTaskRecieveRequest& from) : UpdateDstTaskRecieveRequest(nullptr, from) {}
  inline UpdateDstTaskRecieveRequest(UpdateDstTaskRecieveRequest&& from) noexcept
      : UpdateDstTaskRecieveRequest(nullptr, std::move(from)) {}
  inline UpdateDstTaskRecieveRequest& operator=(const UpdateDstTaskRecieveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDstTaskRecieveRequest& operator=(UpdateDstTaskRecieveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDstTaskRecieveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDstTaskRecieveRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDstTaskRecieveRequest*>(
        &_UpdateDstTaskRecieveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(UpdateDstTaskRecieveRequest& a, UpdateDstTaskRecieveRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateDstTaskRecieveRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDstTaskRecieveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDstTaskRecieveRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UpdateDstTaskRecieveRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateDstTaskRecieveRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateDstTaskRecieveRequest& from) { UpdateDstTaskRecieveRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateDstTaskRecieveRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.UpdateDstTaskRecieveRequest"; }

 protected:
  explicit UpdateDstTaskRecieveRequest(::google::protobuf::Arena* arena);
  UpdateDstTaskRecieveRequest(::google::protobuf::Arena* arena, const UpdateDstTaskRecieveRequest& from);
  UpdateDstTaskRecieveRequest(::google::protobuf::Arena* arena, UpdateDstTaskRecieveRequest&& from) noexcept
      : UpdateDstTaskRecieveRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kOldPrevServerAddressFieldNumber = 2,
    kNewPrevServerAddressFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string old_prev_server_address = 2;
  void clear_old_prev_server_address() ;
  const std::string& old_prev_server_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_old_prev_server_address(Arg_&& arg, Args_... args);
  std::string* mutable_old_prev_server_address();
  PROTOBUF_NODISCARD std::string* release_old_prev_server_address();
  void set_allocated_old_prev_server_address(std::string* value);

  private:
  const std::string& _internal_old_prev_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_prev_server_address(
      const std::string& value);
  std::string* _internal_mutable_old_prev_server_address();

  public:
  // string new_prev_server_address = 3;
  void clear_new_prev_server_address() ;
  const std::string& new_prev_server_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_prev_server_address(Arg_&& arg, Args_... args);
  std::string* mutable_new_prev_server_address();
  PROTOBUF_NODISCARD std::string* release_new_prev_server_address();
  void set_allocated_new_prev_server_address(std::string* value);

  private:
  const std::string& _internal_new_prev_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_prev_server_address(
      const std::string& value);
  std::string* _internal_mutable_new_prev_server_address();

  public:
  // @@protoc_insertion_point(class_scope:rainstorm.UpdateDstTaskRecieveRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      94, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_UpdateDstTaskRecieveRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateDstTaskRecieveRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr old_prev_server_address_;
    ::google::protobuf::internal::ArenaStringPtr new_prev_server_address_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class OperationStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.OperationStatus) */ {
 public:
  inline OperationStatus() : OperationStatus(nullptr) {}
  ~OperationStatus() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OperationStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline OperationStatus(const OperationStatus& from) : OperationStatus(nullptr, from) {}
  inline OperationStatus(OperationStatus&& from) noexcept
      : OperationStatus(nullptr, std::move(from)) {}
  inline OperationStatus& operator=(const OperationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStatus& operator=(OperationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStatus* internal_default_instance() {
    return reinterpret_cast<const OperationStatus*>(
        &_OperationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(OperationStatus& a, OperationStatus& b) { a.Swap(&b); }
  inline void Swap(OperationStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OperationStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OperationStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OperationStatus& from) { OperationStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OperationStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.OperationStatus"; }

 protected:
  explicit OperationStatus(::google::protobuf::Arena* arena);
  OperationStatus(::google::protobuf::Arena* arena, const OperationStatus& from);
  OperationStatus(::google::protobuf::Arena* arena, OperationStatus&& from) noexcept
      : OperationStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .rainstorm.StatusCode status = 1;
  void clear_status() ;
  ::rainstorm::StatusCode status() const;
  void set_status(::rainstorm::StatusCode value);

  private:
  ::rainstorm::StatusCode _internal_status() const;
  void _internal_set_status(::rainstorm::StatusCode value);

  public:
  // @@protoc_insertion_point(class_scope:rainstorm.OperationStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      41, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OperationStatus_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OperationStatus& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class NewStageTaskRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.NewStageTaskRequest) */ {
 public:
  inline NewStageTaskRequest() : NewStageTaskRequest(nullptr) {}
  ~NewStageTaskRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewStageTaskRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewStageTaskRequest(const NewStageTaskRequest& from) : NewStageTaskRequest(nullptr, from) {}
  inline NewStageTaskRequest(NewStageTaskRequest&& from) noexcept
      : NewStageTaskRequest(nullptr, std::move(from)) {}
  inline NewStageTaskRequest& operator=(const NewStageTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewStageTaskRequest& operator=(NewStageTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewStageTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewStageTaskRequest* internal_default_instance() {
    return reinterpret_cast<const NewStageTaskRequest*>(
        &_NewStageTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(NewStageTaskRequest& a, NewStageTaskRequest& b) { a.Swap(&b); }
  inline void Swap(NewStageTaskRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewStageTaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewStageTaskRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NewStageTaskRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewStageTaskRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewStageTaskRequest& from) { NewStageTaskRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NewStageTaskRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.NewStageTaskRequest"; }

 protected:
  explicit NewStageTaskRequest(::google::protobuf::Arena* arena);
  NewStageTaskRequest(::google::protobuf::Arena* arena, const NewStageTaskRequest& from);
  NewStageTaskRequest(::google::protobuf::Arena* arena, NewStageTaskRequest&& from) noexcept
      : NewStageTaskRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNextServerAddressesFieldNumber = 4,
    kPrevServerAddressesFieldNumber = 5,
    kIdFieldNumber = 1,
    kExecutableFieldNumber = 2,
    kStageNumberFieldNumber = 3,
  };
  // repeated string next_server_addresses = 4;
  int next_server_addresses_size() const;
  private:
  int _internal_next_server_addresses_size() const;

  public:
  void clear_next_server_addresses() ;
  const std::string& next_server_addresses(int index) const;
  std::string* mutable_next_server_addresses(int index);
  void set_next_server_addresses(int index, const std::string& value);
  void set_next_server_addresses(int index, std::string&& value);
  void set_next_server_addresses(int index, const char* value);
  void set_next_server_addresses(int index, const char* value, std::size_t size);
  void set_next_server_addresses(int index, absl::string_view value);
  std::string* add_next_server_addresses();
  void add_next_server_addresses(const std::string& value);
  void add_next_server_addresses(std::string&& value);
  void add_next_server_addresses(const char* value);
  void add_next_server_addresses(const char* value, std::size_t size);
  void add_next_server_addresses(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& next_server_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_next_server_addresses();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_next_server_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_next_server_addresses();

  public:
  // repeated string prev_server_addresses = 5;
  int prev_server_addresses_size() const;
  private:
  int _internal_prev_server_addresses_size() const;

  public:
  void clear_prev_server_addresses() ;
  const std::string& prev_server_addresses(int index) const;
  std::string* mutable_prev_server_addresses(int index);
  void set_prev_server_addresses(int index, const std::string& value);
  void set_prev_server_addresses(int index, std::string&& value);
  void set_prev_server_addresses(int index, const char* value);
  void set_prev_server_addresses(int index, const char* value, std::size_t size);
  void set_prev_server_addresses(int index, absl::string_view value);
  std::string* add_prev_server_addresses();
  void add_prev_server_addresses(const std::string& value);
  void add_prev_server_addresses(std::string&& value);
  void add_prev_server_addresses(const char* value);
  void add_prev_server_addresses(const char* value, std::size_t size);
  void add_prev_server_addresses(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& prev_server_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_prev_server_addresses();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_prev_server_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_prev_server_addresses();

  public:
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string executable = 2;
  void clear_executable() ;
  const std::string& executable() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_executable(Arg_&& arg, Args_... args);
  std::string* mutable_executable();
  PROTOBUF_NODISCARD std::string* release_executable();
  void set_allocated_executable(std::string* value);

  private:
  const std::string& _internal_executable() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executable(
      const std::string& value);
  std::string* _internal_mutable_executable();

  public:
  // int32 stage_number = 3;
  void clear_stage_number() ;
  ::int32_t stage_number() const;
  void set_stage_number(::int32_t value);

  private:
  ::int32_t _internal_stage_number() const;
  void _internal_set_stage_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rainstorm.NewStageTaskRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      92, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NewStageTaskRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NewStageTaskRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> next_server_addresses_;
    ::google::protobuf::RepeatedPtrField<std::string> prev_server_addresses_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr executable_;
    ::int32_t stage_number_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class NewSrcTaskRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.NewSrcTaskRequest) */ {
 public:
  inline NewSrcTaskRequest() : NewSrcTaskRequest(nullptr) {}
  ~NewSrcTaskRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewSrcTaskRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewSrcTaskRequest(const NewSrcTaskRequest& from) : NewSrcTaskRequest(nullptr, from) {}
  inline NewSrcTaskRequest(NewSrcTaskRequest&& from) noexcept
      : NewSrcTaskRequest(nullptr, std::move(from)) {}
  inline NewSrcTaskRequest& operator=(const NewSrcTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewSrcTaskRequest& operator=(NewSrcTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewSrcTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewSrcTaskRequest* internal_default_instance() {
    return reinterpret_cast<const NewSrcTaskRequest*>(
        &_NewSrcTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NewSrcTaskRequest& a, NewSrcTaskRequest& b) { a.Swap(&b); }
  inline void Swap(NewSrcTaskRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewSrcTaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewSrcTaskRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NewSrcTaskRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewSrcTaskRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewSrcTaskRequest& from) { NewSrcTaskRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NewSrcTaskRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.NewSrcTaskRequest"; }

 protected:
  explicit NewSrcTaskRequest(::google::protobuf::Arena* arena);
  NewSrcTaskRequest(::google::protobuf::Arena* arena, const NewSrcTaskRequest& from);
  NewSrcTaskRequest(::google::protobuf::Arena* arena, NewSrcTaskRequest&& from) noexcept
      : NewSrcTaskRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNextServerAddressesFieldNumber = 4,
    kIdFieldNumber = 1,
    kSrcFilenameFieldNumber = 2,
    kStageNumberFieldNumber = 3,
  };
  // repeated string next_server_addresses = 4;
  int next_server_addresses_size() const;
  private:
  int _internal_next_server_addresses_size() const;

  public:
  void clear_next_server_addresses() ;
  const std::string& next_server_addresses(int index) const;
  std::string* mutable_next_server_addresses(int index);
  void set_next_server_addresses(int index, const std::string& value);
  void set_next_server_addresses(int index, std::string&& value);
  void set_next_server_addresses(int index, const char* value);
  void set_next_server_addresses(int index, const char* value, std::size_t size);
  void set_next_server_addresses(int index, absl::string_view value);
  std::string* add_next_server_addresses();
  void add_next_server_addresses(const std::string& value);
  void add_next_server_addresses(std::string&& value);
  void add_next_server_addresses(const char* value);
  void add_next_server_addresses(const char* value, std::size_t size);
  void add_next_server_addresses(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& next_server_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_next_server_addresses();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_next_server_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_next_server_addresses();

  public:
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string src_filename = 2;
  void clear_src_filename() ;
  const std::string& src_filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_src_filename(Arg_&& arg, Args_... args);
  std::string* mutable_src_filename();
  PROTOBUF_NODISCARD std::string* release_src_filename();
  void set_allocated_src_filename(std::string* value);

  private:
  const std::string& _internal_src_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_filename(
      const std::string& value);
  std::string* _internal_mutable_src_filename();

  public:
  // int32 stage_number = 3;
  void clear_stage_number() ;
  ::int32_t stage_number() const;
  void set_stage_number(::int32_t value);

  private:
  ::int32_t _internal_stage_number() const;
  void _internal_set_stage_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rainstorm.NewSrcTaskRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      71, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NewSrcTaskRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NewSrcTaskRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> next_server_addresses_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr src_filename_;
    ::int32_t stage_number_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class KV final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.KV) */ {
 public:
  inline KV() : KV(nullptr) {}
  ~KV() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KV(
      ::google::protobuf::internal::ConstantInitialized);

  inline KV(const KV& from) : KV(nullptr, from) {}
  inline KV(KV&& from) noexcept
      : KV(nullptr, std::move(from)) {}
  inline KV& operator=(const KV& from) {
    CopyFrom(from);
    return *this;
  }
  inline KV& operator=(KV&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KV& default_instance() {
    return *internal_default_instance();
  }
  static inline const KV* internal_default_instance() {
    return reinterpret_cast<const KV*>(
        &_KV_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(KV& a, KV& b) { a.Swap(&b); }
  inline void Swap(KV* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KV* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KV* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<KV>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KV& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const KV& from) { KV::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(KV* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.KV"; }

 protected:
  explicit KV(::google::protobuf::Arena* arena);
  KV(::google::protobuf::Arena* arena, const KV& from);
  KV(::google::protobuf::Arena* arena, KV&& from) noexcept
      : KV(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:rainstorm.KV)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      29, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_KV_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KV& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class DataChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.DataChunk) */ {
 public:
  inline DataChunk() : DataChunk(nullptr) {}
  ~DataChunk() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataChunk(const DataChunk& from) : DataChunk(nullptr, from) {}
  inline DataChunk(DataChunk&& from) noexcept
      : DataChunk(nullptr, std::move(from)) {}
  inline DataChunk& operator=(const DataChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataChunk& operator=(DataChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataChunk& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kId = 1,
    kPairs = 2,
    kFinished = 3,
    REQUEST_NOT_SET = 0,
  };
  static inline const DataChunk* internal_default_instance() {
    return reinterpret_cast<const DataChunk*>(
        &_DataChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(DataChunk& a, DataChunk& b) { a.Swap(&b); }
  inline void Swap(DataChunk* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataChunk* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DataChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataChunk& from) { DataChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DataChunk* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.DataChunk"; }

 protected:
  explicit DataChunk(::google::protobuf::Arena* arena);
  DataChunk(::google::protobuf::Arena* arena, const DataChunk& from);
  DataChunk(::google::protobuf::Arena* arena, DataChunk&& from) noexcept
      : DataChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kPairsFieldNumber = 2,
    kFinishedFieldNumber = 3,
  };
  // string id = 1;
  bool has_id() const;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .rainstorm.KV pairs = 2;
  bool has_pairs() const;
  private:
  bool _internal_has_pairs() const;

  public:
  void clear_pairs() ;
  const ::rainstorm::KV& pairs() const;
  PROTOBUF_NODISCARD ::rainstorm::KV* release_pairs();
  ::rainstorm::KV* mutable_pairs();
  void set_allocated_pairs(::rainstorm::KV* value);
  void unsafe_arena_set_allocated_pairs(::rainstorm::KV* value);
  ::rainstorm::KV* unsafe_arena_release_pairs();

  private:
  const ::rainstorm::KV& _internal_pairs() const;
  ::rainstorm::KV* _internal_mutable_pairs();

  public:
  // bool finished = 3;
  bool has_finished() const;
  void clear_finished() ;
  bool finished() const;
  void set_finished(bool value);

  private:
  bool _internal_finished() const;
  void _internal_set_finished(bool value);

  public:
  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:rainstorm.DataChunk)
 private:
  class _Internal;
  void set_has_id();
  void set_has_pairs();
  void set_has_finished();
  inline bool has_request() const;
  inline void clear_has_request();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 1,
      30, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DataChunk_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataChunk& from_msg);
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr id_;
      ::rainstorm::KV* pairs_;
      bool finished_;
    } request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class StreamDataChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.StreamDataChunk) */ {
 public:
  inline StreamDataChunk() : StreamDataChunk(nullptr) {}
  ~StreamDataChunk() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamDataChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamDataChunk(const StreamDataChunk& from) : StreamDataChunk(nullptr, from) {}
  inline StreamDataChunk(StreamDataChunk&& from) noexcept
      : StreamDataChunk(nullptr, std::move(from)) {}
  inline StreamDataChunk& operator=(const StreamDataChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataChunk& operator=(StreamDataChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamDataChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamDataChunk* internal_default_instance() {
    return reinterpret_cast<const StreamDataChunk*>(
        &_StreamDataChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(StreamDataChunk& a, StreamDataChunk& b) { a.Swap(&b); }
  inline void Swap(StreamDataChunk* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDataChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamDataChunk* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<StreamDataChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamDataChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamDataChunk& from) { StreamDataChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StreamDataChunk* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.StreamDataChunk"; }

 protected:
  explicit StreamDataChunk(::google::protobuf::Arena* arena);
  StreamDataChunk(::google::protobuf::Arena* arena, const StreamDataChunk& from);
  StreamDataChunk(::google::protobuf::Arena* arena, StreamDataChunk&& from) noexcept
      : StreamDataChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChunksFieldNumber = 1,
  };
  // repeated .rainstorm.DataChunk chunks = 1;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;

  public:
  void clear_chunks() ;
  ::rainstorm::DataChunk* mutable_chunks(int index);
  ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>* mutable_chunks();

  private:
  const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>& _internal_chunks() const;
  ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>* _internal_mutable_chunks();
  public:
  const ::rainstorm::DataChunk& chunks(int index) const;
  ::rainstorm::DataChunk* add_chunks();
  const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>& chunks() const;
  // @@protoc_insertion_point(class_scope:rainstorm.StreamDataChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StreamDataChunk_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamDataChunk& from_msg);
    ::google::protobuf::RepeatedPtrField< ::rainstorm::DataChunk > chunks_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class AckDataChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.AckDataChunk) */ {
 public:
  inline AckDataChunk() : AckDataChunk(nullptr) {}
  ~AckDataChunk() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AckDataChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline AckDataChunk(const AckDataChunk& from) : AckDataChunk(nullptr, from) {}
  inline AckDataChunk(AckDataChunk&& from) noexcept
      : AckDataChunk(nullptr, std::move(from)) {}
  inline AckDataChunk& operator=(const AckDataChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckDataChunk& operator=(AckDataChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckDataChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckDataChunk* internal_default_instance() {
    return reinterpret_cast<const AckDataChunk*>(
        &_AckDataChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(AckDataChunk& a, AckDataChunk& b) { a.Swap(&b); }
  inline void Swap(AckDataChunk* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckDataChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AckDataChunk* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AckDataChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AckDataChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AckDataChunk& from) { AckDataChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AckDataChunk* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.AckDataChunk"; }

 protected:
  explicit AckDataChunk(::google::protobuf::Arena* arena);
  AckDataChunk(::google::protobuf::Arena* arena, const AckDataChunk& from);
  AckDataChunk(::google::protobuf::Arena* arena, AckDataChunk&& from) noexcept
      : AckDataChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChunksFieldNumber = 1,
  };
  // repeated .rainstorm.DataChunk chunks = 1;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;

  public:
  void clear_chunks() ;
  ::rainstorm::DataChunk* mutable_chunks(int index);
  ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>* mutable_chunks();

  private:
  const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>& _internal_chunks() const;
  ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>* _internal_mutable_chunks();
  public:
  const ::rainstorm::DataChunk& chunks(int index) const;
  ::rainstorm::DataChunk* add_chunks();
  const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>& chunks() const;
  // @@protoc_insertion_point(class_scope:rainstorm.AckDataChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AckDataChunk_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AckDataChunk& from_msg);
    ::google::protobuf::RepeatedPtrField< ::rainstorm::DataChunk > chunks_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OperationStatus

// .rainstorm.StatusCode status = 1;
inline void OperationStatus::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::rainstorm::StatusCode OperationStatus::status() const {
  // @@protoc_insertion_point(field_get:rainstorm.OperationStatus.status)
  return _internal_status();
}
inline void OperationStatus::set_status(::rainstorm::StatusCode value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:rainstorm.OperationStatus.status)
}
inline ::rainstorm::StatusCode OperationStatus::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::rainstorm::StatusCode>(_impl_.status_);
}
inline void OperationStatus::_internal_set_status(::rainstorm::StatusCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string message = 2;
inline void OperationStatus::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& OperationStatus::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.OperationStatus.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationStatus::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.OperationStatus.message)
}
inline std::string* OperationStatus::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:rainstorm.OperationStatus.message)
  return _s;
}
inline const std::string& OperationStatus::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void OperationStatus::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* OperationStatus::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* OperationStatus::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.OperationStatus.message)
  return _impl_.message_.Release();
}
inline void OperationStatus::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.OperationStatus.message)
}

// -------------------------------------------------------------------

// NewSrcTaskRequest

// string id = 1;
inline void NewSrcTaskRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& NewSrcTaskRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewSrcTaskRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewSrcTaskRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.NewSrcTaskRequest.id)
}
inline std::string* NewSrcTaskRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:rainstorm.NewSrcTaskRequest.id)
  return _s;
}
inline const std::string& NewSrcTaskRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void NewSrcTaskRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* NewSrcTaskRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* NewSrcTaskRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.NewSrcTaskRequest.id)
  return _impl_.id_.Release();
}
inline void NewSrcTaskRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.NewSrcTaskRequest.id)
}

// string src_filename = 2;
inline void NewSrcTaskRequest::clear_src_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_filename_.ClearToEmpty();
}
inline const std::string& NewSrcTaskRequest::src_filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewSrcTaskRequest.src_filename)
  return _internal_src_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewSrcTaskRequest::set_src_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.NewSrcTaskRequest.src_filename)
}
inline std::string* NewSrcTaskRequest::mutable_src_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_src_filename();
  // @@protoc_insertion_point(field_mutable:rainstorm.NewSrcTaskRequest.src_filename)
  return _s;
}
inline const std::string& NewSrcTaskRequest::_internal_src_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.src_filename_.Get();
}
inline void NewSrcTaskRequest::_internal_set_src_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_filename_.Set(value, GetArena());
}
inline std::string* NewSrcTaskRequest::_internal_mutable_src_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.src_filename_.Mutable( GetArena());
}
inline std::string* NewSrcTaskRequest::release_src_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.NewSrcTaskRequest.src_filename)
  return _impl_.src_filename_.Release();
}
inline void NewSrcTaskRequest::set_allocated_src_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.src_filename_.IsDefault()) {
          _impl_.src_filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.NewSrcTaskRequest.src_filename)
}

// int32 stage_number = 3;
inline void NewSrcTaskRequest::clear_stage_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stage_number_ = 0;
}
inline ::int32_t NewSrcTaskRequest::stage_number() const {
  // @@protoc_insertion_point(field_get:rainstorm.NewSrcTaskRequest.stage_number)
  return _internal_stage_number();
}
inline void NewSrcTaskRequest::set_stage_number(::int32_t value) {
  _internal_set_stage_number(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewSrcTaskRequest.stage_number)
}
inline ::int32_t NewSrcTaskRequest::_internal_stage_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stage_number_;
}
inline void NewSrcTaskRequest::_internal_set_stage_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stage_number_ = value;
}

// repeated string next_server_addresses = 4;
inline int NewSrcTaskRequest::_internal_next_server_addresses_size() const {
  return _internal_next_server_addresses().size();
}
inline int NewSrcTaskRequest::next_server_addresses_size() const {
  return _internal_next_server_addresses_size();
}
inline void NewSrcTaskRequest::clear_next_server_addresses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_server_addresses_.Clear();
}
inline std::string* NewSrcTaskRequest::add_next_server_addresses()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_next_server_addresses()->Add();
  // @@protoc_insertion_point(field_add_mutable:rainstorm.NewSrcTaskRequest.next_server_addresses)
  return _s;
}
inline const std::string& NewSrcTaskRequest::next_server_addresses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewSrcTaskRequest.next_server_addresses)
  return _internal_next_server_addresses().Get(index);
}
inline std::string* NewSrcTaskRequest::mutable_next_server_addresses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:rainstorm.NewSrcTaskRequest.next_server_addresses)
  return _internal_mutable_next_server_addresses()->Mutable(index);
}
inline void NewSrcTaskRequest::set_next_server_addresses(int index, const std::string& value) {
  _internal_mutable_next_server_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewSrcTaskRequest.next_server_addresses)
}
inline void NewSrcTaskRequest::set_next_server_addresses(int index, std::string&& value) {
  _internal_mutable_next_server_addresses()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:rainstorm.NewSrcTaskRequest.next_server_addresses)
}
inline void NewSrcTaskRequest::set_next_server_addresses(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_next_server_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rainstorm.NewSrcTaskRequest.next_server_addresses)
}
inline void NewSrcTaskRequest::set_next_server_addresses(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_next_server_addresses()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rainstorm.NewSrcTaskRequest.next_server_addresses)
}
inline void NewSrcTaskRequest::set_next_server_addresses(int index, absl::string_view value) {
  _internal_mutable_next_server_addresses()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:rainstorm.NewSrcTaskRequest.next_server_addresses)
}
inline void NewSrcTaskRequest::add_next_server_addresses(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_next_server_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:rainstorm.NewSrcTaskRequest.next_server_addresses)
}
inline void NewSrcTaskRequest::add_next_server_addresses(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_next_server_addresses()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:rainstorm.NewSrcTaskRequest.next_server_addresses)
}
inline void NewSrcTaskRequest::add_next_server_addresses(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_next_server_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rainstorm.NewSrcTaskRequest.next_server_addresses)
}
inline void NewSrcTaskRequest::add_next_server_addresses(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_next_server_addresses()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rainstorm.NewSrcTaskRequest.next_server_addresses)
}
inline void NewSrcTaskRequest::add_next_server_addresses(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_next_server_addresses()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:rainstorm.NewSrcTaskRequest.next_server_addresses)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NewSrcTaskRequest::next_server_addresses() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rainstorm.NewSrcTaskRequest.next_server_addresses)
  return _internal_next_server_addresses();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NewSrcTaskRequest::mutable_next_server_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rainstorm.NewSrcTaskRequest.next_server_addresses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_next_server_addresses();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NewSrcTaskRequest::_internal_next_server_addresses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.next_server_addresses_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NewSrcTaskRequest::_internal_mutable_next_server_addresses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.next_server_addresses_;
}

// -------------------------------------------------------------------

// NewStageTaskRequest

// string id = 1;
inline void NewStageTaskRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& NewStageTaskRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewStageTaskRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.id)
}
inline std::string* NewStageTaskRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:rainstorm.NewStageTaskRequest.id)
  return _s;
}
inline const std::string& NewStageTaskRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void NewStageTaskRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* NewStageTaskRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* NewStageTaskRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.NewStageTaskRequest.id)
  return _impl_.id_.Release();
}
inline void NewStageTaskRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.NewStageTaskRequest.id)
}

// string executable = 2;
inline void NewStageTaskRequest::clear_executable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_.ClearToEmpty();
}
inline const std::string& NewStageTaskRequest::executable() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.executable)
  return _internal_executable();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewStageTaskRequest::set_executable(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.executable)
}
inline std::string* NewStageTaskRequest::mutable_executable() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_executable();
  // @@protoc_insertion_point(field_mutable:rainstorm.NewStageTaskRequest.executable)
  return _s;
}
inline const std::string& NewStageTaskRequest::_internal_executable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.executable_.Get();
}
inline void NewStageTaskRequest::_internal_set_executable(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_.Set(value, GetArena());
}
inline std::string* NewStageTaskRequest::_internal_mutable_executable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.executable_.Mutable( GetArena());
}
inline std::string* NewStageTaskRequest::release_executable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.NewStageTaskRequest.executable)
  return _impl_.executable_.Release();
}
inline void NewStageTaskRequest::set_allocated_executable(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.executable_.IsDefault()) {
          _impl_.executable_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.NewStageTaskRequest.executable)
}

// int32 stage_number = 3;
inline void NewStageTaskRequest::clear_stage_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stage_number_ = 0;
}
inline ::int32_t NewStageTaskRequest::stage_number() const {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.stage_number)
  return _internal_stage_number();
}
inline void NewStageTaskRequest::set_stage_number(::int32_t value) {
  _internal_set_stage_number(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.stage_number)
}
inline ::int32_t NewStageTaskRequest::_internal_stage_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stage_number_;
}
inline void NewStageTaskRequest::_internal_set_stage_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stage_number_ = value;
}

// repeated string next_server_addresses = 4;
inline int NewStageTaskRequest::_internal_next_server_addresses_size() const {
  return _internal_next_server_addresses().size();
}
inline int NewStageTaskRequest::next_server_addresses_size() const {
  return _internal_next_server_addresses_size();
}
inline void NewStageTaskRequest::clear_next_server_addresses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_server_addresses_.Clear();
}
inline std::string* NewStageTaskRequest::add_next_server_addresses()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_next_server_addresses()->Add();
  // @@protoc_insertion_point(field_add_mutable:rainstorm.NewStageTaskRequest.next_server_addresses)
  return _s;
}
inline const std::string& NewStageTaskRequest::next_server_addresses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.next_server_addresses)
  return _internal_next_server_addresses().Get(index);
}
inline std::string* NewStageTaskRequest::mutable_next_server_addresses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:rainstorm.NewStageTaskRequest.next_server_addresses)
  return _internal_mutable_next_server_addresses()->Mutable(index);
}
inline void NewStageTaskRequest::set_next_server_addresses(int index, const std::string& value) {
  _internal_mutable_next_server_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.next_server_addresses)
}
inline void NewStageTaskRequest::set_next_server_addresses(int index, std::string&& value) {
  _internal_mutable_next_server_addresses()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.next_server_addresses)
}
inline void NewStageTaskRequest::set_next_server_addresses(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_next_server_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rainstorm.NewStageTaskRequest.next_server_addresses)
}
inline void NewStageTaskRequest::set_next_server_addresses(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_next_server_addresses()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rainstorm.NewStageTaskRequest.next_server_addresses)
}
inline void NewStageTaskRequest::set_next_server_addresses(int index, absl::string_view value) {
  _internal_mutable_next_server_addresses()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:rainstorm.NewStageTaskRequest.next_server_addresses)
}
inline void NewStageTaskRequest::add_next_server_addresses(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_next_server_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:rainstorm.NewStageTaskRequest.next_server_addresses)
}
inline void NewStageTaskRequest::add_next_server_addresses(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_next_server_addresses()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:rainstorm.NewStageTaskRequest.next_server_addresses)
}
inline void NewStageTaskRequest::add_next_server_addresses(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_next_server_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rainstorm.NewStageTaskRequest.next_server_addresses)
}
inline void NewStageTaskRequest::add_next_server_addresses(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_next_server_addresses()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rainstorm.NewStageTaskRequest.next_server_addresses)
}
inline void NewStageTaskRequest::add_next_server_addresses(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_next_server_addresses()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:rainstorm.NewStageTaskRequest.next_server_addresses)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NewStageTaskRequest::next_server_addresses() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rainstorm.NewStageTaskRequest.next_server_addresses)
  return _internal_next_server_addresses();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NewStageTaskRequest::mutable_next_server_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rainstorm.NewStageTaskRequest.next_server_addresses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_next_server_addresses();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NewStageTaskRequest::_internal_next_server_addresses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.next_server_addresses_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NewStageTaskRequest::_internal_mutable_next_server_addresses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.next_server_addresses_;
}

// repeated string prev_server_addresses = 5;
inline int NewStageTaskRequest::_internal_prev_server_addresses_size() const {
  return _internal_prev_server_addresses().size();
}
inline int NewStageTaskRequest::prev_server_addresses_size() const {
  return _internal_prev_server_addresses_size();
}
inline void NewStageTaskRequest::clear_prev_server_addresses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prev_server_addresses_.Clear();
}
inline std::string* NewStageTaskRequest::add_prev_server_addresses()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_prev_server_addresses()->Add();
  // @@protoc_insertion_point(field_add_mutable:rainstorm.NewStageTaskRequest.prev_server_addresses)
  return _s;
}
inline const std::string& NewStageTaskRequest::prev_server_addresses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.prev_server_addresses)
  return _internal_prev_server_addresses().Get(index);
}
inline std::string* NewStageTaskRequest::mutable_prev_server_addresses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:rainstorm.NewStageTaskRequest.prev_server_addresses)
  return _internal_mutable_prev_server_addresses()->Mutable(index);
}
inline void NewStageTaskRequest::set_prev_server_addresses(int index, const std::string& value) {
  _internal_mutable_prev_server_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.prev_server_addresses)
}
inline void NewStageTaskRequest::set_prev_server_addresses(int index, std::string&& value) {
  _internal_mutable_prev_server_addresses()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.prev_server_addresses)
}
inline void NewStageTaskRequest::set_prev_server_addresses(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_prev_server_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rainstorm.NewStageTaskRequest.prev_server_addresses)
}
inline void NewStageTaskRequest::set_prev_server_addresses(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_prev_server_addresses()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rainstorm.NewStageTaskRequest.prev_server_addresses)
}
inline void NewStageTaskRequest::set_prev_server_addresses(int index, absl::string_view value) {
  _internal_mutable_prev_server_addresses()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:rainstorm.NewStageTaskRequest.prev_server_addresses)
}
inline void NewStageTaskRequest::add_prev_server_addresses(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_prev_server_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:rainstorm.NewStageTaskRequest.prev_server_addresses)
}
inline void NewStageTaskRequest::add_prev_server_addresses(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_prev_server_addresses()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:rainstorm.NewStageTaskRequest.prev_server_addresses)
}
inline void NewStageTaskRequest::add_prev_server_addresses(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_prev_server_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rainstorm.NewStageTaskRequest.prev_server_addresses)
}
inline void NewStageTaskRequest::add_prev_server_addresses(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_prev_server_addresses()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rainstorm.NewStageTaskRequest.prev_server_addresses)
}
inline void NewStageTaskRequest::add_prev_server_addresses(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_prev_server_addresses()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:rainstorm.NewStageTaskRequest.prev_server_addresses)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NewStageTaskRequest::prev_server_addresses() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rainstorm.NewStageTaskRequest.prev_server_addresses)
  return _internal_prev_server_addresses();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NewStageTaskRequest::mutable_prev_server_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rainstorm.NewStageTaskRequest.prev_server_addresses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_prev_server_addresses();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NewStageTaskRequest::_internal_prev_server_addresses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prev_server_addresses_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NewStageTaskRequest::_internal_mutable_prev_server_addresses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.prev_server_addresses_;
}

// -------------------------------------------------------------------

// UpdateSrcTaskSendRequest

// string id = 1;
inline void UpdateSrcTaskSendRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UpdateSrcTaskSendRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.UpdateSrcTaskSendRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateSrcTaskSendRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.UpdateSrcTaskSendRequest.id)
}
inline std::string* UpdateSrcTaskSendRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:rainstorm.UpdateSrcTaskSendRequest.id)
  return _s;
}
inline const std::string& UpdateSrcTaskSendRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void UpdateSrcTaskSendRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* UpdateSrcTaskSendRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* UpdateSrcTaskSendRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.UpdateSrcTaskSendRequest.id)
  return _impl_.id_.Release();
}
inline void UpdateSrcTaskSendRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.UpdateSrcTaskSendRequest.id)
}

// string old_next_server_address = 2;
inline void UpdateSrcTaskSendRequest::clear_old_next_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_next_server_address_.ClearToEmpty();
}
inline const std::string& UpdateSrcTaskSendRequest::old_next_server_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.UpdateSrcTaskSendRequest.old_next_server_address)
  return _internal_old_next_server_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateSrcTaskSendRequest::set_old_next_server_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_next_server_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.UpdateSrcTaskSendRequest.old_next_server_address)
}
inline std::string* UpdateSrcTaskSendRequest::mutable_old_next_server_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_old_next_server_address();
  // @@protoc_insertion_point(field_mutable:rainstorm.UpdateSrcTaskSendRequest.old_next_server_address)
  return _s;
}
inline const std::string& UpdateSrcTaskSendRequest::_internal_old_next_server_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.old_next_server_address_.Get();
}
inline void UpdateSrcTaskSendRequest::_internal_set_old_next_server_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_next_server_address_.Set(value, GetArena());
}
inline std::string* UpdateSrcTaskSendRequest::_internal_mutable_old_next_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.old_next_server_address_.Mutable( GetArena());
}
inline std::string* UpdateSrcTaskSendRequest::release_old_next_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.UpdateSrcTaskSendRequest.old_next_server_address)
  return _impl_.old_next_server_address_.Release();
}
inline void UpdateSrcTaskSendRequest::set_allocated_old_next_server_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_next_server_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.old_next_server_address_.IsDefault()) {
          _impl_.old_next_server_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.UpdateSrcTaskSendRequest.old_next_server_address)
}

// string new_next_server_address = 3;
inline void UpdateSrcTaskSendRequest::clear_new_next_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_next_server_address_.ClearToEmpty();
}
inline const std::string& UpdateSrcTaskSendRequest::new_next_server_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.UpdateSrcTaskSendRequest.new_next_server_address)
  return _internal_new_next_server_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateSrcTaskSendRequest::set_new_next_server_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_next_server_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.UpdateSrcTaskSendRequest.new_next_server_address)
}
inline std::string* UpdateSrcTaskSendRequest::mutable_new_next_server_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_next_server_address();
  // @@protoc_insertion_point(field_mutable:rainstorm.UpdateSrcTaskSendRequest.new_next_server_address)
  return _s;
}
inline const std::string& UpdateSrcTaskSendRequest::_internal_new_next_server_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_next_server_address_.Get();
}
inline void UpdateSrcTaskSendRequest::_internal_set_new_next_server_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_next_server_address_.Set(value, GetArena());
}
inline std::string* UpdateSrcTaskSendRequest::_internal_mutable_new_next_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_next_server_address_.Mutable( GetArena());
}
inline std::string* UpdateSrcTaskSendRequest::release_new_next_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.UpdateSrcTaskSendRequest.new_next_server_address)
  return _impl_.new_next_server_address_.Release();
}
inline void UpdateSrcTaskSendRequest::set_allocated_new_next_server_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_next_server_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_next_server_address_.IsDefault()) {
          _impl_.new_next_server_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.UpdateSrcTaskSendRequest.new_next_server_address)
}

// -------------------------------------------------------------------

// UpdateDstTaskRecieveRequest

// string id = 1;
inline void UpdateDstTaskRecieveRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UpdateDstTaskRecieveRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.UpdateDstTaskRecieveRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateDstTaskRecieveRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.UpdateDstTaskRecieveRequest.id)
}
inline std::string* UpdateDstTaskRecieveRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:rainstorm.UpdateDstTaskRecieveRequest.id)
  return _s;
}
inline const std::string& UpdateDstTaskRecieveRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void UpdateDstTaskRecieveRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* UpdateDstTaskRecieveRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* UpdateDstTaskRecieveRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.UpdateDstTaskRecieveRequest.id)
  return _impl_.id_.Release();
}
inline void UpdateDstTaskRecieveRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.UpdateDstTaskRecieveRequest.id)
}

// string old_prev_server_address = 2;
inline void UpdateDstTaskRecieveRequest::clear_old_prev_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_prev_server_address_.ClearToEmpty();
}
inline const std::string& UpdateDstTaskRecieveRequest::old_prev_server_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.UpdateDstTaskRecieveRequest.old_prev_server_address)
  return _internal_old_prev_server_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateDstTaskRecieveRequest::set_old_prev_server_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_prev_server_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.UpdateDstTaskRecieveRequest.old_prev_server_address)
}
inline std::string* UpdateDstTaskRecieveRequest::mutable_old_prev_server_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_old_prev_server_address();
  // @@protoc_insertion_point(field_mutable:rainstorm.UpdateDstTaskRecieveRequest.old_prev_server_address)
  return _s;
}
inline const std::string& UpdateDstTaskRecieveRequest::_internal_old_prev_server_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.old_prev_server_address_.Get();
}
inline void UpdateDstTaskRecieveRequest::_internal_set_old_prev_server_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_prev_server_address_.Set(value, GetArena());
}
inline std::string* UpdateDstTaskRecieveRequest::_internal_mutable_old_prev_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.old_prev_server_address_.Mutable( GetArena());
}
inline std::string* UpdateDstTaskRecieveRequest::release_old_prev_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.UpdateDstTaskRecieveRequest.old_prev_server_address)
  return _impl_.old_prev_server_address_.Release();
}
inline void UpdateDstTaskRecieveRequest::set_allocated_old_prev_server_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_prev_server_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.old_prev_server_address_.IsDefault()) {
          _impl_.old_prev_server_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.UpdateDstTaskRecieveRequest.old_prev_server_address)
}

// string new_prev_server_address = 3;
inline void UpdateDstTaskRecieveRequest::clear_new_prev_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_prev_server_address_.ClearToEmpty();
}
inline const std::string& UpdateDstTaskRecieveRequest::new_prev_server_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.UpdateDstTaskRecieveRequest.new_prev_server_address)
  return _internal_new_prev_server_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateDstTaskRecieveRequest::set_new_prev_server_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_prev_server_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.UpdateDstTaskRecieveRequest.new_prev_server_address)
}
inline std::string* UpdateDstTaskRecieveRequest::mutable_new_prev_server_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_prev_server_address();
  // @@protoc_insertion_point(field_mutable:rainstorm.UpdateDstTaskRecieveRequest.new_prev_server_address)
  return _s;
}
inline const std::string& UpdateDstTaskRecieveRequest::_internal_new_prev_server_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_prev_server_address_.Get();
}
inline void UpdateDstTaskRecieveRequest::_internal_set_new_prev_server_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_prev_server_address_.Set(value, GetArena());
}
inline std::string* UpdateDstTaskRecieveRequest::_internal_mutable_new_prev_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_prev_server_address_.Mutable( GetArena());
}
inline std::string* UpdateDstTaskRecieveRequest::release_new_prev_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.UpdateDstTaskRecieveRequest.new_prev_server_address)
  return _impl_.new_prev_server_address_.Release();
}
inline void UpdateDstTaskRecieveRequest::set_allocated_new_prev_server_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_prev_server_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_prev_server_address_.IsDefault()) {
          _impl_.new_prev_server_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.UpdateDstTaskRecieveRequest.new_prev_server_address)
}

// -------------------------------------------------------------------

// KV

// string key = 1;
inline void KV::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KV::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.KV.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KV::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.KV.key)
}
inline std::string* KV::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:rainstorm.KV.key)
  return _s;
}
inline const std::string& KV::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void KV::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* KV::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* KV::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.KV.key)
  return _impl_.key_.Release();
}
inline void KV::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.KV.key)
}

// string value = 2;
inline void KV::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& KV::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.KV.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KV::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.KV.value)
}
inline std::string* KV::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:rainstorm.KV.value)
  return _s;
}
inline const std::string& KV::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void KV::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* KV::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* KV::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.KV.value)
  return _impl_.value_.Release();
}
inline void KV::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.KV.value)
}

// -------------------------------------------------------------------

// DataChunk

// string id = 1;
inline bool DataChunk::has_id() const {
  return request_case() == kId;
}
inline void DataChunk::set_has_id() {
  _impl_._oneof_case_[0] = kId;
}
inline void DataChunk::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kId) {
    _impl_.request_.id_.Destroy();
    clear_has_request();
  }
}
inline const std::string& DataChunk::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.DataChunk.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataChunk::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() != kId) {
    clear_request();

    set_has_id();
    _impl_.request_.id_.InitDefault();
  }
  _impl_.request_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.DataChunk.id)
}
inline std::string* DataChunk::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:rainstorm.DataChunk.id)
  return _s;
}
inline const std::string& DataChunk::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (request_case() != kId) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.request_.id_.Get();
}
inline void DataChunk::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() != kId) {
    clear_request();

    set_has_id();
    _impl_.request_.id_.InitDefault();
  }
  _impl_.request_.id_.Set(value, GetArena());
}
inline std::string* DataChunk::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() != kId) {
    clear_request();

    set_has_id();
    _impl_.request_.id_.InitDefault();
  }
  return _impl_.request_.id_.Mutable( GetArena());
}
inline std::string* DataChunk::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.DataChunk.id)
  if (request_case() != kId) {
    return nullptr;
  }
  clear_has_request();
  return _impl_.request_.id_.Release();
}
inline void DataChunk::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_request()) {
    clear_request();
  }
  if (value != nullptr) {
    set_has_id();
    _impl_.request_.id_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:rainstorm.DataChunk.id)
}

// .rainstorm.KV pairs = 2;
inline bool DataChunk::has_pairs() const {
  return request_case() == kPairs;
}
inline bool DataChunk::_internal_has_pairs() const {
  return request_case() == kPairs;
}
inline void DataChunk::set_has_pairs() {
  _impl_._oneof_case_[0] = kPairs;
}
inline void DataChunk::clear_pairs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kPairs) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.pairs_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.pairs_);
    }
    clear_has_request();
  }
}
inline ::rainstorm::KV* DataChunk::release_pairs() {
  // @@protoc_insertion_point(field_release:rainstorm.DataChunk.pairs)
  if (request_case() == kPairs) {
    clear_has_request();
    auto* temp = _impl_.request_.pairs_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.pairs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rainstorm::KV& DataChunk::_internal_pairs() const {
  return request_case() == kPairs ? *_impl_.request_.pairs_ : reinterpret_cast<::rainstorm::KV&>(::rainstorm::_KV_default_instance_);
}
inline const ::rainstorm::KV& DataChunk::pairs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.DataChunk.pairs)
  return _internal_pairs();
}
inline ::rainstorm::KV* DataChunk::unsafe_arena_release_pairs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rainstorm.DataChunk.pairs)
  if (request_case() == kPairs) {
    clear_has_request();
    auto* temp = _impl_.request_.pairs_;
    _impl_.request_.pairs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataChunk::unsafe_arena_set_allocated_pairs(::rainstorm::KV* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_pairs();
    _impl_.request_.pairs_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rainstorm.DataChunk.pairs)
}
inline ::rainstorm::KV* DataChunk::_internal_mutable_pairs() {
  if (request_case() != kPairs) {
    clear_request();
    set_has_pairs();
    _impl_.request_.pairs_ =
        ::google::protobuf::Message::DefaultConstruct<::rainstorm::KV>(GetArena());
  }
  return _impl_.request_.pairs_;
}
inline ::rainstorm::KV* DataChunk::mutable_pairs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::rainstorm::KV* _msg = _internal_mutable_pairs();
  // @@protoc_insertion_point(field_mutable:rainstorm.DataChunk.pairs)
  return _msg;
}

// bool finished = 3;
inline bool DataChunk::has_finished() const {
  return request_case() == kFinished;
}
inline void DataChunk::set_has_finished() {
  _impl_._oneof_case_[0] = kFinished;
}
inline void DataChunk::clear_finished() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kFinished) {
    _impl_.request_.finished_ = false;
    clear_has_request();
  }
}
inline bool DataChunk::finished() const {
  // @@protoc_insertion_point(field_get:rainstorm.DataChunk.finished)
  return _internal_finished();
}
inline void DataChunk::set_finished(bool value) {
  if (request_case() != kFinished) {
    clear_request();
    set_has_finished();
  }
  _impl_.request_.finished_ = value;
  // @@protoc_insertion_point(field_set:rainstorm.DataChunk.finished)
}
inline bool DataChunk::_internal_finished() const {
  if (request_case() == kFinished) {
    return _impl_.request_.finished_;
  }
  return false;
}

inline bool DataChunk::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void DataChunk::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline DataChunk::RequestCase DataChunk::request_case() const {
  return DataChunk::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamDataChunk

// repeated .rainstorm.DataChunk chunks = 1;
inline int StreamDataChunk::_internal_chunks_size() const {
  return _internal_chunks().size();
}
inline int StreamDataChunk::chunks_size() const {
  return _internal_chunks_size();
}
inline void StreamDataChunk::clear_chunks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunks_.Clear();
}
inline ::rainstorm::DataChunk* StreamDataChunk::mutable_chunks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:rainstorm.StreamDataChunk.chunks)
  return _internal_mutable_chunks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>* StreamDataChunk::mutable_chunks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rainstorm.StreamDataChunk.chunks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_chunks();
}
inline const ::rainstorm::DataChunk& StreamDataChunk::chunks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.StreamDataChunk.chunks)
  return _internal_chunks().Get(index);
}
inline ::rainstorm::DataChunk* StreamDataChunk::add_chunks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::rainstorm::DataChunk* _add = _internal_mutable_chunks()->Add();
  // @@protoc_insertion_point(field_add:rainstorm.StreamDataChunk.chunks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>& StreamDataChunk::chunks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rainstorm.StreamDataChunk.chunks)
  return _internal_chunks();
}
inline const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>&
StreamDataChunk::_internal_chunks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunks_;
}
inline ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>*
StreamDataChunk::_internal_mutable_chunks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.chunks_;
}

// -------------------------------------------------------------------

// AckDataChunk

// repeated .rainstorm.DataChunk chunks = 1;
inline int AckDataChunk::_internal_chunks_size() const {
  return _internal_chunks().size();
}
inline int AckDataChunk::chunks_size() const {
  return _internal_chunks_size();
}
inline void AckDataChunk::clear_chunks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunks_.Clear();
}
inline ::rainstorm::DataChunk* AckDataChunk::mutable_chunks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:rainstorm.AckDataChunk.chunks)
  return _internal_mutable_chunks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>* AckDataChunk::mutable_chunks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rainstorm.AckDataChunk.chunks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_chunks();
}
inline const ::rainstorm::DataChunk& AckDataChunk::chunks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.AckDataChunk.chunks)
  return _internal_chunks().Get(index);
}
inline ::rainstorm::DataChunk* AckDataChunk::add_chunks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::rainstorm::DataChunk* _add = _internal_mutable_chunks()->Add();
  // @@protoc_insertion_point(field_add:rainstorm.AckDataChunk.chunks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>& AckDataChunk::chunks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rainstorm.AckDataChunk.chunks)
  return _internal_chunks();
}
inline const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>&
AckDataChunk::_internal_chunks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunks_;
}
inline ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>*
AckDataChunk::_internal_mutable_chunks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.chunks_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rainstorm


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::rainstorm::StatusCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::rainstorm::StatusCode>() {
  return ::rainstorm::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_rainstorm_2eproto_2epb_2eh
