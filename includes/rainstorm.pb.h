// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: rainstorm.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_rainstorm_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_rainstorm_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_rainstorm_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_rainstorm_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_rainstorm_2eproto;
namespace rainstorm {
class AckDataChunk;
struct AckDataChunkDefaultTypeInternal;
extern AckDataChunkDefaultTypeInternal _AckDataChunk_default_instance_;
class DataChunk;
struct DataChunkDefaultTypeInternal;
extern DataChunkDefaultTypeInternal _DataChunk_default_instance_;
class DataChunkLeader;
struct DataChunkLeaderDefaultTypeInternal;
extern DataChunkLeaderDefaultTypeInternal _DataChunkLeader_default_instance_;
class KV;
struct KVDefaultTypeInternal;
extern KVDefaultTypeInternal _KV_default_instance_;
class NewSrcTaskRequest;
struct NewSrcTaskRequestDefaultTypeInternal;
extern NewSrcTaskRequestDefaultTypeInternal _NewSrcTaskRequest_default_instance_;
class NewStageTaskRequest;
struct NewStageTaskRequestDefaultTypeInternal;
extern NewStageTaskRequestDefaultTypeInternal _NewStageTaskRequest_default_instance_;
class OperationStatus;
struct OperationStatusDefaultTypeInternal;
extern OperationStatusDefaultTypeInternal _OperationStatus_default_instance_;
class StreamDataChunk;
struct StreamDataChunkDefaultTypeInternal;
extern StreamDataChunkDefaultTypeInternal _StreamDataChunk_default_instance_;
class StreamDataChunkLeader;
struct StreamDataChunkLeaderDefaultTypeInternal;
extern StreamDataChunkLeaderDefaultTypeInternal _StreamDataChunkLeader_default_instance_;
class UpdateTaskSndRequest;
struct UpdateTaskSndRequestDefaultTypeInternal;
extern UpdateTaskSndRequestDefaultTypeInternal _UpdateTaskSndRequest_default_instance_;
}  // namespace rainstorm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace rainstorm {
enum StatusCode : int {
  SUCCESS = 0,
  INVALID = 1,
  NOT_FOUND = 2,
  ALREADY_EXISTS = 3,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StatusCode_IsValid(int value);
extern const uint32_t StatusCode_internal_data_[];
constexpr StatusCode StatusCode_MIN = static_cast<StatusCode>(0);
constexpr StatusCode StatusCode_MAX = static_cast<StatusCode>(3);
constexpr int StatusCode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
StatusCode_descriptor();
template <typename T>
const std::string& StatusCode_Name(T value) {
  static_assert(std::is_same<T, StatusCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StatusCode_Name().");
  return StatusCode_Name(static_cast<StatusCode>(value));
}
template <>
inline const std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StatusCode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool StatusCode_Parse(absl::string_view name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
      StatusCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UpdateTaskSndRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.UpdateTaskSndRequest) */ {
 public:
  inline UpdateTaskSndRequest() : UpdateTaskSndRequest(nullptr) {}
  ~UpdateTaskSndRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateTaskSndRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateTaskSndRequest(const UpdateTaskSndRequest& from) : UpdateTaskSndRequest(nullptr, from) {}
  inline UpdateTaskSndRequest(UpdateTaskSndRequest&& from) noexcept
      : UpdateTaskSndRequest(nullptr, std::move(from)) {}
  inline UpdateTaskSndRequest& operator=(const UpdateTaskSndRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTaskSndRequest& operator=(UpdateTaskSndRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateTaskSndRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateTaskSndRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTaskSndRequest*>(
        &_UpdateTaskSndRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(UpdateTaskSndRequest& a, UpdateTaskSndRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateTaskSndRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTaskSndRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateTaskSndRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UpdateTaskSndRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateTaskSndRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateTaskSndRequest& from) { UpdateTaskSndRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateTaskSndRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.UpdateTaskSndRequest"; }

 protected:
  explicit UpdateTaskSndRequest(::google::protobuf::Arena* arena);
  UpdateTaskSndRequest(::google::protobuf::Arena* arena, const UpdateTaskSndRequest& from);
  UpdateTaskSndRequest(::google::protobuf::Arena* arena, UpdateTaskSndRequest&& from) noexcept
      : UpdateTaskSndRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSndAddressFieldNumber = 2,
    kIndexFieldNumber = 1,
    kSndPortFieldNumber = 3,
  };
  // string snd_address = 2;
  void clear_snd_address() ;
  const std::string& snd_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_snd_address(Arg_&& arg, Args_... args);
  std::string* mutable_snd_address();
  PROTOBUF_NODISCARD std::string* release_snd_address();
  void set_allocated_snd_address(std::string* value);

  private:
  const std::string& _internal_snd_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snd_address(
      const std::string& value);
  std::string* _internal_mutable_snd_address();

  public:
  // int32 index = 1;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // int32 snd_port = 3;
  void clear_snd_port() ;
  ::int32_t snd_port() const;
  void set_snd_port(::int32_t value);

  private:
  ::int32_t _internal_snd_port() const;
  void _internal_set_snd_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rainstorm.UpdateTaskSndRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      50, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_UpdateTaskSndRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateTaskSndRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr snd_address_;
    ::int32_t index_;
    ::int32_t snd_port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class OperationStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.OperationStatus) */ {
 public:
  inline OperationStatus() : OperationStatus(nullptr) {}
  ~OperationStatus() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OperationStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline OperationStatus(const OperationStatus& from) : OperationStatus(nullptr, from) {}
  inline OperationStatus(OperationStatus&& from) noexcept
      : OperationStatus(nullptr, std::move(from)) {}
  inline OperationStatus& operator=(const OperationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStatus& operator=(OperationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStatus* internal_default_instance() {
    return reinterpret_cast<const OperationStatus*>(
        &_OperationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(OperationStatus& a, OperationStatus& b) { a.Swap(&b); }
  inline void Swap(OperationStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OperationStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OperationStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OperationStatus& from) { OperationStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OperationStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.OperationStatus"; }

 protected:
  explicit OperationStatus(::google::protobuf::Arena* arena);
  OperationStatus(::google::protobuf::Arena* arena, const OperationStatus& from);
  OperationStatus(::google::protobuf::Arena* arena, OperationStatus&& from) noexcept
      : OperationStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .rainstorm.StatusCode status = 1;
  void clear_status() ;
  ::rainstorm::StatusCode status() const;
  void set_status(::rainstorm::StatusCode value);

  private:
  ::rainstorm::StatusCode _internal_status() const;
  void _internal_set_status(::rainstorm::StatusCode value);

  public:
  // @@protoc_insertion_point(class_scope:rainstorm.OperationStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      41, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OperationStatus_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OperationStatus& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class NewStageTaskRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.NewStageTaskRequest) */ {
 public:
  inline NewStageTaskRequest() : NewStageTaskRequest(nullptr) {}
  ~NewStageTaskRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewStageTaskRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewStageTaskRequest(const NewStageTaskRequest& from) : NewStageTaskRequest(nullptr, from) {}
  inline NewStageTaskRequest(NewStageTaskRequest&& from) noexcept
      : NewStageTaskRequest(nullptr, std::move(from)) {}
  inline NewStageTaskRequest& operator=(const NewStageTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewStageTaskRequest& operator=(NewStageTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewStageTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewStageTaskRequest* internal_default_instance() {
    return reinterpret_cast<const NewStageTaskRequest*>(
        &_NewStageTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(NewStageTaskRequest& a, NewStageTaskRequest& b) { a.Swap(&b); }
  inline void Swap(NewStageTaskRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewStageTaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewStageTaskRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NewStageTaskRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewStageTaskRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewStageTaskRequest& from) { NewStageTaskRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NewStageTaskRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.NewStageTaskRequest"; }

 protected:
  explicit NewStageTaskRequest(::google::protobuf::Arena* arena);
  NewStageTaskRequest(::google::protobuf::Arena* arena, const NewStageTaskRequest& from);
  NewStageTaskRequest(::google::protobuf::Arena* arena, NewStageTaskRequest&& from) noexcept
      : NewStageTaskRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSndAddressesFieldNumber = 8,
    kSndPortsFieldNumber = 9,
    kJobIdFieldNumber = 1,
    kExecutableFieldNumber = 5,
    kStageIdFieldNumber = 2,
    kTaskIdFieldNumber = 3,
    kTaskCountFieldNumber = 4,
    kStatefulFieldNumber = 6,
    kLastFieldNumber = 7,
  };
  // repeated string snd_addresses = 8;
  int snd_addresses_size() const;
  private:
  int _internal_snd_addresses_size() const;

  public:
  void clear_snd_addresses() ;
  const std::string& snd_addresses(int index) const;
  std::string* mutable_snd_addresses(int index);
  void set_snd_addresses(int index, const std::string& value);
  void set_snd_addresses(int index, std::string&& value);
  void set_snd_addresses(int index, const char* value);
  void set_snd_addresses(int index, const char* value, std::size_t size);
  void set_snd_addresses(int index, absl::string_view value);
  std::string* add_snd_addresses();
  void add_snd_addresses(const std::string& value);
  void add_snd_addresses(std::string&& value);
  void add_snd_addresses(const char* value);
  void add_snd_addresses(const char* value, std::size_t size);
  void add_snd_addresses(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& snd_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_snd_addresses();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_snd_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_snd_addresses();

  public:
  // repeated int32 snd_ports = 9;
  int snd_ports_size() const;
  private:
  int _internal_snd_ports_size() const;

  public:
  void clear_snd_ports() ;
  ::int32_t snd_ports(int index) const;
  void set_snd_ports(int index, ::int32_t value);
  void add_snd_ports(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& snd_ports() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_snd_ports();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_snd_ports() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_snd_ports();

  public:
  // string job_id = 1;
  void clear_job_id() ;
  const std::string& job_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_job_id(Arg_&& arg, Args_... args);
  std::string* mutable_job_id();
  PROTOBUF_NODISCARD std::string* release_job_id();
  void set_allocated_job_id(std::string* value);

  private:
  const std::string& _internal_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_id(
      const std::string& value);
  std::string* _internal_mutable_job_id();

  public:
  // string executable = 5;
  void clear_executable() ;
  const std::string& executable() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_executable(Arg_&& arg, Args_... args);
  std::string* mutable_executable();
  PROTOBUF_NODISCARD std::string* release_executable();
  void set_allocated_executable(std::string* value);

  private:
  const std::string& _internal_executable() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executable(
      const std::string& value);
  std::string* _internal_mutable_executable();

  public:
  // int32 stage_id = 2;
  void clear_stage_id() ;
  ::int32_t stage_id() const;
  void set_stage_id(::int32_t value);

  private:
  ::int32_t _internal_stage_id() const;
  void _internal_set_stage_id(::int32_t value);

  public:
  // int32 task_id = 3;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // int32 task_count = 4;
  void clear_task_count() ;
  ::int32_t task_count() const;
  void set_task_count(::int32_t value);

  private:
  ::int32_t _internal_task_count() const;
  void _internal_set_task_count(::int32_t value);

  public:
  // bool stateful = 6;
  void clear_stateful() ;
  bool stateful() const;
  void set_stateful(bool value);

  private:
  bool _internal_stateful() const;
  void _internal_set_stateful(bool value);

  public:
  // bool last = 7;
  void clear_last() ;
  bool last() const;
  void set_last(bool value);

  private:
  bool _internal_last() const;
  void _internal_set_last(bool value);

  public:
  // @@protoc_insertion_point(class_scope:rainstorm.NewStageTaskRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      75, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NewStageTaskRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NewStageTaskRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> snd_addresses_;
    ::google::protobuf::RepeatedField<::int32_t> snd_ports_;
    mutable ::google::protobuf::internal::CachedSize _snd_ports_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr job_id_;
    ::google::protobuf::internal::ArenaStringPtr executable_;
    ::int32_t stage_id_;
    ::int32_t task_id_;
    ::int32_t task_count_;
    bool stateful_;
    bool last_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class NewSrcTaskRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.NewSrcTaskRequest) */ {
 public:
  inline NewSrcTaskRequest() : NewSrcTaskRequest(nullptr) {}
  ~NewSrcTaskRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewSrcTaskRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewSrcTaskRequest(const NewSrcTaskRequest& from) : NewSrcTaskRequest(nullptr, from) {}
  inline NewSrcTaskRequest(NewSrcTaskRequest&& from) noexcept
      : NewSrcTaskRequest(nullptr, std::move(from)) {}
  inline NewSrcTaskRequest& operator=(const NewSrcTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewSrcTaskRequest& operator=(NewSrcTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewSrcTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewSrcTaskRequest* internal_default_instance() {
    return reinterpret_cast<const NewSrcTaskRequest*>(
        &_NewSrcTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NewSrcTaskRequest& a, NewSrcTaskRequest& b) { a.Swap(&b); }
  inline void Swap(NewSrcTaskRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewSrcTaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewSrcTaskRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NewSrcTaskRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewSrcTaskRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewSrcTaskRequest& from) { NewSrcTaskRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NewSrcTaskRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.NewSrcTaskRequest"; }

 protected:
  explicit NewSrcTaskRequest(::google::protobuf::Arena* arena);
  NewSrcTaskRequest(::google::protobuf::Arena* arena, const NewSrcTaskRequest& from);
  NewSrcTaskRequest(::google::protobuf::Arena* arena, NewSrcTaskRequest&& from) noexcept
      : NewSrcTaskRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kJobIdFieldNumber = 1,
    kSrcFilenameFieldNumber = 4,
    kSndAddressFieldNumber = 5,
    kTaskIdFieldNumber = 2,
    kTaskCountFieldNumber = 3,
    kSndPortFieldNumber = 6,
  };
  // string job_id = 1;
  void clear_job_id() ;
  const std::string& job_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_job_id(Arg_&& arg, Args_... args);
  std::string* mutable_job_id();
  PROTOBUF_NODISCARD std::string* release_job_id();
  void set_allocated_job_id(std::string* value);

  private:
  const std::string& _internal_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_id(
      const std::string& value);
  std::string* _internal_mutable_job_id();

  public:
  // string src_filename = 4;
  void clear_src_filename() ;
  const std::string& src_filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_src_filename(Arg_&& arg, Args_... args);
  std::string* mutable_src_filename();
  PROTOBUF_NODISCARD std::string* release_src_filename();
  void set_allocated_src_filename(std::string* value);

  private:
  const std::string& _internal_src_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_filename(
      const std::string& value);
  std::string* _internal_mutable_src_filename();

  public:
  // string snd_address = 5;
  void clear_snd_address() ;
  const std::string& snd_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_snd_address(Arg_&& arg, Args_... args);
  std::string* mutable_snd_address();
  PROTOBUF_NODISCARD std::string* release_snd_address();
  void set_allocated_snd_address(std::string* value);

  private:
  const std::string& _internal_snd_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snd_address(
      const std::string& value);
  std::string* _internal_mutable_snd_address();

  public:
  // int32 task_id = 2;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // int32 task_count = 3;
  void clear_task_count() ;
  ::int32_t task_count() const;
  void set_task_count(::int32_t value);

  private:
  ::int32_t _internal_task_count() const;
  void _internal_set_task_count(::int32_t value);

  public:
  // int32 snd_port = 6;
  void clear_snd_port() ;
  ::int32_t snd_port() const;
  void set_snd_port(::int32_t value);

  private:
  ::int32_t _internal_snd_port() const;
  void _internal_set_snd_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rainstorm.NewSrcTaskRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      65, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NewSrcTaskRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NewSrcTaskRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr job_id_;
    ::google::protobuf::internal::ArenaStringPtr src_filename_;
    ::google::protobuf::internal::ArenaStringPtr snd_address_;
    ::int32_t task_id_;
    ::int32_t task_count_;
    ::int32_t snd_port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class KV final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.KV) */ {
 public:
  inline KV() : KV(nullptr) {}
  ~KV() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KV(
      ::google::protobuf::internal::ConstantInitialized);

  inline KV(const KV& from) : KV(nullptr, from) {}
  inline KV(KV&& from) noexcept
      : KV(nullptr, std::move(from)) {}
  inline KV& operator=(const KV& from) {
    CopyFrom(from);
    return *this;
  }
  inline KV& operator=(KV&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KV& default_instance() {
    return *internal_default_instance();
  }
  static inline const KV* internal_default_instance() {
    return reinterpret_cast<const KV*>(
        &_KV_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(KV& a, KV& b) { a.Swap(&b); }
  inline void Swap(KV* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KV* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KV* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<KV>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KV& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const KV& from) { KV::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(KV* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.KV"; }

 protected:
  explicit KV(::google::protobuf::Arena* arena);
  KV(::google::protobuf::Arena* arena, const KV& from);
  KV(::google::protobuf::Arena* arena, KV&& from) noexcept
      : KV(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string key = 2;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 3;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rainstorm.KV)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      29, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_KV_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KV& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class AckDataChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.AckDataChunk) */ {
 public:
  inline AckDataChunk() : AckDataChunk(nullptr) {}
  ~AckDataChunk() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AckDataChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline AckDataChunk(const AckDataChunk& from) : AckDataChunk(nullptr, from) {}
  inline AckDataChunk(AckDataChunk&& from) noexcept
      : AckDataChunk(nullptr, std::move(from)) {}
  inline AckDataChunk& operator=(const AckDataChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckDataChunk& operator=(AckDataChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckDataChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckDataChunk* internal_default_instance() {
    return reinterpret_cast<const AckDataChunk*>(
        &_AckDataChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(AckDataChunk& a, AckDataChunk& b) { a.Swap(&b); }
  inline void Swap(AckDataChunk* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckDataChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AckDataChunk* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AckDataChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AckDataChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AckDataChunk& from) { AckDataChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AckDataChunk* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.AckDataChunk"; }

 protected:
  explicit AckDataChunk(::google::protobuf::Arena* arena);
  AckDataChunk(::google::protobuf::Arena* arena, const AckDataChunk& from);
  AckDataChunk(::google::protobuf::Arena* arena, AckDataChunk&& from) noexcept
      : AckDataChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated int32 id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;

  public:
  void clear_id() ;
  ::int32_t id(int index) const;
  void set_id(int index, ::int32_t value);
  void add_id(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& id() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_id();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_id() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:rainstorm.AckDataChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AckDataChunk_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AckDataChunk& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> id_;
    mutable ::google::protobuf::internal::CachedSize _id_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class DataChunkLeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.DataChunkLeader) */ {
 public:
  inline DataChunkLeader() : DataChunkLeader(nullptr) {}
  ~DataChunkLeader() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataChunkLeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataChunkLeader(const DataChunkLeader& from) : DataChunkLeader(nullptr, from) {}
  inline DataChunkLeader(DataChunkLeader&& from) noexcept
      : DataChunkLeader(nullptr, std::move(from)) {}
  inline DataChunkLeader& operator=(const DataChunkLeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataChunkLeader& operator=(DataChunkLeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataChunkLeader& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kJobId = 1,
    kPair = 2,
    kFinished = 3,
    REQUEST_NOT_SET = 0,
  };
  static inline const DataChunkLeader* internal_default_instance() {
    return reinterpret_cast<const DataChunkLeader*>(
        &_DataChunkLeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(DataChunkLeader& a, DataChunkLeader& b) { a.Swap(&b); }
  inline void Swap(DataChunkLeader* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataChunkLeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataChunkLeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DataChunkLeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataChunkLeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataChunkLeader& from) { DataChunkLeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DataChunkLeader* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.DataChunkLeader"; }

 protected:
  explicit DataChunkLeader(::google::protobuf::Arena* arena);
  DataChunkLeader(::google::protobuf::Arena* arena, const DataChunkLeader& from);
  DataChunkLeader(::google::protobuf::Arena* arena, DataChunkLeader&& from) noexcept
      : DataChunkLeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kJobIdFieldNumber = 1,
    kPairFieldNumber = 2,
    kFinishedFieldNumber = 3,
  };
  // string job_id = 1;
  bool has_job_id() const;
  void clear_job_id() ;
  const std::string& job_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_job_id(Arg_&& arg, Args_... args);
  std::string* mutable_job_id();
  PROTOBUF_NODISCARD std::string* release_job_id();
  void set_allocated_job_id(std::string* value);

  private:
  const std::string& _internal_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_id(
      const std::string& value);
  std::string* _internal_mutable_job_id();

  public:
  // .rainstorm.KV pair = 2;
  bool has_pair() const;
  private:
  bool _internal_has_pair() const;

  public:
  void clear_pair() ;
  const ::rainstorm::KV& pair() const;
  PROTOBUF_NODISCARD ::rainstorm::KV* release_pair();
  ::rainstorm::KV* mutable_pair();
  void set_allocated_pair(::rainstorm::KV* value);
  void unsafe_arena_set_allocated_pair(::rainstorm::KV* value);
  ::rainstorm::KV* unsafe_arena_release_pair();

  private:
  const ::rainstorm::KV& _internal_pair() const;
  ::rainstorm::KV* _internal_mutable_pair();

  public:
  // bool finished = 3;
  bool has_finished() const;
  void clear_finished() ;
  bool finished() const;
  void set_finished(bool value);

  private:
  bool _internal_finished() const;
  void _internal_set_finished(bool value);

  public:
  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:rainstorm.DataChunkLeader)
 private:
  class _Internal;
  void set_has_job_id();
  void set_has_pair();
  void set_has_finished();
  inline bool has_request() const;
  inline void clear_has_request();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 1,
      40, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DataChunkLeader_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataChunkLeader& from_msg);
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr job_id_;
      ::rainstorm::KV* pair_;
      bool finished_;
    } request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class DataChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.DataChunk) */ {
 public:
  inline DataChunk() : DataChunk(nullptr) {}
  ~DataChunk() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataChunk(const DataChunk& from) : DataChunk(nullptr, from) {}
  inline DataChunk(DataChunk&& from) noexcept
      : DataChunk(nullptr, std::move(from)) {}
  inline DataChunk& operator=(const DataChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataChunk& operator=(DataChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataChunk& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kPair = 1,
    kFinished = 2,
    REQUEST_NOT_SET = 0,
  };
  static inline const DataChunk* internal_default_instance() {
    return reinterpret_cast<const DataChunk*>(
        &_DataChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(DataChunk& a, DataChunk& b) { a.Swap(&b); }
  inline void Swap(DataChunk* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataChunk* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DataChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataChunk& from) { DataChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DataChunk* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.DataChunk"; }

 protected:
  explicit DataChunk(::google::protobuf::Arena* arena);
  DataChunk(::google::protobuf::Arena* arena, const DataChunk& from);
  DataChunk(::google::protobuf::Arena* arena, DataChunk&& from) noexcept
      : DataChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPairFieldNumber = 1,
    kFinishedFieldNumber = 2,
  };
  // .rainstorm.KV pair = 1;
  bool has_pair() const;
  private:
  bool _internal_has_pair() const;

  public:
  void clear_pair() ;
  const ::rainstorm::KV& pair() const;
  PROTOBUF_NODISCARD ::rainstorm::KV* release_pair();
  ::rainstorm::KV* mutable_pair();
  void set_allocated_pair(::rainstorm::KV* value);
  void unsafe_arena_set_allocated_pair(::rainstorm::KV* value);
  ::rainstorm::KV* unsafe_arena_release_pair();

  private:
  const ::rainstorm::KV& _internal_pair() const;
  ::rainstorm::KV* _internal_mutable_pair();

  public:
  // bool finished = 2;
  bool has_finished() const;
  void clear_finished() ;
  bool finished() const;
  void set_finished(bool value);

  private:
  bool _internal_finished() const;
  void _internal_set_finished(bool value);

  public:
  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:rainstorm.DataChunk)
 private:
  class _Internal;
  void set_has_pair();
  void set_has_finished();
  inline bool has_request() const;
  inline void clear_has_request();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DataChunk_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataChunk& from_msg);
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::rainstorm::KV* pair_;
      bool finished_;
    } request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class StreamDataChunkLeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.StreamDataChunkLeader) */ {
 public:
  inline StreamDataChunkLeader() : StreamDataChunkLeader(nullptr) {}
  ~StreamDataChunkLeader() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamDataChunkLeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamDataChunkLeader(const StreamDataChunkLeader& from) : StreamDataChunkLeader(nullptr, from) {}
  inline StreamDataChunkLeader(StreamDataChunkLeader&& from) noexcept
      : StreamDataChunkLeader(nullptr, std::move(from)) {}
  inline StreamDataChunkLeader& operator=(const StreamDataChunkLeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataChunkLeader& operator=(StreamDataChunkLeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamDataChunkLeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamDataChunkLeader* internal_default_instance() {
    return reinterpret_cast<const StreamDataChunkLeader*>(
        &_StreamDataChunkLeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(StreamDataChunkLeader& a, StreamDataChunkLeader& b) { a.Swap(&b); }
  inline void Swap(StreamDataChunkLeader* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDataChunkLeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamDataChunkLeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<StreamDataChunkLeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamDataChunkLeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamDataChunkLeader& from) { StreamDataChunkLeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StreamDataChunkLeader* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.StreamDataChunkLeader"; }

 protected:
  explicit StreamDataChunkLeader(::google::protobuf::Arena* arena);
  StreamDataChunkLeader(::google::protobuf::Arena* arena, const StreamDataChunkLeader& from);
  StreamDataChunkLeader(::google::protobuf::Arena* arena, StreamDataChunkLeader&& from) noexcept
      : StreamDataChunkLeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChunksFieldNumber = 1,
  };
  // repeated .rainstorm.DataChunkLeader chunks = 1;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;

  public:
  void clear_chunks() ;
  ::rainstorm::DataChunkLeader* mutable_chunks(int index);
  ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunkLeader>* mutable_chunks();

  private:
  const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunkLeader>& _internal_chunks() const;
  ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunkLeader>* _internal_mutable_chunks();
  public:
  const ::rainstorm::DataChunkLeader& chunks(int index) const;
  ::rainstorm::DataChunkLeader* add_chunks();
  const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunkLeader>& chunks() const;
  // @@protoc_insertion_point(class_scope:rainstorm.StreamDataChunkLeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StreamDataChunkLeader_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamDataChunkLeader& from_msg);
    ::google::protobuf::RepeatedPtrField< ::rainstorm::DataChunkLeader > chunks_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};
// -------------------------------------------------------------------

class StreamDataChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rainstorm.StreamDataChunk) */ {
 public:
  inline StreamDataChunk() : StreamDataChunk(nullptr) {}
  ~StreamDataChunk() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamDataChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamDataChunk(const StreamDataChunk& from) : StreamDataChunk(nullptr, from) {}
  inline StreamDataChunk(StreamDataChunk&& from) noexcept
      : StreamDataChunk(nullptr, std::move(from)) {}
  inline StreamDataChunk& operator=(const StreamDataChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataChunk& operator=(StreamDataChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamDataChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamDataChunk* internal_default_instance() {
    return reinterpret_cast<const StreamDataChunk*>(
        &_StreamDataChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(StreamDataChunk& a, StreamDataChunk& b) { a.Swap(&b); }
  inline void Swap(StreamDataChunk* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDataChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamDataChunk* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<StreamDataChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamDataChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamDataChunk& from) { StreamDataChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StreamDataChunk* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rainstorm.StreamDataChunk"; }

 protected:
  explicit StreamDataChunk(::google::protobuf::Arena* arena);
  StreamDataChunk(::google::protobuf::Arena* arena, const StreamDataChunk& from);
  StreamDataChunk(::google::protobuf::Arena* arena, StreamDataChunk&& from) noexcept
      : StreamDataChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChunksFieldNumber = 1,
  };
  // repeated .rainstorm.DataChunk chunks = 1;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;

  public:
  void clear_chunks() ;
  ::rainstorm::DataChunk* mutable_chunks(int index);
  ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>* mutable_chunks();

  private:
  const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>& _internal_chunks() const;
  ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>* _internal_mutable_chunks();
  public:
  const ::rainstorm::DataChunk& chunks(int index) const;
  ::rainstorm::DataChunk* add_chunks();
  const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>& chunks() const;
  // @@protoc_insertion_point(class_scope:rainstorm.StreamDataChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StreamDataChunk_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamDataChunk& from_msg);
    ::google::protobuf::RepeatedPtrField< ::rainstorm::DataChunk > chunks_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rainstorm_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OperationStatus

// .rainstorm.StatusCode status = 1;
inline void OperationStatus::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::rainstorm::StatusCode OperationStatus::status() const {
  // @@protoc_insertion_point(field_get:rainstorm.OperationStatus.status)
  return _internal_status();
}
inline void OperationStatus::set_status(::rainstorm::StatusCode value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:rainstorm.OperationStatus.status)
}
inline ::rainstorm::StatusCode OperationStatus::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::rainstorm::StatusCode>(_impl_.status_);
}
inline void OperationStatus::_internal_set_status(::rainstorm::StatusCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string message = 2;
inline void OperationStatus::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& OperationStatus::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.OperationStatus.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationStatus::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.OperationStatus.message)
}
inline std::string* OperationStatus::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:rainstorm.OperationStatus.message)
  return _s;
}
inline const std::string& OperationStatus::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void OperationStatus::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* OperationStatus::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* OperationStatus::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.OperationStatus.message)
  return _impl_.message_.Release();
}
inline void OperationStatus::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.OperationStatus.message)
}

// -------------------------------------------------------------------

// NewSrcTaskRequest

// string job_id = 1;
inline void NewSrcTaskRequest::clear_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.ClearToEmpty();
}
inline const std::string& NewSrcTaskRequest::job_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewSrcTaskRequest.job_id)
  return _internal_job_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewSrcTaskRequest::set_job_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.NewSrcTaskRequest.job_id)
}
inline std::string* NewSrcTaskRequest::mutable_job_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_job_id();
  // @@protoc_insertion_point(field_mutable:rainstorm.NewSrcTaskRequest.job_id)
  return _s;
}
inline const std::string& NewSrcTaskRequest::_internal_job_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.job_id_.Get();
}
inline void NewSrcTaskRequest::_internal_set_job_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(value, GetArena());
}
inline std::string* NewSrcTaskRequest::_internal_mutable_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.job_id_.Mutable( GetArena());
}
inline std::string* NewSrcTaskRequest::release_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.NewSrcTaskRequest.job_id)
  return _impl_.job_id_.Release();
}
inline void NewSrcTaskRequest::set_allocated_job_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.job_id_.IsDefault()) {
          _impl_.job_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.NewSrcTaskRequest.job_id)
}

// int32 task_id = 2;
inline void NewSrcTaskRequest::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = 0;
}
inline ::int32_t NewSrcTaskRequest::task_id() const {
  // @@protoc_insertion_point(field_get:rainstorm.NewSrcTaskRequest.task_id)
  return _internal_task_id();
}
inline void NewSrcTaskRequest::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewSrcTaskRequest.task_id)
}
inline ::int32_t NewSrcTaskRequest::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_;
}
inline void NewSrcTaskRequest::_internal_set_task_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = value;
}

// int32 task_count = 3;
inline void NewSrcTaskRequest::clear_task_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_count_ = 0;
}
inline ::int32_t NewSrcTaskRequest::task_count() const {
  // @@protoc_insertion_point(field_get:rainstorm.NewSrcTaskRequest.task_count)
  return _internal_task_count();
}
inline void NewSrcTaskRequest::set_task_count(::int32_t value) {
  _internal_set_task_count(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewSrcTaskRequest.task_count)
}
inline ::int32_t NewSrcTaskRequest::_internal_task_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_count_;
}
inline void NewSrcTaskRequest::_internal_set_task_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_count_ = value;
}

// string src_filename = 4;
inline void NewSrcTaskRequest::clear_src_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_filename_.ClearToEmpty();
}
inline const std::string& NewSrcTaskRequest::src_filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewSrcTaskRequest.src_filename)
  return _internal_src_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewSrcTaskRequest::set_src_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.NewSrcTaskRequest.src_filename)
}
inline std::string* NewSrcTaskRequest::mutable_src_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_src_filename();
  // @@protoc_insertion_point(field_mutable:rainstorm.NewSrcTaskRequest.src_filename)
  return _s;
}
inline const std::string& NewSrcTaskRequest::_internal_src_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.src_filename_.Get();
}
inline void NewSrcTaskRequest::_internal_set_src_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_filename_.Set(value, GetArena());
}
inline std::string* NewSrcTaskRequest::_internal_mutable_src_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.src_filename_.Mutable( GetArena());
}
inline std::string* NewSrcTaskRequest::release_src_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.NewSrcTaskRequest.src_filename)
  return _impl_.src_filename_.Release();
}
inline void NewSrcTaskRequest::set_allocated_src_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.src_filename_.IsDefault()) {
          _impl_.src_filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.NewSrcTaskRequest.src_filename)
}

// string snd_address = 5;
inline void NewSrcTaskRequest::clear_snd_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_address_.ClearToEmpty();
}
inline const std::string& NewSrcTaskRequest::snd_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewSrcTaskRequest.snd_address)
  return _internal_snd_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewSrcTaskRequest::set_snd_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.NewSrcTaskRequest.snd_address)
}
inline std::string* NewSrcTaskRequest::mutable_snd_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_snd_address();
  // @@protoc_insertion_point(field_mutable:rainstorm.NewSrcTaskRequest.snd_address)
  return _s;
}
inline const std::string& NewSrcTaskRequest::_internal_snd_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.snd_address_.Get();
}
inline void NewSrcTaskRequest::_internal_set_snd_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_address_.Set(value, GetArena());
}
inline std::string* NewSrcTaskRequest::_internal_mutable_snd_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.snd_address_.Mutable( GetArena());
}
inline std::string* NewSrcTaskRequest::release_snd_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.NewSrcTaskRequest.snd_address)
  return _impl_.snd_address_.Release();
}
inline void NewSrcTaskRequest::set_allocated_snd_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.snd_address_.IsDefault()) {
          _impl_.snd_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.NewSrcTaskRequest.snd_address)
}

// int32 snd_port = 6;
inline void NewSrcTaskRequest::clear_snd_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_port_ = 0;
}
inline ::int32_t NewSrcTaskRequest::snd_port() const {
  // @@protoc_insertion_point(field_get:rainstorm.NewSrcTaskRequest.snd_port)
  return _internal_snd_port();
}
inline void NewSrcTaskRequest::set_snd_port(::int32_t value) {
  _internal_set_snd_port(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewSrcTaskRequest.snd_port)
}
inline ::int32_t NewSrcTaskRequest::_internal_snd_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.snd_port_;
}
inline void NewSrcTaskRequest::_internal_set_snd_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_port_ = value;
}

// -------------------------------------------------------------------

// NewStageTaskRequest

// string job_id = 1;
inline void NewStageTaskRequest::clear_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.ClearToEmpty();
}
inline const std::string& NewStageTaskRequest::job_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.job_id)
  return _internal_job_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewStageTaskRequest::set_job_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.job_id)
}
inline std::string* NewStageTaskRequest::mutable_job_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_job_id();
  // @@protoc_insertion_point(field_mutable:rainstorm.NewStageTaskRequest.job_id)
  return _s;
}
inline const std::string& NewStageTaskRequest::_internal_job_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.job_id_.Get();
}
inline void NewStageTaskRequest::_internal_set_job_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.Set(value, GetArena());
}
inline std::string* NewStageTaskRequest::_internal_mutable_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.job_id_.Mutable( GetArena());
}
inline std::string* NewStageTaskRequest::release_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.NewStageTaskRequest.job_id)
  return _impl_.job_id_.Release();
}
inline void NewStageTaskRequest::set_allocated_job_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.job_id_.IsDefault()) {
          _impl_.job_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.NewStageTaskRequest.job_id)
}

// int32 stage_id = 2;
inline void NewStageTaskRequest::clear_stage_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stage_id_ = 0;
}
inline ::int32_t NewStageTaskRequest::stage_id() const {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.stage_id)
  return _internal_stage_id();
}
inline void NewStageTaskRequest::set_stage_id(::int32_t value) {
  _internal_set_stage_id(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.stage_id)
}
inline ::int32_t NewStageTaskRequest::_internal_stage_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stage_id_;
}
inline void NewStageTaskRequest::_internal_set_stage_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stage_id_ = value;
}

// int32 task_id = 3;
inline void NewStageTaskRequest::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = 0;
}
inline ::int32_t NewStageTaskRequest::task_id() const {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.task_id)
  return _internal_task_id();
}
inline void NewStageTaskRequest::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.task_id)
}
inline ::int32_t NewStageTaskRequest::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_;
}
inline void NewStageTaskRequest::_internal_set_task_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = value;
}

// int32 task_count = 4;
inline void NewStageTaskRequest::clear_task_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_count_ = 0;
}
inline ::int32_t NewStageTaskRequest::task_count() const {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.task_count)
  return _internal_task_count();
}
inline void NewStageTaskRequest::set_task_count(::int32_t value) {
  _internal_set_task_count(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.task_count)
}
inline ::int32_t NewStageTaskRequest::_internal_task_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_count_;
}
inline void NewStageTaskRequest::_internal_set_task_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_count_ = value;
}

// string executable = 5;
inline void NewStageTaskRequest::clear_executable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_.ClearToEmpty();
}
inline const std::string& NewStageTaskRequest::executable() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.executable)
  return _internal_executable();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewStageTaskRequest::set_executable(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.executable)
}
inline std::string* NewStageTaskRequest::mutable_executable() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_executable();
  // @@protoc_insertion_point(field_mutable:rainstorm.NewStageTaskRequest.executable)
  return _s;
}
inline const std::string& NewStageTaskRequest::_internal_executable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.executable_.Get();
}
inline void NewStageTaskRequest::_internal_set_executable(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_.Set(value, GetArena());
}
inline std::string* NewStageTaskRequest::_internal_mutable_executable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.executable_.Mutable( GetArena());
}
inline std::string* NewStageTaskRequest::release_executable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.NewStageTaskRequest.executable)
  return _impl_.executable_.Release();
}
inline void NewStageTaskRequest::set_allocated_executable(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.executable_.IsDefault()) {
          _impl_.executable_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.NewStageTaskRequest.executable)
}

// bool stateful = 6;
inline void NewStageTaskRequest::clear_stateful() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stateful_ = false;
}
inline bool NewStageTaskRequest::stateful() const {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.stateful)
  return _internal_stateful();
}
inline void NewStageTaskRequest::set_stateful(bool value) {
  _internal_set_stateful(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.stateful)
}
inline bool NewStageTaskRequest::_internal_stateful() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stateful_;
}
inline void NewStageTaskRequest::_internal_set_stateful(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stateful_ = value;
}

// bool last = 7;
inline void NewStageTaskRequest::clear_last() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_ = false;
}
inline bool NewStageTaskRequest::last() const {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.last)
  return _internal_last();
}
inline void NewStageTaskRequest::set_last(bool value) {
  _internal_set_last(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.last)
}
inline bool NewStageTaskRequest::_internal_last() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_;
}
inline void NewStageTaskRequest::_internal_set_last(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_ = value;
}

// repeated string snd_addresses = 8;
inline int NewStageTaskRequest::_internal_snd_addresses_size() const {
  return _internal_snd_addresses().size();
}
inline int NewStageTaskRequest::snd_addresses_size() const {
  return _internal_snd_addresses_size();
}
inline void NewStageTaskRequest::clear_snd_addresses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_addresses_.Clear();
}
inline std::string* NewStageTaskRequest::add_snd_addresses()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_snd_addresses()->Add();
  // @@protoc_insertion_point(field_add_mutable:rainstorm.NewStageTaskRequest.snd_addresses)
  return _s;
}
inline const std::string& NewStageTaskRequest::snd_addresses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.snd_addresses)
  return _internal_snd_addresses().Get(index);
}
inline std::string* NewStageTaskRequest::mutable_snd_addresses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:rainstorm.NewStageTaskRequest.snd_addresses)
  return _internal_mutable_snd_addresses()->Mutable(index);
}
inline void NewStageTaskRequest::set_snd_addresses(int index, const std::string& value) {
  _internal_mutable_snd_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.snd_addresses)
}
inline void NewStageTaskRequest::set_snd_addresses(int index, std::string&& value) {
  _internal_mutable_snd_addresses()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.snd_addresses)
}
inline void NewStageTaskRequest::set_snd_addresses(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_snd_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rainstorm.NewStageTaskRequest.snd_addresses)
}
inline void NewStageTaskRequest::set_snd_addresses(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_snd_addresses()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rainstorm.NewStageTaskRequest.snd_addresses)
}
inline void NewStageTaskRequest::set_snd_addresses(int index, absl::string_view value) {
  _internal_mutable_snd_addresses()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:rainstorm.NewStageTaskRequest.snd_addresses)
}
inline void NewStageTaskRequest::add_snd_addresses(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_snd_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:rainstorm.NewStageTaskRequest.snd_addresses)
}
inline void NewStageTaskRequest::add_snd_addresses(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_snd_addresses()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:rainstorm.NewStageTaskRequest.snd_addresses)
}
inline void NewStageTaskRequest::add_snd_addresses(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_snd_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rainstorm.NewStageTaskRequest.snd_addresses)
}
inline void NewStageTaskRequest::add_snd_addresses(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_snd_addresses()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rainstorm.NewStageTaskRequest.snd_addresses)
}
inline void NewStageTaskRequest::add_snd_addresses(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_snd_addresses()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:rainstorm.NewStageTaskRequest.snd_addresses)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NewStageTaskRequest::snd_addresses() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rainstorm.NewStageTaskRequest.snd_addresses)
  return _internal_snd_addresses();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NewStageTaskRequest::mutable_snd_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rainstorm.NewStageTaskRequest.snd_addresses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_snd_addresses();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NewStageTaskRequest::_internal_snd_addresses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.snd_addresses_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NewStageTaskRequest::_internal_mutable_snd_addresses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.snd_addresses_;
}

// repeated int32 snd_ports = 9;
inline int NewStageTaskRequest::_internal_snd_ports_size() const {
  return _internal_snd_ports().size();
}
inline int NewStageTaskRequest::snd_ports_size() const {
  return _internal_snd_ports_size();
}
inline void NewStageTaskRequest::clear_snd_ports() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_ports_.Clear();
}
inline ::int32_t NewStageTaskRequest::snd_ports(int index) const {
  // @@protoc_insertion_point(field_get:rainstorm.NewStageTaskRequest.snd_ports)
  return _internal_snd_ports().Get(index);
}
inline void NewStageTaskRequest::set_snd_ports(int index, ::int32_t value) {
  _internal_mutable_snd_ports()->Set(index, value);
  // @@protoc_insertion_point(field_set:rainstorm.NewStageTaskRequest.snd_ports)
}
inline void NewStageTaskRequest::add_snd_ports(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_snd_ports()->Add(value);
  // @@protoc_insertion_point(field_add:rainstorm.NewStageTaskRequest.snd_ports)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NewStageTaskRequest::snd_ports() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rainstorm.NewStageTaskRequest.snd_ports)
  return _internal_snd_ports();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NewStageTaskRequest::mutable_snd_ports()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rainstorm.NewStageTaskRequest.snd_ports)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_snd_ports();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
NewStageTaskRequest::_internal_snd_ports() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.snd_ports_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NewStageTaskRequest::_internal_mutable_snd_ports() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.snd_ports_;
}

// -------------------------------------------------------------------

// UpdateTaskSndRequest

// int32 index = 1;
inline void UpdateTaskSndRequest::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0;
}
inline ::int32_t UpdateTaskSndRequest::index() const {
  // @@protoc_insertion_point(field_get:rainstorm.UpdateTaskSndRequest.index)
  return _internal_index();
}
inline void UpdateTaskSndRequest::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:rainstorm.UpdateTaskSndRequest.index)
}
inline ::int32_t UpdateTaskSndRequest::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void UpdateTaskSndRequest::_internal_set_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// string snd_address = 2;
inline void UpdateTaskSndRequest::clear_snd_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_address_.ClearToEmpty();
}
inline const std::string& UpdateTaskSndRequest::snd_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.UpdateTaskSndRequest.snd_address)
  return _internal_snd_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateTaskSndRequest::set_snd_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.UpdateTaskSndRequest.snd_address)
}
inline std::string* UpdateTaskSndRequest::mutable_snd_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_snd_address();
  // @@protoc_insertion_point(field_mutable:rainstorm.UpdateTaskSndRequest.snd_address)
  return _s;
}
inline const std::string& UpdateTaskSndRequest::_internal_snd_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.snd_address_.Get();
}
inline void UpdateTaskSndRequest::_internal_set_snd_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_address_.Set(value, GetArena());
}
inline std::string* UpdateTaskSndRequest::_internal_mutable_snd_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.snd_address_.Mutable( GetArena());
}
inline std::string* UpdateTaskSndRequest::release_snd_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.UpdateTaskSndRequest.snd_address)
  return _impl_.snd_address_.Release();
}
inline void UpdateTaskSndRequest::set_allocated_snd_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.snd_address_.IsDefault()) {
          _impl_.snd_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.UpdateTaskSndRequest.snd_address)
}

// int32 snd_port = 3;
inline void UpdateTaskSndRequest::clear_snd_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_port_ = 0;
}
inline ::int32_t UpdateTaskSndRequest::snd_port() const {
  // @@protoc_insertion_point(field_get:rainstorm.UpdateTaskSndRequest.snd_port)
  return _internal_snd_port();
}
inline void UpdateTaskSndRequest::set_snd_port(::int32_t value) {
  _internal_set_snd_port(value);
  // @@protoc_insertion_point(field_set:rainstorm.UpdateTaskSndRequest.snd_port)
}
inline ::int32_t UpdateTaskSndRequest::_internal_snd_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.snd_port_;
}
inline void UpdateTaskSndRequest::_internal_set_snd_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snd_port_ = value;
}

// -------------------------------------------------------------------

// KV

// int32 id = 1;
inline void KV::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t KV::id() const {
  // @@protoc_insertion_point(field_get:rainstorm.KV.id)
  return _internal_id();
}
inline void KV::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:rainstorm.KV.id)
}
inline ::int32_t KV::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void KV::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string key = 2;
inline void KV::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KV::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.KV.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KV::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.KV.key)
}
inline std::string* KV::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:rainstorm.KV.key)
  return _s;
}
inline const std::string& KV::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void KV::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* KV::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* KV::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.KV.key)
  return _impl_.key_.Release();
}
inline void KV::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.KV.key)
}

// string value = 3;
inline void KV::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& KV::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.KV.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KV::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.KV.value)
}
inline std::string* KV::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:rainstorm.KV.value)
  return _s;
}
inline const std::string& KV::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void KV::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* KV::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* KV::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.KV.value)
  return _impl_.value_.Release();
}
inline void KV::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rainstorm.KV.value)
}

// -------------------------------------------------------------------

// DataChunk

// .rainstorm.KV pair = 1;
inline bool DataChunk::has_pair() const {
  return request_case() == kPair;
}
inline bool DataChunk::_internal_has_pair() const {
  return request_case() == kPair;
}
inline void DataChunk::set_has_pair() {
  _impl_._oneof_case_[0] = kPair;
}
inline void DataChunk::clear_pair() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kPair) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.pair_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.pair_);
    }
    clear_has_request();
  }
}
inline ::rainstorm::KV* DataChunk::release_pair() {
  // @@protoc_insertion_point(field_release:rainstorm.DataChunk.pair)
  if (request_case() == kPair) {
    clear_has_request();
    auto* temp = _impl_.request_.pair_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rainstorm::KV& DataChunk::_internal_pair() const {
  return request_case() == kPair ? *_impl_.request_.pair_ : reinterpret_cast<::rainstorm::KV&>(::rainstorm::_KV_default_instance_);
}
inline const ::rainstorm::KV& DataChunk::pair() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.DataChunk.pair)
  return _internal_pair();
}
inline ::rainstorm::KV* DataChunk::unsafe_arena_release_pair() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rainstorm.DataChunk.pair)
  if (request_case() == kPair) {
    clear_has_request();
    auto* temp = _impl_.request_.pair_;
    _impl_.request_.pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataChunk::unsafe_arena_set_allocated_pair(::rainstorm::KV* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_pair();
    _impl_.request_.pair_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rainstorm.DataChunk.pair)
}
inline ::rainstorm::KV* DataChunk::_internal_mutable_pair() {
  if (request_case() != kPair) {
    clear_request();
    set_has_pair();
    _impl_.request_.pair_ =
        ::google::protobuf::Message::DefaultConstruct<::rainstorm::KV>(GetArena());
  }
  return _impl_.request_.pair_;
}
inline ::rainstorm::KV* DataChunk::mutable_pair() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::rainstorm::KV* _msg = _internal_mutable_pair();
  // @@protoc_insertion_point(field_mutable:rainstorm.DataChunk.pair)
  return _msg;
}

// bool finished = 2;
inline bool DataChunk::has_finished() const {
  return request_case() == kFinished;
}
inline void DataChunk::set_has_finished() {
  _impl_._oneof_case_[0] = kFinished;
}
inline void DataChunk::clear_finished() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kFinished) {
    _impl_.request_.finished_ = false;
    clear_has_request();
  }
}
inline bool DataChunk::finished() const {
  // @@protoc_insertion_point(field_get:rainstorm.DataChunk.finished)
  return _internal_finished();
}
inline void DataChunk::set_finished(bool value) {
  if (request_case() != kFinished) {
    clear_request();
    set_has_finished();
  }
  _impl_.request_.finished_ = value;
  // @@protoc_insertion_point(field_set:rainstorm.DataChunk.finished)
}
inline bool DataChunk::_internal_finished() const {
  if (request_case() == kFinished) {
    return _impl_.request_.finished_;
  }
  return false;
}

inline bool DataChunk::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void DataChunk::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline DataChunk::RequestCase DataChunk::request_case() const {
  return DataChunk::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamDataChunk

// repeated .rainstorm.DataChunk chunks = 1;
inline int StreamDataChunk::_internal_chunks_size() const {
  return _internal_chunks().size();
}
inline int StreamDataChunk::chunks_size() const {
  return _internal_chunks_size();
}
inline void StreamDataChunk::clear_chunks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunks_.Clear();
}
inline ::rainstorm::DataChunk* StreamDataChunk::mutable_chunks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:rainstorm.StreamDataChunk.chunks)
  return _internal_mutable_chunks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>* StreamDataChunk::mutable_chunks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rainstorm.StreamDataChunk.chunks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_chunks();
}
inline const ::rainstorm::DataChunk& StreamDataChunk::chunks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.StreamDataChunk.chunks)
  return _internal_chunks().Get(index);
}
inline ::rainstorm::DataChunk* StreamDataChunk::add_chunks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::rainstorm::DataChunk* _add = _internal_mutable_chunks()->Add();
  // @@protoc_insertion_point(field_add:rainstorm.StreamDataChunk.chunks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>& StreamDataChunk::chunks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rainstorm.StreamDataChunk.chunks)
  return _internal_chunks();
}
inline const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>&
StreamDataChunk::_internal_chunks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunks_;
}
inline ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunk>*
StreamDataChunk::_internal_mutable_chunks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.chunks_;
}

// -------------------------------------------------------------------

// AckDataChunk

// repeated int32 id = 1;
inline int AckDataChunk::_internal_id_size() const {
  return _internal_id().size();
}
inline int AckDataChunk::id_size() const {
  return _internal_id_size();
}
inline void AckDataChunk::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Clear();
}
inline ::int32_t AckDataChunk::id(int index) const {
  // @@protoc_insertion_point(field_get:rainstorm.AckDataChunk.id)
  return _internal_id().Get(index);
}
inline void AckDataChunk::set_id(int index, ::int32_t value) {
  _internal_mutable_id()->Set(index, value);
  // @@protoc_insertion_point(field_set:rainstorm.AckDataChunk.id)
}
inline void AckDataChunk::add_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_id()->Add(value);
  // @@protoc_insertion_point(field_add:rainstorm.AckDataChunk.id)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& AckDataChunk::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rainstorm.AckDataChunk.id)
  return _internal_id();
}
inline ::google::protobuf::RepeatedField<::int32_t>* AckDataChunk::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rainstorm.AckDataChunk.id)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_id();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
AckDataChunk::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* AckDataChunk::_internal_mutable_id() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.id_;
}

// -------------------------------------------------------------------

// DataChunkLeader

// string job_id = 1;
inline bool DataChunkLeader::has_job_id() const {
  return request_case() == kJobId;
}
inline void DataChunkLeader::set_has_job_id() {
  _impl_._oneof_case_[0] = kJobId;
}
inline void DataChunkLeader::clear_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kJobId) {
    _impl_.request_.job_id_.Destroy();
    clear_has_request();
  }
}
inline const std::string& DataChunkLeader::job_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.DataChunkLeader.job_id)
  return _internal_job_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataChunkLeader::set_job_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() != kJobId) {
    clear_request();

    set_has_job_id();
    _impl_.request_.job_id_.InitDefault();
  }
  _impl_.request_.job_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rainstorm.DataChunkLeader.job_id)
}
inline std::string* DataChunkLeader::mutable_job_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_job_id();
  // @@protoc_insertion_point(field_mutable:rainstorm.DataChunkLeader.job_id)
  return _s;
}
inline const std::string& DataChunkLeader::_internal_job_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (request_case() != kJobId) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.request_.job_id_.Get();
}
inline void DataChunkLeader::_internal_set_job_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() != kJobId) {
    clear_request();

    set_has_job_id();
    _impl_.request_.job_id_.InitDefault();
  }
  _impl_.request_.job_id_.Set(value, GetArena());
}
inline std::string* DataChunkLeader::_internal_mutable_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() != kJobId) {
    clear_request();

    set_has_job_id();
    _impl_.request_.job_id_.InitDefault();
  }
  return _impl_.request_.job_id_.Mutable( GetArena());
}
inline std::string* DataChunkLeader::release_job_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rainstorm.DataChunkLeader.job_id)
  if (request_case() != kJobId) {
    return nullptr;
  }
  clear_has_request();
  return _impl_.request_.job_id_.Release();
}
inline void DataChunkLeader::set_allocated_job_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_request()) {
    clear_request();
  }
  if (value != nullptr) {
    set_has_job_id();
    _impl_.request_.job_id_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:rainstorm.DataChunkLeader.job_id)
}

// .rainstorm.KV pair = 2;
inline bool DataChunkLeader::has_pair() const {
  return request_case() == kPair;
}
inline bool DataChunkLeader::_internal_has_pair() const {
  return request_case() == kPair;
}
inline void DataChunkLeader::set_has_pair() {
  _impl_._oneof_case_[0] = kPair;
}
inline void DataChunkLeader::clear_pair() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kPair) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.pair_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.pair_);
    }
    clear_has_request();
  }
}
inline ::rainstorm::KV* DataChunkLeader::release_pair() {
  // @@protoc_insertion_point(field_release:rainstorm.DataChunkLeader.pair)
  if (request_case() == kPair) {
    clear_has_request();
    auto* temp = _impl_.request_.pair_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rainstorm::KV& DataChunkLeader::_internal_pair() const {
  return request_case() == kPair ? *_impl_.request_.pair_ : reinterpret_cast<::rainstorm::KV&>(::rainstorm::_KV_default_instance_);
}
inline const ::rainstorm::KV& DataChunkLeader::pair() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.DataChunkLeader.pair)
  return _internal_pair();
}
inline ::rainstorm::KV* DataChunkLeader::unsafe_arena_release_pair() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rainstorm.DataChunkLeader.pair)
  if (request_case() == kPair) {
    clear_has_request();
    auto* temp = _impl_.request_.pair_;
    _impl_.request_.pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataChunkLeader::unsafe_arena_set_allocated_pair(::rainstorm::KV* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_pair();
    _impl_.request_.pair_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rainstorm.DataChunkLeader.pair)
}
inline ::rainstorm::KV* DataChunkLeader::_internal_mutable_pair() {
  if (request_case() != kPair) {
    clear_request();
    set_has_pair();
    _impl_.request_.pair_ =
        ::google::protobuf::Message::DefaultConstruct<::rainstorm::KV>(GetArena());
  }
  return _impl_.request_.pair_;
}
inline ::rainstorm::KV* DataChunkLeader::mutable_pair() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::rainstorm::KV* _msg = _internal_mutable_pair();
  // @@protoc_insertion_point(field_mutable:rainstorm.DataChunkLeader.pair)
  return _msg;
}

// bool finished = 3;
inline bool DataChunkLeader::has_finished() const {
  return request_case() == kFinished;
}
inline void DataChunkLeader::set_has_finished() {
  _impl_._oneof_case_[0] = kFinished;
}
inline void DataChunkLeader::clear_finished() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kFinished) {
    _impl_.request_.finished_ = false;
    clear_has_request();
  }
}
inline bool DataChunkLeader::finished() const {
  // @@protoc_insertion_point(field_get:rainstorm.DataChunkLeader.finished)
  return _internal_finished();
}
inline void DataChunkLeader::set_finished(bool value) {
  if (request_case() != kFinished) {
    clear_request();
    set_has_finished();
  }
  _impl_.request_.finished_ = value;
  // @@protoc_insertion_point(field_set:rainstorm.DataChunkLeader.finished)
}
inline bool DataChunkLeader::_internal_finished() const {
  if (request_case() == kFinished) {
    return _impl_.request_.finished_;
  }
  return false;
}

inline bool DataChunkLeader::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void DataChunkLeader::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline DataChunkLeader::RequestCase DataChunkLeader::request_case() const {
  return DataChunkLeader::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamDataChunkLeader

// repeated .rainstorm.DataChunkLeader chunks = 1;
inline int StreamDataChunkLeader::_internal_chunks_size() const {
  return _internal_chunks().size();
}
inline int StreamDataChunkLeader::chunks_size() const {
  return _internal_chunks_size();
}
inline void StreamDataChunkLeader::clear_chunks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunks_.Clear();
}
inline ::rainstorm::DataChunkLeader* StreamDataChunkLeader::mutable_chunks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:rainstorm.StreamDataChunkLeader.chunks)
  return _internal_mutable_chunks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunkLeader>* StreamDataChunkLeader::mutable_chunks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rainstorm.StreamDataChunkLeader.chunks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_chunks();
}
inline const ::rainstorm::DataChunkLeader& StreamDataChunkLeader::chunks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rainstorm.StreamDataChunkLeader.chunks)
  return _internal_chunks().Get(index);
}
inline ::rainstorm::DataChunkLeader* StreamDataChunkLeader::add_chunks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::rainstorm::DataChunkLeader* _add = _internal_mutable_chunks()->Add();
  // @@protoc_insertion_point(field_add:rainstorm.StreamDataChunkLeader.chunks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunkLeader>& StreamDataChunkLeader::chunks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rainstorm.StreamDataChunkLeader.chunks)
  return _internal_chunks();
}
inline const ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunkLeader>&
StreamDataChunkLeader::_internal_chunks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunks_;
}
inline ::google::protobuf::RepeatedPtrField<::rainstorm::DataChunkLeader>*
StreamDataChunkLeader::_internal_mutable_chunks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.chunks_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rainstorm


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::rainstorm::StatusCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::rainstorm::StatusCode>() {
  return ::rainstorm::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_rainstorm_2eproto_2epb_2eh
