// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hydfs.proto
#ifndef GRPC_hydfs_2eproto__INCLUDED
#define GRPC_hydfs_2eproto__INCLUDED

#include "hydfs.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace filetransfer {

class FileTransferService final {
 public:
  static constexpr char const* service_full_name() {
    return "filetransfer.FileTransferService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::filetransfer::OperationStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>> AsyncCreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>>(AsyncCreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>> PrepareAsyncCreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>>(PrepareAsyncCreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::filetransfer::AppendRequest>> AppendFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::filetransfer::AppendRequest>>(AppendFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::filetransfer::AppendRequest>> AsyncAppendFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::filetransfer::AppendRequest>>(AsyncAppendFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::filetransfer::AppendRequest>> PrepareAsyncAppendFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::filetransfer::AppendRequest>>(PrepareAsyncAppendFileRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::filetransfer::GetResponse>> GetFile(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::filetransfer::GetResponse>>(GetFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::filetransfer::GetResponse>> AsyncGetFile(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::filetransfer::GetResponse>>(AsyncGetFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::filetransfer::GetResponse>> PrepareAsyncGetFile(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::filetransfer::GetResponse>>(PrepareAsyncGetFileRaw(context, request, cq));
    }
    virtual ::grpc::Status MergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::filetransfer::OperationStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>> AsyncMergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>>(AsyncMergeFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>> PrepareAsyncMergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>>(PrepareAsyncMergeFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::filetransfer::OverwriteRequest>> OverwriteFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::filetransfer::OverwriteRequest>>(OverwriteFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::filetransfer::OverwriteRequest>> AsyncOverwriteFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::filetransfer::OverwriteRequest>>(AsyncOverwriteFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::filetransfer::OverwriteRequest>> PrepareAsyncOverwriteFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::filetransfer::OverwriteRequest>>(PrepareAsyncOverwriteFileRaw(context, response, cq));
    }
    virtual ::grpc::Status UpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::filetransfer::OperationStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>> AsyncUpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>>(AsyncUpdateFilesReplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>> PrepareAsyncUpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>>(PrepareAsyncUpdateFilesReplicationRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::filetransfer::OperationStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>> AsyncUpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>>(AsyncUpdateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>> PrepareAsyncUpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>>(PrepareAsyncUpdateOrderRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest* request, ::filetransfer::OperationStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest* request, ::filetransfer::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AppendFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::ClientWriteReactor< ::filetransfer::AppendRequest>* reactor) = 0;
      virtual void GetFile(::grpc::ClientContext* context, const ::filetransfer::FileRequest* request, ::grpc::ClientReadReactor< ::filetransfer::GetResponse>* reactor) = 0;
      virtual void MergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest* request, ::filetransfer::OperationStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest* request, ::filetransfer::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OverwriteFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::ClientWriteReactor< ::filetransfer::OverwriteRequest>* reactor) = 0;
      virtual void UpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest* request, ::filetransfer::OperationStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest* request, ::filetransfer::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest* request, ::filetransfer::OperationStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest* request, ::filetransfer::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>* AsyncCreateFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>* PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::filetransfer::AppendRequest>* AppendFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::filetransfer::AppendRequest>* AsyncAppendFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::filetransfer::AppendRequest>* PrepareAsyncAppendFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::filetransfer::GetResponse>* GetFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::filetransfer::GetResponse>* AsyncGetFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::filetransfer::GetResponse>* PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>* AsyncMergeFileRaw(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>* PrepareAsyncMergeFileRaw(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::filetransfer::OverwriteRequest>* OverwriteFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::filetransfer::OverwriteRequest>* AsyncOverwriteFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::filetransfer::OverwriteRequest>* PrepareAsyncOverwriteFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>* AsyncUpdateFilesReplicationRaw(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>* PrepareAsyncUpdateFilesReplicationRaw(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>* AsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filetransfer::OperationStatus>* PrepareAsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::filetransfer::OperationStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>> AsyncCreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>>(AsyncCreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>> PrepareAsyncCreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>>(PrepareAsyncCreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::filetransfer::AppendRequest>> AppendFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::filetransfer::AppendRequest>>(AppendFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::filetransfer::AppendRequest>> AsyncAppendFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::filetransfer::AppendRequest>>(AsyncAppendFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::filetransfer::AppendRequest>> PrepareAsyncAppendFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::filetransfer::AppendRequest>>(PrepareAsyncAppendFileRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::filetransfer::GetResponse>> GetFile(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::filetransfer::GetResponse>>(GetFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::filetransfer::GetResponse>> AsyncGetFile(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::filetransfer::GetResponse>>(AsyncGetFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::filetransfer::GetResponse>> PrepareAsyncGetFile(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::filetransfer::GetResponse>>(PrepareAsyncGetFileRaw(context, request, cq));
    }
    ::grpc::Status MergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::filetransfer::OperationStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>> AsyncMergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>>(AsyncMergeFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>> PrepareAsyncMergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>>(PrepareAsyncMergeFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::filetransfer::OverwriteRequest>> OverwriteFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::filetransfer::OverwriteRequest>>(OverwriteFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::filetransfer::OverwriteRequest>> AsyncOverwriteFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::filetransfer::OverwriteRequest>>(AsyncOverwriteFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::filetransfer::OverwriteRequest>> PrepareAsyncOverwriteFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::filetransfer::OverwriteRequest>>(PrepareAsyncOverwriteFileRaw(context, response, cq));
    }
    ::grpc::Status UpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::filetransfer::OperationStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>> AsyncUpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>>(AsyncUpdateFilesReplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>> PrepareAsyncUpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>>(PrepareAsyncUpdateFilesReplicationRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::filetransfer::OperationStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>> AsyncUpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>>(AsyncUpdateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>> PrepareAsyncUpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>>(PrepareAsyncUpdateOrderRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest* request, ::filetransfer::OperationStatus* response, std::function<void(::grpc::Status)>) override;
      void CreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest* request, ::filetransfer::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AppendFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::ClientWriteReactor< ::filetransfer::AppendRequest>* reactor) override;
      void GetFile(::grpc::ClientContext* context, const ::filetransfer::FileRequest* request, ::grpc::ClientReadReactor< ::filetransfer::GetResponse>* reactor) override;
      void MergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest* request, ::filetransfer::OperationStatus* response, std::function<void(::grpc::Status)>) override;
      void MergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest* request, ::filetransfer::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OverwriteFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::ClientWriteReactor< ::filetransfer::OverwriteRequest>* reactor) override;
      void UpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest* request, ::filetransfer::OperationStatus* response, std::function<void(::grpc::Status)>) override;
      void UpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest* request, ::filetransfer::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest* request, ::filetransfer::OperationStatus* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest* request, ::filetransfer::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* AsyncCreateFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::filetransfer::AppendRequest>* AppendFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response) override;
    ::grpc::ClientAsyncWriter< ::filetransfer::AppendRequest>* AsyncAppendFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::filetransfer::AppendRequest>* PrepareAsyncAppendFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::filetransfer::GetResponse>* GetFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request) override;
    ::grpc::ClientAsyncReader< ::filetransfer::GetResponse>* AsyncGetFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::filetransfer::GetResponse>* PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* AsyncMergeFileRaw(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* PrepareAsyncMergeFileRaw(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::filetransfer::OverwriteRequest>* OverwriteFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response) override;
    ::grpc::ClientAsyncWriter< ::filetransfer::OverwriteRequest>* AsyncOverwriteFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::filetransfer::OverwriteRequest>* PrepareAsyncOverwriteFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* AsyncUpdateFilesReplicationRaw(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* PrepareAsyncUpdateFilesReplicationRaw(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* AsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* PrepareAsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateFile_;
    const ::grpc::internal::RpcMethod rpcmethod_AppendFile_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFile_;
    const ::grpc::internal::RpcMethod rpcmethod_MergeFile_;
    const ::grpc::internal::RpcMethod rpcmethod_OverwriteFile_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateFilesReplication_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrder_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateFile(::grpc::ServerContext* context, const ::filetransfer::FileOrderRequest* request, ::filetransfer::OperationStatus* response);
    virtual ::grpc::Status AppendFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::filetransfer::AppendRequest>* reader, ::filetransfer::OperationStatus* response);
    virtual ::grpc::Status GetFile(::grpc::ServerContext* context, const ::filetransfer::FileRequest* request, ::grpc::ServerWriter< ::filetransfer::GetResponse>* writer);
    virtual ::grpc::Status MergeFile(::grpc::ServerContext* context, const ::filetransfer::MergeRequest* request, ::filetransfer::OperationStatus* response);
    virtual ::grpc::Status OverwriteFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::filetransfer::OverwriteRequest>* reader, ::filetransfer::OperationStatus* response);
    virtual ::grpc::Status UpdateFilesReplication(::grpc::ServerContext* context, const ::filetransfer::ReplicationRequest* request, ::filetransfer::OperationStatus* response);
    virtual ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::filetransfer::UpdateOrderRequest* request, ::filetransfer::OperationStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::filetransfer::FileOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFile(::grpc::ServerContext* context, ::filetransfer::FileOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::filetransfer::OperationStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AppendFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AppendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filetransfer::AppendRequest>* /*reader*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::filetransfer::OperationStatus, ::filetransfer::AppendRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::filetransfer::FileRequest* /*request*/, ::grpc::ServerWriter< ::filetransfer::GetResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFile(::grpc::ServerContext* context, ::filetransfer::FileRequest* request, ::grpc::ServerAsyncWriter< ::filetransfer::GetResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MergeFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MergeFile() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_MergeFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeFile(::grpc::ServerContext* /*context*/, const ::filetransfer::MergeRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMergeFile(::grpc::ServerContext* context, ::filetransfer::MergeRequest* request, ::grpc::ServerAsyncResponseWriter< ::filetransfer::OperationStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OverwriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OverwriteFile() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_OverwriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OverwriteFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filetransfer::OverwriteRequest>* /*reader*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOverwriteFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::filetransfer::OperationStatus, ::filetransfer::OverwriteRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateFilesReplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateFilesReplication() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateFilesReplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFilesReplication(::grpc::ServerContext* /*context*/, const ::filetransfer::ReplicationRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFilesReplication(::grpc::ServerContext* context, ::filetransfer::ReplicationRequest* request, ::grpc::ServerAsyncResponseWriter< ::filetransfer::OperationStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* /*context*/, const ::filetransfer::UpdateOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrder(::grpc::ServerContext* context, ::filetransfer::UpdateOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::filetransfer::OperationStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateFile<WithAsyncMethod_AppendFile<WithAsyncMethod_GetFile<WithAsyncMethod_MergeFile<WithAsyncMethod_OverwriteFile<WithAsyncMethod_UpdateFilesReplication<WithAsyncMethod_UpdateOrder<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateFile() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::filetransfer::FileOrderRequest, ::filetransfer::OperationStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filetransfer::FileOrderRequest* request, ::filetransfer::OperationStatus* response) { return this->CreateFile(context, request, response); }));}
    void SetMessageAllocatorFor_CreateFile(
        ::grpc::MessageAllocator< ::filetransfer::FileOrderRequest, ::filetransfer::OperationStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filetransfer::FileOrderRequest, ::filetransfer::OperationStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::filetransfer::FileOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFile(
      ::grpc::CallbackServerContext* /*context*/, const ::filetransfer::FileOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AppendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AppendFile() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::filetransfer::AppendRequest, ::filetransfer::OperationStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, ::filetransfer::OperationStatus* response) { return this->AppendFile(context, response); }));
    }
    ~WithCallbackMethod_AppendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filetransfer::AppendRequest>* /*reader*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::filetransfer::AppendRequest>* AppendFile(
      ::grpc::CallbackServerContext* /*context*/, ::filetransfer::OperationStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFile() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::filetransfer::FileRequest, ::filetransfer::GetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filetransfer::FileRequest* request) { return this->GetFile(context, request); }));
    }
    ~WithCallbackMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::filetransfer::FileRequest* /*request*/, ::grpc::ServerWriter< ::filetransfer::GetResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::filetransfer::GetResponse>* GetFile(
      ::grpc::CallbackServerContext* /*context*/, const ::filetransfer::FileRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MergeFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MergeFile() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::filetransfer::MergeRequest, ::filetransfer::OperationStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filetransfer::MergeRequest* request, ::filetransfer::OperationStatus* response) { return this->MergeFile(context, request, response); }));}
    void SetMessageAllocatorFor_MergeFile(
        ::grpc::MessageAllocator< ::filetransfer::MergeRequest, ::filetransfer::OperationStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filetransfer::MergeRequest, ::filetransfer::OperationStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MergeFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeFile(::grpc::ServerContext* /*context*/, const ::filetransfer::MergeRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MergeFile(
      ::grpc::CallbackServerContext* /*context*/, const ::filetransfer::MergeRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OverwriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OverwriteFile() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::filetransfer::OverwriteRequest, ::filetransfer::OperationStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, ::filetransfer::OperationStatus* response) { return this->OverwriteFile(context, response); }));
    }
    ~WithCallbackMethod_OverwriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OverwriteFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filetransfer::OverwriteRequest>* /*reader*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::filetransfer::OverwriteRequest>* OverwriteFile(
      ::grpc::CallbackServerContext* /*context*/, ::filetransfer::OperationStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateFilesReplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateFilesReplication() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::filetransfer::ReplicationRequest, ::filetransfer::OperationStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filetransfer::ReplicationRequest* request, ::filetransfer::OperationStatus* response) { return this->UpdateFilesReplication(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateFilesReplication(
        ::grpc::MessageAllocator< ::filetransfer::ReplicationRequest, ::filetransfer::OperationStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filetransfer::ReplicationRequest, ::filetransfer::OperationStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateFilesReplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFilesReplication(::grpc::ServerContext* /*context*/, const ::filetransfer::ReplicationRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateFilesReplication(
      ::grpc::CallbackServerContext* /*context*/, const ::filetransfer::ReplicationRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::filetransfer::UpdateOrderRequest, ::filetransfer::OperationStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filetransfer::UpdateOrderRequest* request, ::filetransfer::OperationStatus* response) { return this->UpdateOrder(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateOrder(
        ::grpc::MessageAllocator< ::filetransfer::UpdateOrderRequest, ::filetransfer::OperationStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filetransfer::UpdateOrderRequest, ::filetransfer::OperationStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* /*context*/, const ::filetransfer::UpdateOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::filetransfer::UpdateOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateFile<WithCallbackMethod_AppendFile<WithCallbackMethod_GetFile<WithCallbackMethod_MergeFile<WithCallbackMethod_OverwriteFile<WithCallbackMethod_UpdateFilesReplication<WithCallbackMethod_UpdateOrder<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::filetransfer::FileOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AppendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AppendFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AppendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filetransfer::AppendRequest>* /*reader*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::filetransfer::FileRequest* /*request*/, ::grpc::ServerWriter< ::filetransfer::GetResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MergeFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MergeFile() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_MergeFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeFile(::grpc::ServerContext* /*context*/, const ::filetransfer::MergeRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OverwriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OverwriteFile() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_OverwriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OverwriteFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filetransfer::OverwriteRequest>* /*reader*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateFilesReplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateFilesReplication() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateFilesReplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFilesReplication(::grpc::ServerContext* /*context*/, const ::filetransfer::ReplicationRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* /*context*/, const ::filetransfer::UpdateOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::filetransfer::FileOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AppendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AppendFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AppendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filetransfer::AppendRequest>* /*reader*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::filetransfer::FileRequest* /*request*/, ::grpc::ServerWriter< ::filetransfer::GetResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MergeFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MergeFile() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_MergeFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeFile(::grpc::ServerContext* /*context*/, const ::filetransfer::MergeRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMergeFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OverwriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OverwriteFile() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_OverwriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OverwriteFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filetransfer::OverwriteRequest>* /*reader*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOverwriteFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateFilesReplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateFilesReplication() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateFilesReplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFilesReplication(::grpc::ServerContext* /*context*/, const ::filetransfer::ReplicationRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFilesReplication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* /*context*/, const ::filetransfer::UpdateOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateFile() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::filetransfer::FileOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AppendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AppendFile() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->AppendFile(context, response); }));
    }
    ~WithRawCallbackMethod_AppendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filetransfer::AppendRequest>* /*reader*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* AppendFile(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFile() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetFile(context, request); }));
    }
    ~WithRawCallbackMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::filetransfer::FileRequest* /*request*/, ::grpc::ServerWriter< ::filetransfer::GetResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MergeFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MergeFile() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MergeFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_MergeFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeFile(::grpc::ServerContext* /*context*/, const ::filetransfer::MergeRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MergeFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OverwriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OverwriteFile() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->OverwriteFile(context, response); }));
    }
    ~WithRawCallbackMethod_OverwriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OverwriteFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filetransfer::OverwriteRequest>* /*reader*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* OverwriteFile(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateFilesReplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateFilesReplication() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateFilesReplication(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateFilesReplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFilesReplication(::grpc::ServerContext* /*context*/, const ::filetransfer::ReplicationRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateFilesReplication(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* /*context*/, const ::filetransfer::UpdateOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filetransfer::FileOrderRequest, ::filetransfer::OperationStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filetransfer::FileOrderRequest, ::filetransfer::OperationStatus>* streamer) {
                       return this->StreamedCreateFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::filetransfer::FileOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filetransfer::FileOrderRequest,::filetransfer::OperationStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MergeFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MergeFile() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filetransfer::MergeRequest, ::filetransfer::OperationStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filetransfer::MergeRequest, ::filetransfer::OperationStatus>* streamer) {
                       return this->StreamedMergeFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MergeFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MergeFile(::grpc::ServerContext* /*context*/, const ::filetransfer::MergeRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMergeFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filetransfer::MergeRequest,::filetransfer::OperationStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateFilesReplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateFilesReplication() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filetransfer::ReplicationRequest, ::filetransfer::OperationStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filetransfer::ReplicationRequest, ::filetransfer::OperationStatus>* streamer) {
                       return this->StreamedUpdateFilesReplication(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateFilesReplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateFilesReplication(::grpc::ServerContext* /*context*/, const ::filetransfer::ReplicationRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateFilesReplication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filetransfer::ReplicationRequest,::filetransfer::OperationStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filetransfer::UpdateOrderRequest, ::filetransfer::OperationStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filetransfer::UpdateOrderRequest, ::filetransfer::OperationStatus>* streamer) {
                       return this->StreamedUpdateOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* /*context*/, const ::filetransfer::UpdateOrderRequest* /*request*/, ::filetransfer::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filetransfer::UpdateOrderRequest,::filetransfer::OperationStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateFile<WithStreamedUnaryMethod_MergeFile<WithStreamedUnaryMethod_UpdateFilesReplication<WithStreamedUnaryMethod_UpdateOrder<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::filetransfer::FileRequest, ::filetransfer::GetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::filetransfer::FileRequest, ::filetransfer::GetResponse>* streamer) {
                       return this->StreamedGetFile(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::filetransfer::FileRequest* /*request*/, ::grpc::ServerWriter< ::filetransfer::GetResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetFile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::filetransfer::FileRequest,::filetransfer::GetResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetFile<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateFile<WithSplitStreamingMethod_GetFile<WithStreamedUnaryMethod_MergeFile<WithStreamedUnaryMethod_UpdateFilesReplication<WithStreamedUnaryMethod_UpdateOrder<Service > > > > > StreamedService;
};

}  // namespace filetransfer


#endif  // GRPC_hydfs_2eproto__INCLUDED
