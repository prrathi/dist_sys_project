// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: hydfs.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_hydfs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_hydfs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_hydfs_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_hydfs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_hydfs_2eproto;
namespace filetransfer {
class AppendRequest;
struct AppendRequestDefaultTypeInternal;
extern AppendRequestDefaultTypeInternal _AppendRequest_default_instance_;
class Chunk;
struct ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class FileOrderRequest;
struct FileOrderRequestDefaultTypeInternal;
extern FileOrderRequestDefaultTypeInternal _FileOrderRequest_default_instance_;
class FileRequest;
struct FileRequestDefaultTypeInternal;
extern FileRequestDefaultTypeInternal _FileRequest_default_instance_;
class GetResponse;
struct GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class MergeRequest;
struct MergeRequestDefaultTypeInternal;
extern MergeRequestDefaultTypeInternal _MergeRequest_default_instance_;
class OperationStatus;
struct OperationStatusDefaultTypeInternal;
extern OperationStatusDefaultTypeInternal _OperationStatus_default_instance_;
class OverwriteRequest;
struct OverwriteRequestDefaultTypeInternal;
extern OverwriteRequestDefaultTypeInternal _OverwriteRequest_default_instance_;
class ReplicationRequest;
struct ReplicationRequestDefaultTypeInternal;
extern ReplicationRequestDefaultTypeInternal _ReplicationRequest_default_instance_;
class UpdateOrderRequest;
struct UpdateOrderRequestDefaultTypeInternal;
extern UpdateOrderRequestDefaultTypeInternal _UpdateOrderRequest_default_instance_;
}  // namespace filetransfer
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace filetransfer {
enum StatusCode : int {
  SUCCESS = 0,
  INVALID = 1,
  NOT_FOUND = 2,
  ALREADY_EXISTS = 3,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StatusCode_IsValid(int value);
extern const uint32_t StatusCode_internal_data_[];
constexpr StatusCode StatusCode_MIN = static_cast<StatusCode>(0);
constexpr StatusCode StatusCode_MAX = static_cast<StatusCode>(3);
constexpr int StatusCode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
StatusCode_descriptor();
template <typename T>
const std::string& StatusCode_Name(T value) {
  static_assert(std::is_same<T, StatusCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StatusCode_Name().");
  return StatusCode_Name(static_cast<StatusCode>(value));
}
template <>
inline const std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StatusCode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool StatusCode_Parse(absl::string_view name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
      StatusCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UpdateOrderRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:filetransfer.UpdateOrderRequest) */ {
 public:
  inline UpdateOrderRequest() : UpdateOrderRequest(nullptr) {}
  ~UpdateOrderRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateOrderRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateOrderRequest(const UpdateOrderRequest& from) : UpdateOrderRequest(nullptr, from) {}
  inline UpdateOrderRequest(UpdateOrderRequest&& from) noexcept
      : UpdateOrderRequest(nullptr, std::move(from)) {}
  inline UpdateOrderRequest& operator=(const UpdateOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrderRequest& operator=(UpdateOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrderRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOrderRequest*>(
        &_UpdateOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(UpdateOrderRequest& a, UpdateOrderRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateOrderRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrderRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrderRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UpdateOrderRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateOrderRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateOrderRequest& from) { UpdateOrderRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateOrderRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "filetransfer.UpdateOrderRequest"; }

 protected:
  explicit UpdateOrderRequest(::google::protobuf::Arena* arena);
  UpdateOrderRequest(::google::protobuf::Arena* arena, const UpdateOrderRequest& from);
  UpdateOrderRequest(::google::protobuf::Arena* arena, UpdateOrderRequest&& from) noexcept
      : UpdateOrderRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOldOrderFieldNumber = 1,
    kNewOrderFieldNumber = 2,
  };
  // int32 old_order = 1;
  void clear_old_order() ;
  ::int32_t old_order() const;
  void set_old_order(::int32_t value);

  private:
  ::int32_t _internal_old_order() const;
  void _internal_set_old_order(::int32_t value);

  public:
  // int32 new_order = 2;
  void clear_new_order() ;
  ::int32_t new_order() const;
  void set_new_order(::int32_t value);

  private:
  ::int32_t _internal_new_order() const;
  void _internal_set_new_order(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:filetransfer.UpdateOrderRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_UpdateOrderRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateOrderRequest& from_msg);
    ::int32_t old_order_;
    ::int32_t new_order_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hydfs_2eproto;
};
// -------------------------------------------------------------------

class ReplicationRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:filetransfer.ReplicationRequest) */ {
 public:
  inline ReplicationRequest() : ReplicationRequest(nullptr) {}
  ~ReplicationRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReplicationRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReplicationRequest(const ReplicationRequest& from) : ReplicationRequest(nullptr, from) {}
  inline ReplicationRequest(ReplicationRequest&& from) noexcept
      : ReplicationRequest(nullptr, std::move(from)) {}
  inline ReplicationRequest& operator=(const ReplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicationRequest& operator=(ReplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicationRequest* internal_default_instance() {
    return reinterpret_cast<const ReplicationRequest*>(
        &_ReplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ReplicationRequest& a, ReplicationRequest& b) { a.Swap(&b); }
  inline void Swap(ReplicationRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ReplicationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReplicationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReplicationRequest& from) { ReplicationRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReplicationRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "filetransfer.ReplicationRequest"; }

 protected:
  explicit ReplicationRequest(::google::protobuf::Arena* arena);
  ReplicationRequest(::google::protobuf::Arena* arena, const ReplicationRequest& from);
  ReplicationRequest(::google::protobuf::Arena* arena, ReplicationRequest&& from) noexcept
      : ReplicationRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewSuccessorsFieldNumber = 3,
    kExistingSuccessorFieldNumber = 2,
    kFailureCaseFieldNumber = 1,
  };
  // repeated string new_successors = 3;
  int new_successors_size() const;
  private:
  int _internal_new_successors_size() const;

  public:
  void clear_new_successors() ;
  const std::string& new_successors(int index) const;
  std::string* mutable_new_successors(int index);
  void set_new_successors(int index, const std::string& value);
  void set_new_successors(int index, std::string&& value);
  void set_new_successors(int index, const char* value);
  void set_new_successors(int index, const char* value, std::size_t size);
  void set_new_successors(int index, absl::string_view value);
  std::string* add_new_successors();
  void add_new_successors(const std::string& value);
  void add_new_successors(std::string&& value);
  void add_new_successors(const char* value);
  void add_new_successors(const char* value, std::size_t size);
  void add_new_successors(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& new_successors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_new_successors();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_new_successors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_new_successors();

  public:
  // optional string existing_successor = 2;
  bool has_existing_successor() const;
  void clear_existing_successor() ;
  const std::string& existing_successor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_existing_successor(Arg_&& arg, Args_... args);
  std::string* mutable_existing_successor();
  PROTOBUF_NODISCARD std::string* release_existing_successor();
  void set_allocated_existing_successor(std::string* value);

  private:
  const std::string& _internal_existing_successor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_existing_successor(
      const std::string& value);
  std::string* _internal_mutable_existing_successor();

  public:
  // int32 failure_case = 1;
  void clear_failure_case() ;
  ::int32_t failure_case() const;
  void set_failure_case(::int32_t value);

  private:
  ::int32_t _internal_failure_case() const;
  void _internal_set_failure_case(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:filetransfer.ReplicationRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      72, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ReplicationRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReplicationRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> new_successors_;
    ::google::protobuf::internal::ArenaStringPtr existing_successor_;
    ::int32_t failure_case_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hydfs_2eproto;
};
// -------------------------------------------------------------------

class OperationStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:filetransfer.OperationStatus) */ {
 public:
  inline OperationStatus() : OperationStatus(nullptr) {}
  ~OperationStatus() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OperationStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline OperationStatus(const OperationStatus& from) : OperationStatus(nullptr, from) {}
  inline OperationStatus(OperationStatus&& from) noexcept
      : OperationStatus(nullptr, std::move(from)) {}
  inline OperationStatus& operator=(const OperationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStatus& operator=(OperationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStatus* internal_default_instance() {
    return reinterpret_cast<const OperationStatus*>(
        &_OperationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(OperationStatus& a, OperationStatus& b) { a.Swap(&b); }
  inline void Swap(OperationStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OperationStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OperationStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OperationStatus& from) { OperationStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OperationStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "filetransfer.OperationStatus"; }

 protected:
  explicit OperationStatus(::google::protobuf::Arena* arena);
  OperationStatus(::google::protobuf::Arena* arena, const OperationStatus& from);
  OperationStatus(::google::protobuf::Arena* arena, OperationStatus&& from) noexcept
      : OperationStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .filetransfer.StatusCode status = 1;
  void clear_status() ;
  ::filetransfer::StatusCode status() const;
  void set_status(::filetransfer::StatusCode value);

  private:
  ::filetransfer::StatusCode _internal_status() const;
  void _internal_set_status(::filetransfer::StatusCode value);

  public:
  // @@protoc_insertion_point(class_scope:filetransfer.OperationStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OperationStatus_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OperationStatus& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hydfs_2eproto;
};
// -------------------------------------------------------------------

class MergeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:filetransfer.MergeRequest) */ {
 public:
  inline MergeRequest() : MergeRequest(nullptr) {}
  ~MergeRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MergeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MergeRequest(const MergeRequest& from) : MergeRequest(nullptr, from) {}
  inline MergeRequest(MergeRequest&& from) noexcept
      : MergeRequest(nullptr, std::move(from)) {}
  inline MergeRequest& operator=(const MergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeRequest& operator=(MergeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeRequest* internal_default_instance() {
    return reinterpret_cast<const MergeRequest*>(
        &_MergeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(MergeRequest& a, MergeRequest& b) { a.Swap(&b); }
  inline void Swap(MergeRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MergeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MergeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MergeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MergeRequest& from) { MergeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MergeRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "filetransfer.MergeRequest"; }

 protected:
  explicit MergeRequest(::google::protobuf::Arena* arena);
  MergeRequest(::google::protobuf::Arena* arena, const MergeRequest& from);
  MergeRequest(::google::protobuf::Arena* arena, MergeRequest&& from) noexcept
      : MergeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessorsFieldNumber = 2,
    kFilenameFieldNumber = 1,
  };
  // repeated string successors = 2;
  int successors_size() const;
  private:
  int _internal_successors_size() const;

  public:
  void clear_successors() ;
  const std::string& successors(int index) const;
  std::string* mutable_successors(int index);
  void set_successors(int index, const std::string& value);
  void set_successors(int index, std::string&& value);
  void set_successors(int index, const char* value);
  void set_successors(int index, const char* value, std::size_t size);
  void set_successors(int index, absl::string_view value);
  std::string* add_successors();
  void add_successors(const std::string& value);
  void add_successors(std::string&& value);
  void add_successors(const char* value);
  void add_successors(const char* value, std::size_t size);
  void add_successors(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& successors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_successors();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_successors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_successors();

  public:
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // @@protoc_insertion_point(class_scope:filetransfer.MergeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MergeRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MergeRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> successors_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hydfs_2eproto;
};
// -------------------------------------------------------------------

class FileRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:filetransfer.FileRequest) */ {
 public:
  inline FileRequest() : FileRequest(nullptr) {}
  ~FileRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileRequest(const FileRequest& from) : FileRequest(nullptr, from) {}
  inline FileRequest(FileRequest&& from) noexcept
      : FileRequest(nullptr, std::move(from)) {}
  inline FileRequest& operator=(const FileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileRequest& operator=(FileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileRequest* internal_default_instance() {
    return reinterpret_cast<const FileRequest*>(
        &_FileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FileRequest& a, FileRequest& b) { a.Swap(&b); }
  inline void Swap(FileRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<FileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileRequest& from) { FileRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "filetransfer.FileRequest"; }

 protected:
  explicit FileRequest(::google::protobuf::Arena* arena);
  FileRequest(::google::protobuf::Arena* arena, const FileRequest& from);
  FileRequest(::google::protobuf::Arena* arena, FileRequest&& from) noexcept
      : FileRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // @@protoc_insertion_point(class_scope:filetransfer.FileRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      41, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_FileRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hydfs_2eproto;
};
// -------------------------------------------------------------------

class FileOrderRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:filetransfer.FileOrderRequest) */ {
 public:
  inline FileOrderRequest() : FileOrderRequest(nullptr) {}
  ~FileOrderRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileOrderRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileOrderRequest(const FileOrderRequest& from) : FileOrderRequest(nullptr, from) {}
  inline FileOrderRequest(FileOrderRequest&& from) noexcept
      : FileOrderRequest(nullptr, std::move(from)) {}
  inline FileOrderRequest& operator=(const FileOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileOrderRequest& operator=(FileOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileOrderRequest* internal_default_instance() {
    return reinterpret_cast<const FileOrderRequest*>(
        &_FileOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(FileOrderRequest& a, FileOrderRequest& b) { a.Swap(&b); }
  inline void Swap(FileOrderRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileOrderRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileOrderRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<FileOrderRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileOrderRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileOrderRequest& from) { FileOrderRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileOrderRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "filetransfer.FileOrderRequest"; }

 protected:
  explicit FileOrderRequest(::google::protobuf::Arena* arena);
  FileOrderRequest(::google::protobuf::Arena* arena, const FileOrderRequest& from);
  FileOrderRequest(::google::protobuf::Arena* arena, FileOrderRequest&& from) noexcept
      : FileOrderRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
    kOrderFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // int32 order = 2;
  void clear_order() ;
  ::int32_t order() const;
  void set_order(::int32_t value);

  private:
  ::int32_t _internal_order() const;
  void _internal_set_order(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:filetransfer.FileOrderRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      46, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_FileOrderRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileOrderRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::int32_t order_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hydfs_2eproto;
};
// -------------------------------------------------------------------

class Chunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:filetransfer.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  ~Chunk() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Chunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline Chunk(const Chunk& from) : Chunk(nullptr, from) {}
  inline Chunk(Chunk&& from) noexcept
      : Chunk(nullptr, std::move(from)) {}
  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
        &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Chunk& a, Chunk& b) { a.Swap(&b); }
  inline void Swap(Chunk* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chunk* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Chunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Chunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Chunk& from) { Chunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Chunk* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "filetransfer.Chunk"; }

 protected:
  explicit Chunk(::google::protobuf::Arena* arena);
  Chunk(::google::protobuf::Arena* arena, const Chunk& from);
  Chunk(::google::protobuf::Arena* arena, Chunk&& from) noexcept
      : Chunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:filetransfer.Chunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Chunk_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Chunk& from_msg);
    ::google::protobuf::internal::ArenaStringPtr content_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hydfs_2eproto;
};
// -------------------------------------------------------------------

class OverwriteRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:filetransfer.OverwriteRequest) */ {
 public:
  inline OverwriteRequest() : OverwriteRequest(nullptr) {}
  ~OverwriteRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OverwriteRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline OverwriteRequest(const OverwriteRequest& from) : OverwriteRequest(nullptr, from) {}
  inline OverwriteRequest(OverwriteRequest&& from) noexcept
      : OverwriteRequest(nullptr, std::move(from)) {}
  inline OverwriteRequest& operator=(const OverwriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverwriteRequest& operator=(OverwriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OverwriteRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kFileRequest = 1,
    kChunk = 2,
    REQUEST_NOT_SET = 0,
  };
  static inline const OverwriteRequest* internal_default_instance() {
    return reinterpret_cast<const OverwriteRequest*>(
        &_OverwriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(OverwriteRequest& a, OverwriteRequest& b) { a.Swap(&b); }
  inline void Swap(OverwriteRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OverwriteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OverwriteRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OverwriteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OverwriteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OverwriteRequest& from) { OverwriteRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OverwriteRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "filetransfer.OverwriteRequest"; }

 protected:
  explicit OverwriteRequest(::google::protobuf::Arena* arena);
  OverwriteRequest(::google::protobuf::Arena* arena, const OverwriteRequest& from);
  OverwriteRequest(::google::protobuf::Arena* arena, OverwriteRequest&& from) noexcept
      : OverwriteRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFileRequestFieldNumber = 1,
    kChunkFieldNumber = 2,
  };
  // .filetransfer.FileOrderRequest file_request = 1;
  bool has_file_request() const;
  private:
  bool _internal_has_file_request() const;

  public:
  void clear_file_request() ;
  const ::filetransfer::FileOrderRequest& file_request() const;
  PROTOBUF_NODISCARD ::filetransfer::FileOrderRequest* release_file_request();
  ::filetransfer::FileOrderRequest* mutable_file_request();
  void set_allocated_file_request(::filetransfer::FileOrderRequest* value);
  void unsafe_arena_set_allocated_file_request(::filetransfer::FileOrderRequest* value);
  ::filetransfer::FileOrderRequest* unsafe_arena_release_file_request();

  private:
  const ::filetransfer::FileOrderRequest& _internal_file_request() const;
  ::filetransfer::FileOrderRequest* _internal_mutable_file_request();

  public:
  // .filetransfer.Chunk chunk = 2;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;

  public:
  void clear_chunk() ;
  const ::filetransfer::Chunk& chunk() const;
  PROTOBUF_NODISCARD ::filetransfer::Chunk* release_chunk();
  ::filetransfer::Chunk* mutable_chunk();
  void set_allocated_chunk(::filetransfer::Chunk* value);
  void unsafe_arena_set_allocated_chunk(::filetransfer::Chunk* value);
  ::filetransfer::Chunk* unsafe_arena_release_chunk();

  private:
  const ::filetransfer::Chunk& _internal_chunk() const;
  ::filetransfer::Chunk* _internal_mutable_chunk();

  public:
  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:filetransfer.OverwriteRequest)
 private:
  class _Internal;
  void set_has_file_request();
  void set_has_chunk();
  inline bool has_request() const;
  inline void clear_has_request();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OverwriteRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OverwriteRequest& from_msg);
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::filetransfer::FileOrderRequest* file_request_;
      ::filetransfer::Chunk* chunk_;
    } request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hydfs_2eproto;
};
// -------------------------------------------------------------------

class GetResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:filetransfer.GetResponse) */ {
 public:
  inline GetResponse() : GetResponse(nullptr) {}
  ~GetResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetResponse(const GetResponse& from) : GetResponse(nullptr, from) {}
  inline GetResponse(GetResponse&& from) noexcept
      : GetResponse(nullptr, std::move(from)) {}
  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kChunk = 1,
    kStatus = 2,
    RESPONSE_NOT_SET = 0,
  };
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
        &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GetResponse& a, GetResponse& b) { a.Swap(&b); }
  inline void Swap(GetResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetResponse& from) { GetResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "filetransfer.GetResponse"; }

 protected:
  explicit GetResponse(::google::protobuf::Arena* arena);
  GetResponse(::google::protobuf::Arena* arena, const GetResponse& from);
  GetResponse(::google::protobuf::Arena* arena, GetResponse&& from) noexcept
      : GetResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChunkFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .filetransfer.Chunk chunk = 1;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;

  public:
  void clear_chunk() ;
  const ::filetransfer::Chunk& chunk() const;
  PROTOBUF_NODISCARD ::filetransfer::Chunk* release_chunk();
  ::filetransfer::Chunk* mutable_chunk();
  void set_allocated_chunk(::filetransfer::Chunk* value);
  void unsafe_arena_set_allocated_chunk(::filetransfer::Chunk* value);
  ::filetransfer::Chunk* unsafe_arena_release_chunk();

  private:
  const ::filetransfer::Chunk& _internal_chunk() const;
  ::filetransfer::Chunk* _internal_mutable_chunk();

  public:
  // .filetransfer.OperationStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;

  public:
  void clear_status() ;
  const ::filetransfer::OperationStatus& status() const;
  PROTOBUF_NODISCARD ::filetransfer::OperationStatus* release_status();
  ::filetransfer::OperationStatus* mutable_status();
  void set_allocated_status(::filetransfer::OperationStatus* value);
  void unsafe_arena_set_allocated_status(::filetransfer::OperationStatus* value);
  ::filetransfer::OperationStatus* unsafe_arena_release_status();

  private:
  const ::filetransfer::OperationStatus& _internal_status() const;
  ::filetransfer::OperationStatus* _internal_mutable_status();

  public:
  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:filetransfer.GetResponse)
 private:
  class _Internal;
  void set_has_chunk();
  void set_has_status();
  inline bool has_response() const;
  inline void clear_has_response();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GetResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetResponse& from_msg);
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::filetransfer::Chunk* chunk_;
      ::filetransfer::OperationStatus* status_;
    } response_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hydfs_2eproto;
};
// -------------------------------------------------------------------

class AppendRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:filetransfer.AppendRequest) */ {
 public:
  inline AppendRequest() : AppendRequest(nullptr) {}
  ~AppendRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AppendRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AppendRequest(const AppendRequest& from) : AppendRequest(nullptr, from) {}
  inline AppendRequest(AppendRequest&& from) noexcept
      : AppendRequest(nullptr, std::move(from)) {}
  inline AppendRequest& operator=(const AppendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendRequest& operator=(AppendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kFileRequest = 1,
    kChunk = 2,
    REQUEST_NOT_SET = 0,
  };
  static inline const AppendRequest* internal_default_instance() {
    return reinterpret_cast<const AppendRequest*>(
        &_AppendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(AppendRequest& a, AppendRequest& b) { a.Swap(&b); }
  inline void Swap(AppendRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AppendRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AppendRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AppendRequest& from) { AppendRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AppendRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "filetransfer.AppendRequest"; }

 protected:
  explicit AppendRequest(::google::protobuf::Arena* arena);
  AppendRequest(::google::protobuf::Arena* arena, const AppendRequest& from);
  AppendRequest(::google::protobuf::Arena* arena, AppendRequest&& from) noexcept
      : AppendRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFileRequestFieldNumber = 1,
    kChunkFieldNumber = 2,
  };
  // .filetransfer.FileRequest file_request = 1;
  bool has_file_request() const;
  private:
  bool _internal_has_file_request() const;

  public:
  void clear_file_request() ;
  const ::filetransfer::FileRequest& file_request() const;
  PROTOBUF_NODISCARD ::filetransfer::FileRequest* release_file_request();
  ::filetransfer::FileRequest* mutable_file_request();
  void set_allocated_file_request(::filetransfer::FileRequest* value);
  void unsafe_arena_set_allocated_file_request(::filetransfer::FileRequest* value);
  ::filetransfer::FileRequest* unsafe_arena_release_file_request();

  private:
  const ::filetransfer::FileRequest& _internal_file_request() const;
  ::filetransfer::FileRequest* _internal_mutable_file_request();

  public:
  // .filetransfer.Chunk chunk = 2;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;

  public:
  void clear_chunk() ;
  const ::filetransfer::Chunk& chunk() const;
  PROTOBUF_NODISCARD ::filetransfer::Chunk* release_chunk();
  ::filetransfer::Chunk* mutable_chunk();
  void set_allocated_chunk(::filetransfer::Chunk* value);
  void unsafe_arena_set_allocated_chunk(::filetransfer::Chunk* value);
  ::filetransfer::Chunk* unsafe_arena_release_chunk();

  private:
  const ::filetransfer::Chunk& _internal_chunk() const;
  ::filetransfer::Chunk* _internal_mutable_chunk();

  public:
  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:filetransfer.AppendRequest)
 private:
  class _Internal;
  void set_has_file_request();
  void set_has_chunk();
  inline bool has_request() const;
  inline void clear_has_request();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AppendRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AppendRequest& from_msg);
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::filetransfer::FileRequest* file_request_;
      ::filetransfer::Chunk* chunk_;
    } request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hydfs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OperationStatus

// .filetransfer.StatusCode status = 1;
inline void OperationStatus::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::filetransfer::StatusCode OperationStatus::status() const {
  // @@protoc_insertion_point(field_get:filetransfer.OperationStatus.status)
  return _internal_status();
}
inline void OperationStatus::set_status(::filetransfer::StatusCode value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:filetransfer.OperationStatus.status)
}
inline ::filetransfer::StatusCode OperationStatus::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::filetransfer::StatusCode>(_impl_.status_);
}
inline void OperationStatus::_internal_set_status(::filetransfer::StatusCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string message = 2;
inline void OperationStatus::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& OperationStatus::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.OperationStatus.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationStatus::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:filetransfer.OperationStatus.message)
}
inline std::string* OperationStatus::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:filetransfer.OperationStatus.message)
  return _s;
}
inline const std::string& OperationStatus::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void OperationStatus::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* OperationStatus::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* OperationStatus::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:filetransfer.OperationStatus.message)
  return _impl_.message_.Release();
}
inline void OperationStatus::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:filetransfer.OperationStatus.message)
}

// -------------------------------------------------------------------

// FileRequest

// string filename = 1;
inline void FileRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.FileRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:filetransfer.FileRequest.filename)
}
inline std::string* FileRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:filetransfer.FileRequest.filename)
  return _s;
}
inline const std::string& FileRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void FileRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* FileRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* FileRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:filetransfer.FileRequest.filename)
  return _impl_.filename_.Release();
}
inline void FileRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:filetransfer.FileRequest.filename)
}

// -------------------------------------------------------------------

// FileOrderRequest

// string filename = 1;
inline void FileOrderRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileOrderRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.FileOrderRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileOrderRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:filetransfer.FileOrderRequest.filename)
}
inline std::string* FileOrderRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:filetransfer.FileOrderRequest.filename)
  return _s;
}
inline const std::string& FileOrderRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void FileOrderRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* FileOrderRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* FileOrderRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:filetransfer.FileOrderRequest.filename)
  return _impl_.filename_.Release();
}
inline void FileOrderRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:filetransfer.FileOrderRequest.filename)
}

// int32 order = 2;
inline void FileOrderRequest::clear_order() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_ = 0;
}
inline ::int32_t FileOrderRequest::order() const {
  // @@protoc_insertion_point(field_get:filetransfer.FileOrderRequest.order)
  return _internal_order();
}
inline void FileOrderRequest::set_order(::int32_t value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:filetransfer.FileOrderRequest.order)
}
inline ::int32_t FileOrderRequest::_internal_order() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_;
}
inline void FileOrderRequest::_internal_set_order(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_ = value;
}

// -------------------------------------------------------------------

// Chunk

// bytes content = 1;
inline void Chunk::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Chunk::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.Chunk.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Chunk::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:filetransfer.Chunk.content)
}
inline std::string* Chunk::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:filetransfer.Chunk.content)
  return _s;
}
inline const std::string& Chunk::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void Chunk::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* Chunk::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* Chunk::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:filetransfer.Chunk.content)
  return _impl_.content_.Release();
}
inline void Chunk::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:filetransfer.Chunk.content)
}

// -------------------------------------------------------------------

// GetResponse

// .filetransfer.Chunk chunk = 1;
inline bool GetResponse::has_chunk() const {
  return response_case() == kChunk;
}
inline bool GetResponse::_internal_has_chunk() const {
  return response_case() == kChunk;
}
inline void GetResponse::set_has_chunk() {
  _impl_._oneof_case_[0] = kChunk;
}
inline void GetResponse::clear_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kChunk) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.chunk_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.chunk_);
    }
    clear_has_response();
  }
}
inline ::filetransfer::Chunk* GetResponse::release_chunk() {
  // @@protoc_insertion_point(field_release:filetransfer.GetResponse.chunk)
  if (response_case() == kChunk) {
    clear_has_response();
    auto* temp = _impl_.response_.chunk_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::filetransfer::Chunk& GetResponse::_internal_chunk() const {
  return response_case() == kChunk ? *_impl_.response_.chunk_ : reinterpret_cast<::filetransfer::Chunk&>(::filetransfer::_Chunk_default_instance_);
}
inline const ::filetransfer::Chunk& GetResponse::chunk() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.GetResponse.chunk)
  return _internal_chunk();
}
inline ::filetransfer::Chunk* GetResponse::unsafe_arena_release_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:filetransfer.GetResponse.chunk)
  if (response_case() == kChunk) {
    clear_has_response();
    auto* temp = _impl_.response_.chunk_;
    _impl_.response_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetResponse::unsafe_arena_set_allocated_chunk(::filetransfer::Chunk* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_chunk();
    _impl_.response_.chunk_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:filetransfer.GetResponse.chunk)
}
inline ::filetransfer::Chunk* GetResponse::_internal_mutable_chunk() {
  if (response_case() != kChunk) {
    clear_response();
    set_has_chunk();
    _impl_.response_.chunk_ =
        ::google::protobuf::Message::DefaultConstruct<::filetransfer::Chunk>(GetArena());
  }
  return _impl_.response_.chunk_;
}
inline ::filetransfer::Chunk* GetResponse::mutable_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::filetransfer::Chunk* _msg = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:filetransfer.GetResponse.chunk)
  return _msg;
}

// .filetransfer.OperationStatus status = 2;
inline bool GetResponse::has_status() const {
  return response_case() == kStatus;
}
inline bool GetResponse::_internal_has_status() const {
  return response_case() == kStatus;
}
inline void GetResponse::set_has_status() {
  _impl_._oneof_case_[0] = kStatus;
}
inline void GetResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kStatus) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.status_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.response_.status_);
    }
    clear_has_response();
  }
}
inline ::filetransfer::OperationStatus* GetResponse::release_status() {
  // @@protoc_insertion_point(field_release:filetransfer.GetResponse.status)
  if (response_case() == kStatus) {
    clear_has_response();
    auto* temp = _impl_.response_.status_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::filetransfer::OperationStatus& GetResponse::_internal_status() const {
  return response_case() == kStatus ? *_impl_.response_.status_ : reinterpret_cast<::filetransfer::OperationStatus&>(::filetransfer::_OperationStatus_default_instance_);
}
inline const ::filetransfer::OperationStatus& GetResponse::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.GetResponse.status)
  return _internal_status();
}
inline ::filetransfer::OperationStatus* GetResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:filetransfer.GetResponse.status)
  if (response_case() == kStatus) {
    clear_has_response();
    auto* temp = _impl_.response_.status_;
    _impl_.response_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetResponse::unsafe_arena_set_allocated_status(::filetransfer::OperationStatus* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_status();
    _impl_.response_.status_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:filetransfer.GetResponse.status)
}
inline ::filetransfer::OperationStatus* GetResponse::_internal_mutable_status() {
  if (response_case() != kStatus) {
    clear_response();
    set_has_status();
    _impl_.response_.status_ =
        ::google::protobuf::Message::DefaultConstruct<::filetransfer::OperationStatus>(GetArena());
  }
  return _impl_.response_.status_;
}
inline ::filetransfer::OperationStatus* GetResponse::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::filetransfer::OperationStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:filetransfer.GetResponse.status)
  return _msg;
}

inline bool GetResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void GetResponse::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline GetResponse::ResponseCase GetResponse::response_case() const {
  return GetResponse::ResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AppendRequest

// .filetransfer.FileRequest file_request = 1;
inline bool AppendRequest::has_file_request() const {
  return request_case() == kFileRequest;
}
inline bool AppendRequest::_internal_has_file_request() const {
  return request_case() == kFileRequest;
}
inline void AppendRequest::set_has_file_request() {
  _impl_._oneof_case_[0] = kFileRequest;
}
inline void AppendRequest::clear_file_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kFileRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.file_request_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.file_request_);
    }
    clear_has_request();
  }
}
inline ::filetransfer::FileRequest* AppendRequest::release_file_request() {
  // @@protoc_insertion_point(field_release:filetransfer.AppendRequest.file_request)
  if (request_case() == kFileRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.file_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.file_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::filetransfer::FileRequest& AppendRequest::_internal_file_request() const {
  return request_case() == kFileRequest ? *_impl_.request_.file_request_ : reinterpret_cast<::filetransfer::FileRequest&>(::filetransfer::_FileRequest_default_instance_);
}
inline const ::filetransfer::FileRequest& AppendRequest::file_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.AppendRequest.file_request)
  return _internal_file_request();
}
inline ::filetransfer::FileRequest* AppendRequest::unsafe_arena_release_file_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:filetransfer.AppendRequest.file_request)
  if (request_case() == kFileRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.file_request_;
    _impl_.request_.file_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendRequest::unsafe_arena_set_allocated_file_request(::filetransfer::FileRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_file_request();
    _impl_.request_.file_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:filetransfer.AppendRequest.file_request)
}
inline ::filetransfer::FileRequest* AppendRequest::_internal_mutable_file_request() {
  if (request_case() != kFileRequest) {
    clear_request();
    set_has_file_request();
    _impl_.request_.file_request_ =
        ::google::protobuf::Message::DefaultConstruct<::filetransfer::FileRequest>(GetArena());
  }
  return _impl_.request_.file_request_;
}
inline ::filetransfer::FileRequest* AppendRequest::mutable_file_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::filetransfer::FileRequest* _msg = _internal_mutable_file_request();
  // @@protoc_insertion_point(field_mutable:filetransfer.AppendRequest.file_request)
  return _msg;
}

// .filetransfer.Chunk chunk = 2;
inline bool AppendRequest::has_chunk() const {
  return request_case() == kChunk;
}
inline bool AppendRequest::_internal_has_chunk() const {
  return request_case() == kChunk;
}
inline void AppendRequest::set_has_chunk() {
  _impl_._oneof_case_[0] = kChunk;
}
inline void AppendRequest::clear_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kChunk) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.chunk_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.chunk_);
    }
    clear_has_request();
  }
}
inline ::filetransfer::Chunk* AppendRequest::release_chunk() {
  // @@protoc_insertion_point(field_release:filetransfer.AppendRequest.chunk)
  if (request_case() == kChunk) {
    clear_has_request();
    auto* temp = _impl_.request_.chunk_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::filetransfer::Chunk& AppendRequest::_internal_chunk() const {
  return request_case() == kChunk ? *_impl_.request_.chunk_ : reinterpret_cast<::filetransfer::Chunk&>(::filetransfer::_Chunk_default_instance_);
}
inline const ::filetransfer::Chunk& AppendRequest::chunk() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.AppendRequest.chunk)
  return _internal_chunk();
}
inline ::filetransfer::Chunk* AppendRequest::unsafe_arena_release_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:filetransfer.AppendRequest.chunk)
  if (request_case() == kChunk) {
    clear_has_request();
    auto* temp = _impl_.request_.chunk_;
    _impl_.request_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendRequest::unsafe_arena_set_allocated_chunk(::filetransfer::Chunk* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_chunk();
    _impl_.request_.chunk_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:filetransfer.AppendRequest.chunk)
}
inline ::filetransfer::Chunk* AppendRequest::_internal_mutable_chunk() {
  if (request_case() != kChunk) {
    clear_request();
    set_has_chunk();
    _impl_.request_.chunk_ =
        ::google::protobuf::Message::DefaultConstruct<::filetransfer::Chunk>(GetArena());
  }
  return _impl_.request_.chunk_;
}
inline ::filetransfer::Chunk* AppendRequest::mutable_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::filetransfer::Chunk* _msg = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:filetransfer.AppendRequest.chunk)
  return _msg;
}

inline bool AppendRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void AppendRequest::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline AppendRequest::RequestCase AppendRequest::request_case() const {
  return AppendRequest::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MergeRequest

// string filename = 1;
inline void MergeRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& MergeRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.MergeRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MergeRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:filetransfer.MergeRequest.filename)
}
inline std::string* MergeRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:filetransfer.MergeRequest.filename)
  return _s;
}
inline const std::string& MergeRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void MergeRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* MergeRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* MergeRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:filetransfer.MergeRequest.filename)
  return _impl_.filename_.Release();
}
inline void MergeRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:filetransfer.MergeRequest.filename)
}

// repeated string successors = 2;
inline int MergeRequest::_internal_successors_size() const {
  return _internal_successors().size();
}
inline int MergeRequest::successors_size() const {
  return _internal_successors_size();
}
inline void MergeRequest::clear_successors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.successors_.Clear();
}
inline std::string* MergeRequest::add_successors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_successors()->Add();
  // @@protoc_insertion_point(field_add_mutable:filetransfer.MergeRequest.successors)
  return _s;
}
inline const std::string& MergeRequest::successors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.MergeRequest.successors)
  return _internal_successors().Get(index);
}
inline std::string* MergeRequest::mutable_successors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:filetransfer.MergeRequest.successors)
  return _internal_mutable_successors()->Mutable(index);
}
inline void MergeRequest::set_successors(int index, const std::string& value) {
  _internal_mutable_successors()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:filetransfer.MergeRequest.successors)
}
inline void MergeRequest::set_successors(int index, std::string&& value) {
  _internal_mutable_successors()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:filetransfer.MergeRequest.successors)
}
inline void MergeRequest::set_successors(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_successors()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:filetransfer.MergeRequest.successors)
}
inline void MergeRequest::set_successors(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_successors()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:filetransfer.MergeRequest.successors)
}
inline void MergeRequest::set_successors(int index, absl::string_view value) {
  _internal_mutable_successors()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:filetransfer.MergeRequest.successors)
}
inline void MergeRequest::add_successors(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_successors()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:filetransfer.MergeRequest.successors)
}
inline void MergeRequest::add_successors(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_successors()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:filetransfer.MergeRequest.successors)
}
inline void MergeRequest::add_successors(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_successors()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:filetransfer.MergeRequest.successors)
}
inline void MergeRequest::add_successors(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_successors()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:filetransfer.MergeRequest.successors)
}
inline void MergeRequest::add_successors(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_successors()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:filetransfer.MergeRequest.successors)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MergeRequest::successors() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:filetransfer.MergeRequest.successors)
  return _internal_successors();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MergeRequest::mutable_successors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:filetransfer.MergeRequest.successors)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_successors();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MergeRequest::_internal_successors() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.successors_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MergeRequest::_internal_mutable_successors() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.successors_;
}

// -------------------------------------------------------------------

// OverwriteRequest

// .filetransfer.FileOrderRequest file_request = 1;
inline bool OverwriteRequest::has_file_request() const {
  return request_case() == kFileRequest;
}
inline bool OverwriteRequest::_internal_has_file_request() const {
  return request_case() == kFileRequest;
}
inline void OverwriteRequest::set_has_file_request() {
  _impl_._oneof_case_[0] = kFileRequest;
}
inline void OverwriteRequest::clear_file_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kFileRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.file_request_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.file_request_);
    }
    clear_has_request();
  }
}
inline ::filetransfer::FileOrderRequest* OverwriteRequest::release_file_request() {
  // @@protoc_insertion_point(field_release:filetransfer.OverwriteRequest.file_request)
  if (request_case() == kFileRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.file_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.file_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::filetransfer::FileOrderRequest& OverwriteRequest::_internal_file_request() const {
  return request_case() == kFileRequest ? *_impl_.request_.file_request_ : reinterpret_cast<::filetransfer::FileOrderRequest&>(::filetransfer::_FileOrderRequest_default_instance_);
}
inline const ::filetransfer::FileOrderRequest& OverwriteRequest::file_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.OverwriteRequest.file_request)
  return _internal_file_request();
}
inline ::filetransfer::FileOrderRequest* OverwriteRequest::unsafe_arena_release_file_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:filetransfer.OverwriteRequest.file_request)
  if (request_case() == kFileRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.file_request_;
    _impl_.request_.file_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OverwriteRequest::unsafe_arena_set_allocated_file_request(::filetransfer::FileOrderRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_file_request();
    _impl_.request_.file_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:filetransfer.OverwriteRequest.file_request)
}
inline ::filetransfer::FileOrderRequest* OverwriteRequest::_internal_mutable_file_request() {
  if (request_case() != kFileRequest) {
    clear_request();
    set_has_file_request();
    _impl_.request_.file_request_ =
        ::google::protobuf::Message::DefaultConstruct<::filetransfer::FileOrderRequest>(GetArena());
  }
  return _impl_.request_.file_request_;
}
inline ::filetransfer::FileOrderRequest* OverwriteRequest::mutable_file_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::filetransfer::FileOrderRequest* _msg = _internal_mutable_file_request();
  // @@protoc_insertion_point(field_mutable:filetransfer.OverwriteRequest.file_request)
  return _msg;
}

// .filetransfer.Chunk chunk = 2;
inline bool OverwriteRequest::has_chunk() const {
  return request_case() == kChunk;
}
inline bool OverwriteRequest::_internal_has_chunk() const {
  return request_case() == kChunk;
}
inline void OverwriteRequest::set_has_chunk() {
  _impl_._oneof_case_[0] = kChunk;
}
inline void OverwriteRequest::clear_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_case() == kChunk) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.chunk_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.chunk_);
    }
    clear_has_request();
  }
}
inline ::filetransfer::Chunk* OverwriteRequest::release_chunk() {
  // @@protoc_insertion_point(field_release:filetransfer.OverwriteRequest.chunk)
  if (request_case() == kChunk) {
    clear_has_request();
    auto* temp = _impl_.request_.chunk_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::filetransfer::Chunk& OverwriteRequest::_internal_chunk() const {
  return request_case() == kChunk ? *_impl_.request_.chunk_ : reinterpret_cast<::filetransfer::Chunk&>(::filetransfer::_Chunk_default_instance_);
}
inline const ::filetransfer::Chunk& OverwriteRequest::chunk() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.OverwriteRequest.chunk)
  return _internal_chunk();
}
inline ::filetransfer::Chunk* OverwriteRequest::unsafe_arena_release_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:filetransfer.OverwriteRequest.chunk)
  if (request_case() == kChunk) {
    clear_has_request();
    auto* temp = _impl_.request_.chunk_;
    _impl_.request_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OverwriteRequest::unsafe_arena_set_allocated_chunk(::filetransfer::Chunk* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_chunk();
    _impl_.request_.chunk_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:filetransfer.OverwriteRequest.chunk)
}
inline ::filetransfer::Chunk* OverwriteRequest::_internal_mutable_chunk() {
  if (request_case() != kChunk) {
    clear_request();
    set_has_chunk();
    _impl_.request_.chunk_ =
        ::google::protobuf::Message::DefaultConstruct<::filetransfer::Chunk>(GetArena());
  }
  return _impl_.request_.chunk_;
}
inline ::filetransfer::Chunk* OverwriteRequest::mutable_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::filetransfer::Chunk* _msg = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:filetransfer.OverwriteRequest.chunk)
  return _msg;
}

inline bool OverwriteRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void OverwriteRequest::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline OverwriteRequest::RequestCase OverwriteRequest::request_case() const {
  return OverwriteRequest::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReplicationRequest

// int32 failure_case = 1;
inline void ReplicationRequest::clear_failure_case() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_case_ = 0;
}
inline ::int32_t ReplicationRequest::failure_case() const {
  // @@protoc_insertion_point(field_get:filetransfer.ReplicationRequest.failure_case)
  return _internal_failure_case();
}
inline void ReplicationRequest::set_failure_case(::int32_t value) {
  _internal_set_failure_case(value);
  // @@protoc_insertion_point(field_set:filetransfer.ReplicationRequest.failure_case)
}
inline ::int32_t ReplicationRequest::_internal_failure_case() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.failure_case_;
}
inline void ReplicationRequest::_internal_set_failure_case(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_case_ = value;
}

// optional string existing_successor = 2;
inline bool ReplicationRequest::has_existing_successor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ReplicationRequest::clear_existing_successor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.existing_successor_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReplicationRequest::existing_successor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.ReplicationRequest.existing_successor)
  return _internal_existing_successor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplicationRequest::set_existing_successor(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.existing_successor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:filetransfer.ReplicationRequest.existing_successor)
}
inline std::string* ReplicationRequest::mutable_existing_successor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_existing_successor();
  // @@protoc_insertion_point(field_mutable:filetransfer.ReplicationRequest.existing_successor)
  return _s;
}
inline const std::string& ReplicationRequest::_internal_existing_successor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.existing_successor_.Get();
}
inline void ReplicationRequest::_internal_set_existing_successor(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.existing_successor_.Set(value, GetArena());
}
inline std::string* ReplicationRequest::_internal_mutable_existing_successor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.existing_successor_.Mutable( GetArena());
}
inline std::string* ReplicationRequest::release_existing_successor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:filetransfer.ReplicationRequest.existing_successor)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.existing_successor_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.existing_successor_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ReplicationRequest::set_allocated_existing_successor(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.existing_successor_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.existing_successor_.IsDefault()) {
          _impl_.existing_successor_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:filetransfer.ReplicationRequest.existing_successor)
}

// repeated string new_successors = 3;
inline int ReplicationRequest::_internal_new_successors_size() const {
  return _internal_new_successors().size();
}
inline int ReplicationRequest::new_successors_size() const {
  return _internal_new_successors_size();
}
inline void ReplicationRequest::clear_new_successors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_successors_.Clear();
}
inline std::string* ReplicationRequest::add_new_successors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_new_successors()->Add();
  // @@protoc_insertion_point(field_add_mutable:filetransfer.ReplicationRequest.new_successors)
  return _s;
}
inline const std::string& ReplicationRequest::new_successors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:filetransfer.ReplicationRequest.new_successors)
  return _internal_new_successors().Get(index);
}
inline std::string* ReplicationRequest::mutable_new_successors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:filetransfer.ReplicationRequest.new_successors)
  return _internal_mutable_new_successors()->Mutable(index);
}
inline void ReplicationRequest::set_new_successors(int index, const std::string& value) {
  _internal_mutable_new_successors()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:filetransfer.ReplicationRequest.new_successors)
}
inline void ReplicationRequest::set_new_successors(int index, std::string&& value) {
  _internal_mutable_new_successors()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:filetransfer.ReplicationRequest.new_successors)
}
inline void ReplicationRequest::set_new_successors(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_new_successors()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:filetransfer.ReplicationRequest.new_successors)
}
inline void ReplicationRequest::set_new_successors(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_new_successors()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:filetransfer.ReplicationRequest.new_successors)
}
inline void ReplicationRequest::set_new_successors(int index, absl::string_view value) {
  _internal_mutable_new_successors()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:filetransfer.ReplicationRequest.new_successors)
}
inline void ReplicationRequest::add_new_successors(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_new_successors()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:filetransfer.ReplicationRequest.new_successors)
}
inline void ReplicationRequest::add_new_successors(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_new_successors()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:filetransfer.ReplicationRequest.new_successors)
}
inline void ReplicationRequest::add_new_successors(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_new_successors()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:filetransfer.ReplicationRequest.new_successors)
}
inline void ReplicationRequest::add_new_successors(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_new_successors()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:filetransfer.ReplicationRequest.new_successors)
}
inline void ReplicationRequest::add_new_successors(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_new_successors()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:filetransfer.ReplicationRequest.new_successors)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ReplicationRequest::new_successors() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:filetransfer.ReplicationRequest.new_successors)
  return _internal_new_successors();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ReplicationRequest::mutable_new_successors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:filetransfer.ReplicationRequest.new_successors)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_new_successors();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ReplicationRequest::_internal_new_successors() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_successors_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ReplicationRequest::_internal_mutable_new_successors() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.new_successors_;
}

// -------------------------------------------------------------------

// UpdateOrderRequest

// int32 old_order = 1;
inline void UpdateOrderRequest::clear_old_order() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_order_ = 0;
}
inline ::int32_t UpdateOrderRequest::old_order() const {
  // @@protoc_insertion_point(field_get:filetransfer.UpdateOrderRequest.old_order)
  return _internal_old_order();
}
inline void UpdateOrderRequest::set_old_order(::int32_t value) {
  _internal_set_old_order(value);
  // @@protoc_insertion_point(field_set:filetransfer.UpdateOrderRequest.old_order)
}
inline ::int32_t UpdateOrderRequest::_internal_old_order() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.old_order_;
}
inline void UpdateOrderRequest::_internal_set_old_order(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_order_ = value;
}

// int32 new_order = 2;
inline void UpdateOrderRequest::clear_new_order() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_order_ = 0;
}
inline ::int32_t UpdateOrderRequest::new_order() const {
  // @@protoc_insertion_point(field_get:filetransfer.UpdateOrderRequest.new_order)
  return _internal_new_order();
}
inline void UpdateOrderRequest::set_new_order(::int32_t value) {
  _internal_set_new_order(value);
  // @@protoc_insertion_point(field_set:filetransfer.UpdateOrderRequest.new_order)
}
inline ::int32_t UpdateOrderRequest::_internal_new_order() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_order_;
}
inline void UpdateOrderRequest::_internal_set_new_order(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_order_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace filetransfer


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::filetransfer::StatusCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::filetransfer::StatusCode>() {
  return ::filetransfer::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_hydfs_2eproto_2epb_2eh
