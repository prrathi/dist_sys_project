// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rainstorm.proto
#ifndef GRPC_rainstorm_2eproto__INCLUDED
#define GRPC_rainstorm_2eproto__INCLUDED

#include "rainstorm.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace rainstorm {

// I guess run executables with popen + args .. need to limit calls to 32k-64k bytes .. kinda slow?
// each connection between task has 2 uni-directional streams 
// - 1 client side stream from src to server, 1 client side stream from server to src 
// - src streams data to server, server copies it somewhere and at some point executes program on data chunk, stream ack to src, and stores the resultant data 
// would copy k,v data to some buffer associated with task, then at some point send to next stage associated with task 
//
class RainstormService final {
 public:
  static constexpr char const* service_full_name() {
    return "rainstorm.RainstormService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NewSrcTask(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest& request, ::rainstorm::OperationStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>> AsyncNewSrcTask(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>>(AsyncNewSrcTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>> PrepareAsyncNewSrcTask(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>>(PrepareAsyncNewSrcTaskRaw(context, request, cq));
    }
    // tell node to start being src node.
    virtual ::grpc::Status NewStageTask(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest& request, ::rainstorm::OperationStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>> AsyncNewStageTask(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>>(AsyncNewStageTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>> PrepareAsyncNewStageTask(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>>(PrepareAsyncNewStageTaskRaw(context, request, cq));
    }
    // tell node to start being stage task node (check if existing log files in hydfs)
<<<<<<< HEAD
=======
    // rpc NewTgtTask(NewTgtTaskRequest) returns (OperationStatus); // tell node to start being tgt node (check if existing log files in hydfs)
>>>>>>> origin/messy_branch
    virtual ::grpc::Status UpdateTaskSnd(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest& request, ::rainstorm::OperationStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>> AsyncUpdateTaskSnd(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>>(AsyncUpdateTaskSndRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>> PrepareAsyncUpdateTaskSnd(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>>(PrepareAsyncUpdateTaskSndRaw(context, request, cq));
    }
    // tell node to start new grpc stream for task (state) to new next node
<<<<<<< HEAD
=======
    // rpc UpdateTaskRcv(UpdateTaskRcvRequest) returns (OperationStatus); // tell node where to establish new stream to send data and to send acks
>>>>>>> origin/messy_branch
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>> SendDataChunks(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>>(SendDataChunksRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>> AsyncSendDataChunks(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>>(AsyncSendDataChunksRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>> PrepareAsyncSendDataChunks(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>>(PrepareAsyncSendDataChunksRaw(context, cq));
    }
    // make sure to gracefully exit if connection lost
<<<<<<< HEAD
=======
    // on the client side same as SendDataChunk
>>>>>>> origin/messy_branch
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>> SendDataChunksToLeader(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>>(SendDataChunksToLeaderRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>> AsyncSendDataChunksToLeader(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>>(AsyncSendDataChunksToLeaderRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>> PrepareAsyncSendDataChunksToLeader(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>>(PrepareAsyncSendDataChunksToLeaderRaw(context, cq));
    }
<<<<<<< HEAD
    // only called for leader, handle everything serverside
=======
    // only called for leader, handle everything serverside so leader can  chill
>>>>>>> origin/messy_branch
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void NewSrcTask(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest* request, ::rainstorm::OperationStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewSrcTask(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest* request, ::rainstorm::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // tell node to start being src node.
      virtual void NewStageTask(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest* request, ::rainstorm::OperationStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewStageTask(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest* request, ::rainstorm::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // tell node to start being stage task node (check if existing log files in hydfs)
<<<<<<< HEAD
      virtual void UpdateTaskSnd(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest* request, ::rainstorm::OperationStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateTaskSnd(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest* request, ::rainstorm::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // tell node to start new grpc stream for task (state) to new next node
      virtual void SendDataChunks(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::rainstorm::StreamDataChunk,::rainstorm::AckDataChunk>* reactor) = 0;
      // make sure to gracefully exit if connection lost
      virtual void SendDataChunksToLeader(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::rainstorm::StreamDataChunkLeader,::rainstorm::AckDataChunk>* reactor) = 0;
      // only called for leader, handle everything serverside
=======
      // rpc NewTgtTask(NewTgtTaskRequest) returns (OperationStatus); // tell node to start being tgt node (check if existing log files in hydfs)
      virtual void UpdateTaskSnd(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest* request, ::rainstorm::OperationStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateTaskSnd(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest* request, ::rainstorm::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // tell node to start new grpc stream for task (state) to new next node
      // rpc UpdateTaskRcv(UpdateTaskRcvRequest) returns (OperationStatus); // tell node where to establish new stream to send data and to send acks
      virtual void SendDataChunks(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::rainstorm::StreamDataChunk,::rainstorm::AckDataChunk>* reactor) = 0;
      // make sure to gracefully exit if connection lost
      // on the client side same as SendDataChunk
      virtual void SendDataChunksToLeader(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::rainstorm::StreamDataChunkLeader,::rainstorm::AckDataChunk>* reactor) = 0;
      // only called for leader, handle everything serverside so leader can  chill
>>>>>>> origin/messy_branch
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>* AsyncNewSrcTaskRaw(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>* PrepareAsyncNewSrcTaskRaw(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>* AsyncNewStageTaskRaw(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>* PrepareAsyncNewStageTaskRaw(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>* AsyncUpdateTaskSndRaw(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rainstorm::OperationStatus>* PrepareAsyncUpdateTaskSndRaw(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>* SendDataChunksRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>* AsyncSendDataChunksRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>* PrepareAsyncSendDataChunksRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>* SendDataChunksToLeaderRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>* AsyncSendDataChunksToLeaderRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>* PrepareAsyncSendDataChunksToLeaderRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status NewSrcTask(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest& request, ::rainstorm::OperationStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>> AsyncNewSrcTask(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>>(AsyncNewSrcTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>> PrepareAsyncNewSrcTask(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>>(PrepareAsyncNewSrcTaskRaw(context, request, cq));
    }
    ::grpc::Status NewStageTask(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest& request, ::rainstorm::OperationStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>> AsyncNewStageTask(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>>(AsyncNewStageTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>> PrepareAsyncNewStageTask(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>>(PrepareAsyncNewStageTaskRaw(context, request, cq));
    }
    ::grpc::Status UpdateTaskSnd(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest& request, ::rainstorm::OperationStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>> AsyncUpdateTaskSnd(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>>(AsyncUpdateTaskSndRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>> PrepareAsyncUpdateTaskSnd(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>>(PrepareAsyncUpdateTaskSndRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>> SendDataChunks(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>>(SendDataChunksRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>> AsyncSendDataChunks(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>>(AsyncSendDataChunksRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>> PrepareAsyncSendDataChunks(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>>(PrepareAsyncSendDataChunksRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>> SendDataChunksToLeader(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>>(SendDataChunksToLeaderRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>> AsyncSendDataChunksToLeader(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>>(AsyncSendDataChunksToLeaderRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>> PrepareAsyncSendDataChunksToLeader(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>>(PrepareAsyncSendDataChunksToLeaderRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void NewSrcTask(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest* request, ::rainstorm::OperationStatus* response, std::function<void(::grpc::Status)>) override;
      void NewSrcTask(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest* request, ::rainstorm::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NewStageTask(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest* request, ::rainstorm::OperationStatus* response, std::function<void(::grpc::Status)>) override;
      void NewStageTask(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest* request, ::rainstorm::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateTaskSnd(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest* request, ::rainstorm::OperationStatus* response, std::function<void(::grpc::Status)>) override;
      void UpdateTaskSnd(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest* request, ::rainstorm::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendDataChunks(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::rainstorm::StreamDataChunk,::rainstorm::AckDataChunk>* reactor) override;
      void SendDataChunksToLeader(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::rainstorm::StreamDataChunkLeader,::rainstorm::AckDataChunk>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>* AsyncNewSrcTaskRaw(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>* PrepareAsyncNewSrcTaskRaw(::grpc::ClientContext* context, const ::rainstorm::NewSrcTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>* AsyncNewStageTaskRaw(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>* PrepareAsyncNewStageTaskRaw(::grpc::ClientContext* context, const ::rainstorm::NewStageTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>* AsyncUpdateTaskSndRaw(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rainstorm::OperationStatus>* PrepareAsyncUpdateTaskSndRaw(::grpc::ClientContext* context, const ::rainstorm::UpdateTaskSndRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>* SendDataChunksRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>* AsyncSendDataChunksRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>* PrepareAsyncSendDataChunksRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>* SendDataChunksToLeaderRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>* AsyncSendDataChunksToLeaderRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>* PrepareAsyncSendDataChunksToLeaderRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NewSrcTask_;
    const ::grpc::internal::RpcMethod rpcmethod_NewStageTask_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateTaskSnd_;
    const ::grpc::internal::RpcMethod rpcmethod_SendDataChunks_;
    const ::grpc::internal::RpcMethod rpcmethod_SendDataChunksToLeader_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NewSrcTask(::grpc::ServerContext* context, const ::rainstorm::NewSrcTaskRequest* request, ::rainstorm::OperationStatus* response);
    // tell node to start being src node.
    virtual ::grpc::Status NewStageTask(::grpc::ServerContext* context, const ::rainstorm::NewStageTaskRequest* request, ::rainstorm::OperationStatus* response);
    // tell node to start being stage task node (check if existing log files in hydfs)
<<<<<<< HEAD
    virtual ::grpc::Status UpdateTaskSnd(::grpc::ServerContext* context, const ::rainstorm::UpdateTaskSndRequest* request, ::rainstorm::OperationStatus* response);
    // tell node to start new grpc stream for task (state) to new next node
    virtual ::grpc::Status SendDataChunks(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunk>* stream);
    // make sure to gracefully exit if connection lost
    virtual ::grpc::Status SendDataChunksToLeader(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunkLeader>* stream);
    // only called for leader, handle everything serverside
=======
    // rpc NewTgtTask(NewTgtTaskRequest) returns (OperationStatus); // tell node to start being tgt node (check if existing log files in hydfs)
    virtual ::grpc::Status UpdateTaskSnd(::grpc::ServerContext* context, const ::rainstorm::UpdateTaskSndRequest* request, ::rainstorm::OperationStatus* response);
    // tell node to start new grpc stream for task (state) to new next node
    // rpc UpdateTaskRcv(UpdateTaskRcvRequest) returns (OperationStatus); // tell node where to establish new stream to send data and to send acks
    virtual ::grpc::Status SendDataChunks(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunk>* stream);
    // make sure to gracefully exit if connection lost
    // on the client side same as SendDataChunk
    virtual ::grpc::Status SendDataChunksToLeader(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunkLeader>* stream);
    // only called for leader, handle everything serverside so leader can  chill
>>>>>>> origin/messy_branch
  };
  template <class BaseClass>
  class WithAsyncMethod_NewSrcTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewSrcTask() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NewSrcTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewSrcTask(::grpc::ServerContext* /*context*/, const ::rainstorm::NewSrcTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewSrcTask(::grpc::ServerContext* context, ::rainstorm::NewSrcTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::rainstorm::OperationStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewStageTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewStageTask() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NewStageTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewStageTask(::grpc::ServerContext* /*context*/, const ::rainstorm::NewStageTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewStageTask(::grpc::ServerContext* context, ::rainstorm::NewStageTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::rainstorm::OperationStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateTaskSnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateTaskSnd() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateTaskSnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskSnd(::grpc::ServerContext* /*context*/, const ::rainstorm::UpdateTaskSndRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTaskSnd(::grpc::ServerContext* context, ::rainstorm::UpdateTaskSndRequest* request, ::grpc::ServerAsyncResponseWriter< ::rainstorm::OperationStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDataChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendDataChunks() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendDataChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDataChunks(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDataChunks(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunk>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDataChunksToLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendDataChunksToLeader() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SendDataChunksToLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDataChunksToLeader(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunkLeader>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDataChunksToLeader(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunkLeader>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NewSrcTask<WithAsyncMethod_NewStageTask<WithAsyncMethod_UpdateTaskSnd<WithAsyncMethod_SendDataChunks<WithAsyncMethod_SendDataChunksToLeader<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_NewSrcTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewSrcTask() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::rainstorm::NewSrcTaskRequest, ::rainstorm::OperationStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rainstorm::NewSrcTaskRequest* request, ::rainstorm::OperationStatus* response) { return this->NewSrcTask(context, request, response); }));}
    void SetMessageAllocatorFor_NewSrcTask(
        ::grpc::MessageAllocator< ::rainstorm::NewSrcTaskRequest, ::rainstorm::OperationStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rainstorm::NewSrcTaskRequest, ::rainstorm::OperationStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewSrcTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewSrcTask(::grpc::ServerContext* /*context*/, const ::rainstorm::NewSrcTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewSrcTask(
      ::grpc::CallbackServerContext* /*context*/, const ::rainstorm::NewSrcTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NewStageTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewStageTask() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::rainstorm::NewStageTaskRequest, ::rainstorm::OperationStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rainstorm::NewStageTaskRequest* request, ::rainstorm::OperationStatus* response) { return this->NewStageTask(context, request, response); }));}
    void SetMessageAllocatorFor_NewStageTask(
        ::grpc::MessageAllocator< ::rainstorm::NewStageTaskRequest, ::rainstorm::OperationStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rainstorm::NewStageTaskRequest, ::rainstorm::OperationStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewStageTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewStageTask(::grpc::ServerContext* /*context*/, const ::rainstorm::NewStageTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewStageTask(
      ::grpc::CallbackServerContext* /*context*/, const ::rainstorm::NewStageTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateTaskSnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateTaskSnd() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::rainstorm::UpdateTaskSndRequest, ::rainstorm::OperationStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rainstorm::UpdateTaskSndRequest* request, ::rainstorm::OperationStatus* response) { return this->UpdateTaskSnd(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateTaskSnd(
        ::grpc::MessageAllocator< ::rainstorm::UpdateTaskSndRequest, ::rainstorm::OperationStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rainstorm::UpdateTaskSndRequest, ::rainstorm::OperationStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateTaskSnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskSnd(::grpc::ServerContext* /*context*/, const ::rainstorm::UpdateTaskSndRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTaskSnd(
      ::grpc::CallbackServerContext* /*context*/, const ::rainstorm::UpdateTaskSndRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendDataChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendDataChunks() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SendDataChunks(context); }));
    }
    ~WithCallbackMethod_SendDataChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDataChunks(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::rainstorm::StreamDataChunk, ::rainstorm::AckDataChunk>* SendDataChunks(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendDataChunksToLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendDataChunksToLeader() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SendDataChunksToLeader(context); }));
    }
    ~WithCallbackMethod_SendDataChunksToLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDataChunksToLeader(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunkLeader>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::rainstorm::StreamDataChunkLeader, ::rainstorm::AckDataChunk>* SendDataChunksToLeader(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_NewSrcTask<WithCallbackMethod_NewStageTask<WithCallbackMethod_UpdateTaskSnd<WithCallbackMethod_SendDataChunks<WithCallbackMethod_SendDataChunksToLeader<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NewSrcTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewSrcTask() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NewSrcTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewSrcTask(::grpc::ServerContext* /*context*/, const ::rainstorm::NewSrcTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewStageTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewStageTask() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NewStageTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewStageTask(::grpc::ServerContext* /*context*/, const ::rainstorm::NewStageTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateTaskSnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateTaskSnd() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateTaskSnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskSnd(::grpc::ServerContext* /*context*/, const ::rainstorm::UpdateTaskSndRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendDataChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendDataChunks() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendDataChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDataChunks(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendDataChunksToLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendDataChunksToLeader() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SendDataChunksToLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDataChunksToLeader(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunkLeader>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewSrcTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewSrcTask() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NewSrcTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewSrcTask(::grpc::ServerContext* /*context*/, const ::rainstorm::NewSrcTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewSrcTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewStageTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewStageTask() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_NewStageTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewStageTask(::grpc::ServerContext* /*context*/, const ::rainstorm::NewStageTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewStageTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateTaskSnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateTaskSnd() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateTaskSnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskSnd(::grpc::ServerContext* /*context*/, const ::rainstorm::UpdateTaskSndRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTaskSnd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendDataChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendDataChunks() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendDataChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDataChunks(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDataChunks(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendDataChunksToLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendDataChunksToLeader() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SendDataChunksToLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDataChunksToLeader(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunkLeader>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDataChunksToLeader(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewSrcTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewSrcTask() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewSrcTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewSrcTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewSrcTask(::grpc::ServerContext* /*context*/, const ::rainstorm::NewSrcTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewSrcTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewStageTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewStageTask() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewStageTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewStageTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewStageTask(::grpc::ServerContext* /*context*/, const ::rainstorm::NewStageTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewStageTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateTaskSnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateTaskSnd() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateTaskSnd(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateTaskSnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskSnd(::grpc::ServerContext* /*context*/, const ::rainstorm::UpdateTaskSndRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTaskSnd(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendDataChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendDataChunks() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SendDataChunks(context); }));
    }
    ~WithRawCallbackMethod_SendDataChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDataChunks(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SendDataChunks(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendDataChunksToLeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendDataChunksToLeader() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SendDataChunksToLeader(context); }));
    }
    ~WithRawCallbackMethod_SendDataChunksToLeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDataChunksToLeader(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::rainstorm::AckDataChunk, ::rainstorm::StreamDataChunkLeader>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SendDataChunksToLeader(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewSrcTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewSrcTask() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rainstorm::NewSrcTaskRequest, ::rainstorm::OperationStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rainstorm::NewSrcTaskRequest, ::rainstorm::OperationStatus>* streamer) {
                       return this->StreamedNewSrcTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewSrcTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewSrcTask(::grpc::ServerContext* /*context*/, const ::rainstorm::NewSrcTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewSrcTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rainstorm::NewSrcTaskRequest,::rainstorm::OperationStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewStageTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewStageTask() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rainstorm::NewStageTaskRequest, ::rainstorm::OperationStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rainstorm::NewStageTaskRequest, ::rainstorm::OperationStatus>* streamer) {
                       return this->StreamedNewStageTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewStageTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewStageTask(::grpc::ServerContext* /*context*/, const ::rainstorm::NewStageTaskRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewStageTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rainstorm::NewStageTaskRequest,::rainstorm::OperationStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateTaskSnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateTaskSnd() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rainstorm::UpdateTaskSndRequest, ::rainstorm::OperationStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rainstorm::UpdateTaskSndRequest, ::rainstorm::OperationStatus>* streamer) {
                       return this->StreamedUpdateTaskSnd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateTaskSnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateTaskSnd(::grpc::ServerContext* /*context*/, const ::rainstorm::UpdateTaskSndRequest* /*request*/, ::rainstorm::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateTaskSnd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rainstorm::UpdateTaskSndRequest,::rainstorm::OperationStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NewSrcTask<WithStreamedUnaryMethod_NewStageTask<WithStreamedUnaryMethod_UpdateTaskSnd<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NewSrcTask<WithStreamedUnaryMethod_NewStageTask<WithStreamedUnaryMethod_UpdateTaskSnd<Service > > > StreamedService;
};

}  // namespace rainstorm


#endif  // GRPC_rainstorm_2eproto__INCLUDED
