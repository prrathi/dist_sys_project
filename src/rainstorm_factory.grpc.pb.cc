// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rainstorm_factory.proto

#include "rainstorm_factory.pb.h"
#include "rainstorm_factory.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace rainstorm_factory {

static const char* RainstormFactoryService_method_names[] = {
  "/rainstorm_factory.RainstormFactoryService/CreateServer",
  "/rainstorm_factory.RainstormFactoryService/RemoveServer",
};

std::unique_ptr< RainstormFactoryService::Stub> RainstormFactoryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RainstormFactoryService::Stub> stub(new RainstormFactoryService::Stub(channel, options));
  return stub;
}

RainstormFactoryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateServer_(RainstormFactoryService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveServer_(RainstormFactoryService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RainstormFactoryService::Stub::CreateServer(::grpc::ClientContext* context, const ::rainstorm_factory::ServerRequest& request, ::rainstorm_factory::OperationStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rainstorm_factory::ServerRequest, ::rainstorm_factory::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateServer_, context, request, response);
}

void RainstormFactoryService::Stub::async::CreateServer(::grpc::ClientContext* context, const ::rainstorm_factory::ServerRequest* request, ::rainstorm_factory::OperationStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rainstorm_factory::ServerRequest, ::rainstorm_factory::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateServer_, context, request, response, std::move(f));
}

void RainstormFactoryService::Stub::async::CreateServer(::grpc::ClientContext* context, const ::rainstorm_factory::ServerRequest* request, ::rainstorm_factory::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rainstorm_factory::OperationStatus>* RainstormFactoryService::Stub::PrepareAsyncCreateServerRaw(::grpc::ClientContext* context, const ::rainstorm_factory::ServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rainstorm_factory::OperationStatus, ::rainstorm_factory::ServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rainstorm_factory::OperationStatus>* RainstormFactoryService::Stub::AsyncCreateServerRaw(::grpc::ClientContext* context, const ::rainstorm_factory::ServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RainstormFactoryService::Stub::RemoveServer(::grpc::ClientContext* context, const ::rainstorm_factory::ServerRequest& request, ::rainstorm_factory::OperationStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rainstorm_factory::ServerRequest, ::rainstorm_factory::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveServer_, context, request, response);
}

void RainstormFactoryService::Stub::async::RemoveServer(::grpc::ClientContext* context, const ::rainstorm_factory::ServerRequest* request, ::rainstorm_factory::OperationStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rainstorm_factory::ServerRequest, ::rainstorm_factory::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveServer_, context, request, response, std::move(f));
}

void RainstormFactoryService::Stub::async::RemoveServer(::grpc::ClientContext* context, const ::rainstorm_factory::ServerRequest* request, ::rainstorm_factory::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rainstorm_factory::OperationStatus>* RainstormFactoryService::Stub::PrepareAsyncRemoveServerRaw(::grpc::ClientContext* context, const ::rainstorm_factory::ServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rainstorm_factory::OperationStatus, ::rainstorm_factory::ServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rainstorm_factory::OperationStatus>* RainstormFactoryService::Stub::AsyncRemoveServerRaw(::grpc::ClientContext* context, const ::rainstorm_factory::ServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

RainstormFactoryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RainstormFactoryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RainstormFactoryService::Service, ::rainstorm_factory::ServerRequest, ::rainstorm_factory::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RainstormFactoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rainstorm_factory::ServerRequest* req,
             ::rainstorm_factory::OperationStatus* resp) {
               return service->CreateServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RainstormFactoryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RainstormFactoryService::Service, ::rainstorm_factory::ServerRequest, ::rainstorm_factory::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RainstormFactoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rainstorm_factory::ServerRequest* req,
             ::rainstorm_factory::OperationStatus* resp) {
               return service->RemoveServer(ctx, req, resp);
             }, this)));
}

RainstormFactoryService::Service::~Service() {
}

::grpc::Status RainstormFactoryService::Service::CreateServer(::grpc::ServerContext* context, const ::rainstorm_factory::ServerRequest* request, ::rainstorm_factory::OperationStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RainstormFactoryService::Service::RemoveServer(::grpc::ServerContext* context, const ::rainstorm_factory::ServerRequest* request, ::rainstorm_factory::OperationStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rainstorm_factory

