// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hydfs.proto

#include "hydfs.pb.h"
#include "hydfs.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace filetransfer {

static const char* FileTransferService_method_names[] = {
  "/filetransfer.FileTransferService/CreateFile",
  "/filetransfer.FileTransferService/AppendFile",
  "/filetransfer.FileTransferService/GetFile",
  "/filetransfer.FileTransferService/MergeFile",
  "/filetransfer.FileTransferService/OverwriteFile",
  "/filetransfer.FileTransferService/UpdateFilesReplication",
  "/filetransfer.FileTransferService/UpdateOrder",
};

std::unique_ptr< FileTransferService::Stub> FileTransferService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileTransferService::Stub> stub(new FileTransferService::Stub(channel, options));
  return stub;
}

FileTransferService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateFile_(FileTransferService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AppendFile_(FileTransferService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetFile_(FileTransferService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MergeFile_(FileTransferService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OverwriteFile_(FileTransferService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_UpdateFilesReplication_(FileTransferService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrder_(FileTransferService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileTransferService::Stub::CreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::filetransfer::OperationStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::filetransfer::FileOrderRequest, ::filetransfer::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateFile_, context, request, response);
}

void FileTransferService::Stub::async::CreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest* request, ::filetransfer::OperationStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::filetransfer::FileOrderRequest, ::filetransfer::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFile_, context, request, response, std::move(f));
}

void FileTransferService::Stub::async::CreateFile(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest* request, ::filetransfer::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* FileTransferService::Stub::PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::filetransfer::OperationStatus, ::filetransfer::FileOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* FileTransferService::Stub::AsyncCreateFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::filetransfer::AppendRequest>* FileTransferService::Stub::AppendFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response) {
  return ::grpc::internal::ClientWriterFactory< ::filetransfer::AppendRequest>::Create(channel_.get(), rpcmethod_AppendFile_, context, response);
}

void FileTransferService::Stub::async::AppendFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::ClientWriteReactor< ::filetransfer::AppendRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::filetransfer::AppendRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_AppendFile_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::filetransfer::AppendRequest>* FileTransferService::Stub::AsyncAppendFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::filetransfer::AppendRequest>::Create(channel_.get(), cq, rpcmethod_AppendFile_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::filetransfer::AppendRequest>* FileTransferService::Stub::PrepareAsyncAppendFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::filetransfer::AppendRequest>::Create(channel_.get(), cq, rpcmethod_AppendFile_, context, response, false, nullptr);
}

::grpc::ClientReader< ::filetransfer::GetResponse>* FileTransferService::Stub::GetFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::filetransfer::GetResponse>::Create(channel_.get(), rpcmethod_GetFile_, context, request);
}

void FileTransferService::Stub::async::GetFile(::grpc::ClientContext* context, const ::filetransfer::FileRequest* request, ::grpc::ClientReadReactor< ::filetransfer::GetResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::filetransfer::GetResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetFile_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::filetransfer::GetResponse>* FileTransferService::Stub::AsyncGetFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::filetransfer::GetResponse>::Create(channel_.get(), cq, rpcmethod_GetFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::filetransfer::GetResponse>* FileTransferService::Stub::PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::filetransfer::FileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::filetransfer::GetResponse>::Create(channel_.get(), cq, rpcmethod_GetFile_, context, request, false, nullptr);
}

::grpc::Status FileTransferService::Stub::MergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::filetransfer::OperationStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::filetransfer::MergeRequest, ::filetransfer::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MergeFile_, context, request, response);
}

void FileTransferService::Stub::async::MergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest* request, ::filetransfer::OperationStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::filetransfer::MergeRequest, ::filetransfer::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MergeFile_, context, request, response, std::move(f));
}

void FileTransferService::Stub::async::MergeFile(::grpc::ClientContext* context, const ::filetransfer::MergeRequest* request, ::filetransfer::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MergeFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* FileTransferService::Stub::PrepareAsyncMergeFileRaw(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::filetransfer::OperationStatus, ::filetransfer::MergeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MergeFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* FileTransferService::Stub::AsyncMergeFileRaw(::grpc::ClientContext* context, const ::filetransfer::MergeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMergeFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::filetransfer::OverwriteRequest>* FileTransferService::Stub::OverwriteFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response) {
  return ::grpc::internal::ClientWriterFactory< ::filetransfer::OverwriteRequest>::Create(channel_.get(), rpcmethod_OverwriteFile_, context, response);
}

void FileTransferService::Stub::async::OverwriteFile(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::ClientWriteReactor< ::filetransfer::OverwriteRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::filetransfer::OverwriteRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_OverwriteFile_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::filetransfer::OverwriteRequest>* FileTransferService::Stub::AsyncOverwriteFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::filetransfer::OverwriteRequest>::Create(channel_.get(), cq, rpcmethod_OverwriteFile_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::filetransfer::OverwriteRequest>* FileTransferService::Stub::PrepareAsyncOverwriteFileRaw(::grpc::ClientContext* context, ::filetransfer::OperationStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::filetransfer::OverwriteRequest>::Create(channel_.get(), cq, rpcmethod_OverwriteFile_, context, response, false, nullptr);
}

::grpc::Status FileTransferService::Stub::UpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::filetransfer::OperationStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::filetransfer::ReplicationRequest, ::filetransfer::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateFilesReplication_, context, request, response);
}

void FileTransferService::Stub::async::UpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest* request, ::filetransfer::OperationStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::filetransfer::ReplicationRequest, ::filetransfer::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateFilesReplication_, context, request, response, std::move(f));
}

void FileTransferService::Stub::async::UpdateFilesReplication(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest* request, ::filetransfer::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateFilesReplication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* FileTransferService::Stub::PrepareAsyncUpdateFilesReplicationRaw(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::filetransfer::OperationStatus, ::filetransfer::ReplicationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateFilesReplication_, context, request);
}

::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* FileTransferService::Stub::AsyncUpdateFilesReplicationRaw(::grpc::ClientContext* context, const ::filetransfer::ReplicationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateFilesReplicationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileTransferService::Stub::UpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::filetransfer::OperationStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::filetransfer::UpdateOrderRequest, ::filetransfer::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateOrder_, context, request, response);
}

void FileTransferService::Stub::async::UpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest* request, ::filetransfer::OperationStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::filetransfer::UpdateOrderRequest, ::filetransfer::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrder_, context, request, response, std::move(f));
}

void FileTransferService::Stub::async::UpdateOrder(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest* request, ::filetransfer::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* FileTransferService::Stub::PrepareAsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::filetransfer::OperationStatus, ::filetransfer::UpdateOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::filetransfer::OperationStatus>* FileTransferService::Stub::AsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::filetransfer::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

FileTransferService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTransferService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTransferService::Service, ::filetransfer::FileOrderRequest, ::filetransfer::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::filetransfer::FileOrderRequest* req,
             ::filetransfer::OperationStatus* resp) {
               return service->CreateFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTransferService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FileTransferService::Service, ::filetransfer::AppendRequest, ::filetransfer::OperationStatus>(
          [](FileTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::filetransfer::AppendRequest>* reader,
             ::filetransfer::OperationStatus* resp) {
               return service->AppendFile(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTransferService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileTransferService::Service, ::filetransfer::FileRequest, ::filetransfer::GetResponse>(
          [](FileTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::filetransfer::FileRequest* req,
             ::grpc::ServerWriter<::filetransfer::GetResponse>* writer) {
               return service->GetFile(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTransferService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTransferService::Service, ::filetransfer::MergeRequest, ::filetransfer::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::filetransfer::MergeRequest* req,
             ::filetransfer::OperationStatus* resp) {
               return service->MergeFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTransferService_method_names[4],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FileTransferService::Service, ::filetransfer::OverwriteRequest, ::filetransfer::OperationStatus>(
          [](FileTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::filetransfer::OverwriteRequest>* reader,
             ::filetransfer::OperationStatus* resp) {
               return service->OverwriteFile(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTransferService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTransferService::Service, ::filetransfer::ReplicationRequest, ::filetransfer::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::filetransfer::ReplicationRequest* req,
             ::filetransfer::OperationStatus* resp) {
               return service->UpdateFilesReplication(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileTransferService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileTransferService::Service, ::filetransfer::UpdateOrderRequest, ::filetransfer::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::filetransfer::UpdateOrderRequest* req,
             ::filetransfer::OperationStatus* resp) {
               return service->UpdateOrder(ctx, req, resp);
             }, this)));
}

FileTransferService::Service::~Service() {
}

::grpc::Status FileTransferService::Service::CreateFile(::grpc::ServerContext* context, const ::filetransfer::FileOrderRequest* request, ::filetransfer::OperationStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTransferService::Service::AppendFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::filetransfer::AppendRequest>* reader, ::filetransfer::OperationStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTransferService::Service::GetFile(::grpc::ServerContext* context, const ::filetransfer::FileRequest* request, ::grpc::ServerWriter< ::filetransfer::GetResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTransferService::Service::MergeFile(::grpc::ServerContext* context, const ::filetransfer::MergeRequest* request, ::filetransfer::OperationStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTransferService::Service::OverwriteFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::filetransfer::OverwriteRequest>* reader, ::filetransfer::OperationStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTransferService::Service::UpdateFilesReplication(::grpc::ServerContext* context, const ::filetransfer::ReplicationRequest* request, ::filetransfer::OperationStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileTransferService::Service::UpdateOrder(::grpc::ServerContext* context, const ::filetransfer::UpdateOrderRequest* request, ::filetransfer::OperationStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace filetransfer

