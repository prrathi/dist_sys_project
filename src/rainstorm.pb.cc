// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: rainstorm.proto
// Protobuf C++ Version: 5.27.2

#include "rainstorm.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace rainstorm {

inline constexpr UpdateTaskSndRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : snd_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        index_{0},
        snd_port_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateTaskSndRequest::UpdateTaskSndRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct UpdateTaskSndRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateTaskSndRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateTaskSndRequestDefaultTypeInternal() {}
  union {
    UpdateTaskSndRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateTaskSndRequestDefaultTypeInternal _UpdateTaskSndRequest_default_instance_;

inline constexpr OperationStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_{static_cast< ::rainstorm::StatusCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OperationStatus::OperationStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OperationStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationStatusDefaultTypeInternal() {}
  union {
    OperationStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationStatusDefaultTypeInternal _OperationStatus_default_instance_;

inline constexpr NewStageTaskRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : snd_addresses_{},
        snd_ports_{},
        _snd_ports_cached_byte_size_{0},
        job_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        executable_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stage_id_{0},
        task_id_{0},
        task_count_{0},
        stateful_{false},
        last_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NewStageTaskRequest::NewStageTaskRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NewStageTaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewStageTaskRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewStageTaskRequestDefaultTypeInternal() {}
  union {
    NewStageTaskRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewStageTaskRequestDefaultTypeInternal _NewStageTaskRequest_default_instance_;

inline constexpr NewSrcTaskRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : job_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        src_filename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        snd_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        task_id_{0},
        task_count_{0},
        snd_port_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NewSrcTaskRequest::NewSrcTaskRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NewSrcTaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewSrcTaskRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewSrcTaskRequestDefaultTypeInternal() {}
  union {
    NewSrcTaskRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewSrcTaskRequestDefaultTypeInternal _NewSrcTaskRequest_default_instance_;

inline constexpr KV::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR KV::KV(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct KVDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVDefaultTypeInternal() {}
  union {
    KV _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVDefaultTypeInternal _KV_default_instance_;

inline constexpr AckDataChunk::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{},
        _id_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AckDataChunk::AckDataChunk(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AckDataChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckDataChunkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckDataChunkDefaultTypeInternal() {}
  union {
    AckDataChunk _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckDataChunkDefaultTypeInternal _AckDataChunk_default_instance_;

inline constexpr DataChunkLeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : request_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR DataChunkLeader::DataChunkLeader(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DataChunkLeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataChunkLeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataChunkLeaderDefaultTypeInternal() {}
  union {
    DataChunkLeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataChunkLeaderDefaultTypeInternal _DataChunkLeader_default_instance_;

inline constexpr DataChunk::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : request_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR DataChunk::DataChunk(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DataChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataChunkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataChunkDefaultTypeInternal() {}
  union {
    DataChunk _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataChunkDefaultTypeInternal _DataChunk_default_instance_;

inline constexpr StreamDataChunkLeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : chunks_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamDataChunkLeader::StreamDataChunkLeader(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StreamDataChunkLeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDataChunkLeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDataChunkLeaderDefaultTypeInternal() {}
  union {
    StreamDataChunkLeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDataChunkLeaderDefaultTypeInternal _StreamDataChunkLeader_default_instance_;

inline constexpr StreamDataChunk::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : chunks_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamDataChunk::StreamDataChunk(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StreamDataChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDataChunkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDataChunkDefaultTypeInternal() {}
  union {
    StreamDataChunk _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDataChunkDefaultTypeInternal _StreamDataChunk_default_instance_;
}  // namespace rainstorm
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rainstorm_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_rainstorm_2eproto = nullptr;
const ::uint32_t
    TableStruct_rainstorm_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rainstorm::OperationStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rainstorm::OperationStatus, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::OperationStatus, _impl_.message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewSrcTaskRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewSrcTaskRequest, _impl_.job_id_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewSrcTaskRequest, _impl_.task_id_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewSrcTaskRequest, _impl_.task_count_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewSrcTaskRequest, _impl_.src_filename_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewSrcTaskRequest, _impl_.snd_address_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewSrcTaskRequest, _impl_.snd_port_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewStageTaskRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewStageTaskRequest, _impl_.job_id_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewStageTaskRequest, _impl_.stage_id_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewStageTaskRequest, _impl_.task_id_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewStageTaskRequest, _impl_.task_count_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewStageTaskRequest, _impl_.executable_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewStageTaskRequest, _impl_.stateful_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewStageTaskRequest, _impl_.last_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewStageTaskRequest, _impl_.snd_addresses_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::NewStageTaskRequest, _impl_.snd_ports_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rainstorm::UpdateTaskSndRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rainstorm::UpdateTaskSndRequest, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::UpdateTaskSndRequest, _impl_.snd_address_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::UpdateTaskSndRequest, _impl_.snd_port_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rainstorm::KV, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rainstorm::KV, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::KV, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::rainstorm::KV, _impl_.value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rainstorm::DataChunk, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::rainstorm::DataChunk, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::rainstorm::DataChunk, _impl_.request_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rainstorm::StreamDataChunk, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rainstorm::StreamDataChunk, _impl_.chunks_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rainstorm::AckDataChunk, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rainstorm::AckDataChunk, _impl_.id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rainstorm::DataChunkLeader, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::rainstorm::DataChunkLeader, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::rainstorm::DataChunkLeader, _impl_.request_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rainstorm::StreamDataChunkLeader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rainstorm::StreamDataChunkLeader, _impl_.chunks_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::rainstorm::OperationStatus)},
        {10, -1, -1, sizeof(::rainstorm::NewSrcTaskRequest)},
        {24, -1, -1, sizeof(::rainstorm::NewStageTaskRequest)},
        {41, -1, -1, sizeof(::rainstorm::UpdateTaskSndRequest)},
        {52, -1, -1, sizeof(::rainstorm::KV)},
        {63, -1, -1, sizeof(::rainstorm::DataChunk)},
        {74, -1, -1, sizeof(::rainstorm::StreamDataChunk)},
        {83, -1, -1, sizeof(::rainstorm::AckDataChunk)},
        {92, -1, -1, sizeof(::rainstorm::DataChunkLeader)},
        {104, -1, -1, sizeof(::rainstorm::StreamDataChunkLeader)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::rainstorm::_OperationStatus_default_instance_._instance,
    &::rainstorm::_NewSrcTaskRequest_default_instance_._instance,
    &::rainstorm::_NewStageTaskRequest_default_instance_._instance,
    &::rainstorm::_UpdateTaskSndRequest_default_instance_._instance,
    &::rainstorm::_KV_default_instance_._instance,
    &::rainstorm::_DataChunk_default_instance_._instance,
    &::rainstorm::_StreamDataChunk_default_instance_._instance,
    &::rainstorm::_AckDataChunk_default_instance_._instance,
    &::rainstorm::_DataChunkLeader_default_instance_._instance,
    &::rainstorm::_StreamDataChunkLeader_default_instance_._instance,
};
const char descriptor_table_protodef_rainstorm_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\017rainstorm.proto\022\trainstorm\"I\n\017Operatio"
    "nStatus\022%\n\006status\030\001 \001(\0162\025.rainstorm.Stat"
    "usCode\022\017\n\007message\030\002 \001(\t\"\205\001\n\021NewSrcTaskRe"
    "quest\022\016\n\006job_id\030\001 \001(\t\022\017\n\007task_id\030\002 \001(\005\022\022"
    "\n\ntask_count\030\003 \001(\005\022\024\n\014src_filename\030\004 \001(\t"
    "\022\023\n\013snd_address\030\005 \001(\t\022\020\n\010snd_port\030\006 \001(\005\""
    "\272\001\n\023NewStageTaskRequest\022\016\n\006job_id\030\001 \001(\t\022"
    "\020\n\010stage_id\030\002 \001(\005\022\017\n\007task_id\030\003 \001(\005\022\022\n\nta"
    "sk_count\030\004 \001(\005\022\022\n\nexecutable\030\005 \001(\t\022\020\n\010st"
    "ateful\030\006 \001(\010\022\014\n\004last\030\007 \001(\010\022\025\n\rsnd_addres"
    "ses\030\010 \003(\t\022\021\n\tsnd_ports\030\t \003(\005\"L\n\024UpdateTa"
    "skSndRequest\022\r\n\005index\030\001 \001(\005\022\023\n\013snd_addre"
    "ss\030\002 \001(\t\022\020\n\010snd_port\030\003 \001(\005\",\n\002KV\022\n\n\002id\030\001"
    " \001(\005\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"I\n\tData"
    "Chunk\022\035\n\004pair\030\001 \001(\0132\r.rainstorm.KVH\000\022\022\n\010"
    "finished\030\002 \001(\010H\000B\t\n\007request\"7\n\017StreamDat"
    "aChunk\022$\n\006chunks\030\001 \003(\0132\024.rainstorm.DataC"
    "hunk\"\032\n\014AckDataChunk\022\n\n\002id\030\001 \003(\005\"a\n\017Data"
    "ChunkLeader\022\020\n\006job_id\030\001 \001(\tH\000\022\035\n\004pair\030\002 "
    "\001(\0132\r.rainstorm.KVH\000\022\022\n\010finished\030\003 \001(\010H\000"
    "B\t\n\007request\"C\n\025StreamDataChunkLeader\022*\n\006"
    "chunks\030\001 \003(\0132\032.rainstorm.DataChunkLeader"
    "*I\n\nStatusCode\022\013\n\007SUCCESS\020\000\022\013\n\007INVALID\020\001"
    "\022\r\n\tNOT_FOUND\020\002\022\022\n\016ALREADY_EXISTS\020\0032\230\003\n\020"
    "RainstormService\022F\n\nNewSrcTask\022\034.rainsto"
    "rm.NewSrcTaskRequest\032\032.rainstorm.Operati"
    "onStatus\022J\n\014NewStageTask\022\036.rainstorm.New"
    "StageTaskRequest\032\032.rainstorm.OperationSt"
    "atus\022L\n\rUpdateTaskSnd\022\037.rainstorm.Update"
    "TaskSndRequest\032\032.rainstorm.OperationStat"
    "us\022I\n\016SendDataChunks\022\032.rainstorm.StreamD"
    "ataChunk\032\027.rainstorm.AckDataChunk(\0010\001\022W\n"
    "\026SendDataChunksToLeader\022 .rainstorm.Stre"
    "amDataChunkLeader\032\027.rainstorm.AckDataChu"
    "nk(\0010\001b\006proto3"
};
static ::absl::once_flag descriptor_table_rainstorm_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_rainstorm_2eproto = {
    false,
    false,
    1374,
    descriptor_table_protodef_rainstorm_2eproto,
    "rainstorm.proto",
    &descriptor_table_rainstorm_2eproto_once,
    nullptr,
    0,
    10,
    schemas,
    file_default_instances,
    TableStruct_rainstorm_2eproto::offsets,
    file_level_enum_descriptors_rainstorm_2eproto,
    file_level_service_descriptors_rainstorm_2eproto,
};
namespace rainstorm {
const ::google::protobuf::EnumDescriptor* StatusCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_rainstorm_2eproto);
  return file_level_enum_descriptors_rainstorm_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t StatusCode_internal_data_[] = {
    262144u, 0u, };
bool StatusCode_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class OperationStatus::_Internal {
 public:
};

OperationStatus::OperationStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rainstorm.OperationStatus)
}
inline PROTOBUF_NDEBUG_INLINE OperationStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::rainstorm::OperationStatus& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

OperationStatus::OperationStatus(
    ::google::protobuf::Arena* arena,
    const OperationStatus& from)
    : ::google::protobuf::Message(arena) {
  OperationStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.status_ = from._impl_.status_;

  // @@protoc_insertion_point(copy_constructor:rainstorm.OperationStatus)
}
inline PROTOBUF_NDEBUG_INLINE OperationStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void OperationStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.status_ = {};
}
OperationStatus::~OperationStatus() {
  // @@protoc_insertion_point(destructor:rainstorm.OperationStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OperationStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
OperationStatus::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(OperationStatus, _impl_._cached_size_),
              false,
          },
          &OperationStatus::MergeImpl,
          &OperationStatus::kDescriptorMethods,
          &descriptor_table_rainstorm_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 41, 2> OperationStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OperationStatus_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rainstorm::OperationStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(OperationStatus, _impl_.message_)}},
    // .rainstorm.StatusCode status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OperationStatus, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(OperationStatus, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .rainstorm.StatusCode status = 1;
    {PROTOBUF_FIELD_OFFSET(OperationStatus, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(OperationStatus, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\0\7\0\0\0\0\0"
    "rainstorm.OperationStatus"
    "message"
  }},
};

PROTOBUF_NOINLINE void OperationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:rainstorm.OperationStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* OperationStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rainstorm.OperationStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .rainstorm.StatusCode status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rainstorm.OperationStatus.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rainstorm.OperationStatus)
  return target;
}

::size_t OperationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rainstorm.OperationStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .rainstorm.StatusCode status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void OperationStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OperationStatus*>(&to_msg);
  auto& from = static_cast<const OperationStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rainstorm.OperationStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStatus::CopyFrom(const OperationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rainstorm.OperationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OperationStatus::InternalSwap(OperationStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  swap(_impl_.status_, other->_impl_.status_);
}

::google::protobuf::Metadata OperationStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NewSrcTaskRequest::_Internal {
 public:
};

NewSrcTaskRequest::NewSrcTaskRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rainstorm.NewSrcTaskRequest)
}
inline PROTOBUF_NDEBUG_INLINE NewSrcTaskRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::rainstorm::NewSrcTaskRequest& from_msg)
      : job_id_(arena, from.job_id_),
        src_filename_(arena, from.src_filename_),
        snd_address_(arena, from.snd_address_),
        _cached_size_{0} {}

NewSrcTaskRequest::NewSrcTaskRequest(
    ::google::protobuf::Arena* arena,
    const NewSrcTaskRequest& from)
    : ::google::protobuf::Message(arena) {
  NewSrcTaskRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, task_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, task_id_),
           offsetof(Impl_, snd_port_) -
               offsetof(Impl_, task_id_) +
               sizeof(Impl_::snd_port_));

  // @@protoc_insertion_point(copy_constructor:rainstorm.NewSrcTaskRequest)
}
inline PROTOBUF_NDEBUG_INLINE NewSrcTaskRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : job_id_(arena),
        src_filename_(arena),
        snd_address_(arena),
        _cached_size_{0} {}

inline void NewSrcTaskRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, task_id_),
           0,
           offsetof(Impl_, snd_port_) -
               offsetof(Impl_, task_id_) +
               sizeof(Impl_::snd_port_));
}
NewSrcTaskRequest::~NewSrcTaskRequest() {
  // @@protoc_insertion_point(destructor:rainstorm.NewSrcTaskRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NewSrcTaskRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.job_id_.Destroy();
  _impl_.src_filename_.Destroy();
  _impl_.snd_address_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NewSrcTaskRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_._cached_size_),
              false,
          },
          &NewSrcTaskRequest::MergeImpl,
          &NewSrcTaskRequest::kDescriptorMethods,
          &descriptor_table_rainstorm_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 65, 2> NewSrcTaskRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NewSrcTaskRequest_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rainstorm::NewSrcTaskRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string job_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.job_id_)}},
    // int32 task_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewSrcTaskRequest, _impl_.task_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.task_id_)}},
    // int32 task_count = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewSrcTaskRequest, _impl_.task_count_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.task_count_)}},
    // string src_filename = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.src_filename_)}},
    // string snd_address = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.snd_address_)}},
    // int32 snd_port = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewSrcTaskRequest, _impl_.snd_port_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.snd_port_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string job_id = 1;
    {PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.job_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 task_id = 2;
    {PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.task_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 task_count = 3;
    {PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.task_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string src_filename = 4;
    {PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.src_filename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string snd_address = 5;
    {PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.snd_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 snd_port = 6;
    {PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.snd_port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\33\6\0\0\14\13\0\0"
    "rainstorm.NewSrcTaskRequest"
    "job_id"
    "src_filename"
    "snd_address"
  }},
};

PROTOBUF_NOINLINE void NewSrcTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rainstorm.NewSrcTaskRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_id_.ClearToEmpty();
  _impl_.src_filename_.ClearToEmpty();
  _impl_.snd_address_.ClearToEmpty();
  ::memset(&_impl_.task_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.snd_port_) -
      reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.snd_port_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NewSrcTaskRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rainstorm.NewSrcTaskRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    const std::string& _s = this->_internal_job_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rainstorm.NewSrcTaskRequest.job_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 task_id = 2;
  if (this->_internal_task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_task_id(), target);
  }

  // int32 task_count = 3;
  if (this->_internal_task_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_task_count(), target);
  }

  // string src_filename = 4;
  if (!this->_internal_src_filename().empty()) {
    const std::string& _s = this->_internal_src_filename();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rainstorm.NewSrcTaskRequest.src_filename");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string snd_address = 5;
  if (!this->_internal_snd_address().empty()) {
    const std::string& _s = this->_internal_snd_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rainstorm.NewSrcTaskRequest.snd_address");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int32 snd_port = 6;
  if (this->_internal_snd_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_snd_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rainstorm.NewSrcTaskRequest)
  return target;
}

::size_t NewSrcTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rainstorm.NewSrcTaskRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_job_id());
  }

  // string src_filename = 4;
  if (!this->_internal_src_filename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_src_filename());
  }

  // string snd_address = 5;
  if (!this->_internal_snd_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_snd_address());
  }

  // int32 task_id = 2;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_task_id());
  }

  // int32 task_count = 3;
  if (this->_internal_task_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_task_count());
  }

  // int32 snd_port = 6;
  if (this->_internal_snd_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_snd_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NewSrcTaskRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NewSrcTaskRequest*>(&to_msg);
  auto& from = static_cast<const NewSrcTaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rainstorm.NewSrcTaskRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_id().empty()) {
    _this->_internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_src_filename().empty()) {
    _this->_internal_set_src_filename(from._internal_src_filename());
  }
  if (!from._internal_snd_address().empty()) {
    _this->_internal_set_snd_address(from._internal_snd_address());
  }
  if (from._internal_task_id() != 0) {
    _this->_impl_.task_id_ = from._impl_.task_id_;
  }
  if (from._internal_task_count() != 0) {
    _this->_impl_.task_count_ = from._impl_.task_count_;
  }
  if (from._internal_snd_port() != 0) {
    _this->_impl_.snd_port_ = from._impl_.snd_port_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NewSrcTaskRequest::CopyFrom(const NewSrcTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rainstorm.NewSrcTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NewSrcTaskRequest::InternalSwap(NewSrcTaskRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.job_id_, &other->_impl_.job_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_filename_, &other->_impl_.src_filename_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.snd_address_, &other->_impl_.snd_address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.snd_port_)
      + sizeof(NewSrcTaskRequest::_impl_.snd_port_)
      - PROTOBUF_FIELD_OFFSET(NewSrcTaskRequest, _impl_.task_id_)>(
          reinterpret_cast<char*>(&_impl_.task_id_),
          reinterpret_cast<char*>(&other->_impl_.task_id_));
}

::google::protobuf::Metadata NewSrcTaskRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NewStageTaskRequest::_Internal {
 public:
};

NewStageTaskRequest::NewStageTaskRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rainstorm.NewStageTaskRequest)
}
inline PROTOBUF_NDEBUG_INLINE NewStageTaskRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::rainstorm::NewStageTaskRequest& from_msg)
      : snd_addresses_{visibility, arena, from.snd_addresses_},
        snd_ports_{visibility, arena, from.snd_ports_},
        _snd_ports_cached_byte_size_{0},
        job_id_(arena, from.job_id_),
        executable_(arena, from.executable_),
        _cached_size_{0} {}

NewStageTaskRequest::NewStageTaskRequest(
    ::google::protobuf::Arena* arena,
    const NewStageTaskRequest& from)
    : ::google::protobuf::Message(arena) {
  NewStageTaskRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, stage_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, stage_id_),
           offsetof(Impl_, last_) -
               offsetof(Impl_, stage_id_) +
               sizeof(Impl_::last_));

  // @@protoc_insertion_point(copy_constructor:rainstorm.NewStageTaskRequest)
}
inline PROTOBUF_NDEBUG_INLINE NewStageTaskRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : snd_addresses_{visibility, arena},
        snd_ports_{visibility, arena},
        _snd_ports_cached_byte_size_{0},
        job_id_(arena),
        executable_(arena),
        _cached_size_{0} {}

inline void NewStageTaskRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, stage_id_),
           0,
           offsetof(Impl_, last_) -
               offsetof(Impl_, stage_id_) +
               sizeof(Impl_::last_));
}
NewStageTaskRequest::~NewStageTaskRequest() {
  // @@protoc_insertion_point(destructor:rainstorm.NewStageTaskRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NewStageTaskRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.job_id_.Destroy();
  _impl_.executable_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NewStageTaskRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_._cached_size_),
              false,
          },
          &NewStageTaskRequest::MergeImpl,
          &NewStageTaskRequest::kDescriptorMethods,
          &descriptor_table_rainstorm_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 75, 2> NewStageTaskRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NewStageTaskRequest_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rainstorm::NewStageTaskRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string job_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.job_id_)}},
    // int32 stage_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewStageTaskRequest, _impl_.stage_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.stage_id_)}},
    // int32 task_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewStageTaskRequest, _impl_.task_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.task_id_)}},
    // int32 task_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewStageTaskRequest, _impl_.task_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.task_count_)}},
    // string executable = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.executable_)}},
    // bool stateful = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NewStageTaskRequest, _impl_.stateful_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.stateful_)}},
    // bool last = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NewStageTaskRequest, _impl_.last_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.last_)}},
    // repeated string snd_addresses = 8;
    {::_pbi::TcParser::FastUR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.snd_addresses_)}},
    // repeated int32 snd_ports = 9;
    {::_pbi::TcParser::FastV32P1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.snd_ports_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string job_id = 1;
    {PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.job_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 stage_id = 2;
    {PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.stage_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 task_id = 3;
    {PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.task_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 task_count = 4;
    {PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.task_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string executable = 5;
    {PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.executable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool stateful = 6;
    {PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.stateful_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool last = 7;
    {PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.last_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string snd_addresses = 8;
    {PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.snd_addresses_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated int32 snd_ports = 9;
    {PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.snd_ports_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
    "\35\6\0\0\0\12\0\0\15\0\0\0\0\0\0\0"
    "rainstorm.NewStageTaskRequest"
    "job_id"
    "executable"
    "snd_addresses"
  }},
};

PROTOBUF_NOINLINE void NewStageTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rainstorm.NewStageTaskRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.snd_addresses_.Clear();
  _impl_.snd_ports_.Clear();
  _impl_.job_id_.ClearToEmpty();
  _impl_.executable_.ClearToEmpty();
  ::memset(&_impl_.stage_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.last_) -
      reinterpret_cast<char*>(&_impl_.stage_id_)) + sizeof(_impl_.last_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* NewStageTaskRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rainstorm.NewStageTaskRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    const std::string& _s = this->_internal_job_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rainstorm.NewStageTaskRequest.job_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 stage_id = 2;
  if (this->_internal_stage_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_stage_id(), target);
  }

  // int32 task_id = 3;
  if (this->_internal_task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_task_id(), target);
  }

  // int32 task_count = 4;
  if (this->_internal_task_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_task_count(), target);
  }

  // string executable = 5;
  if (!this->_internal_executable().empty()) {
    const std::string& _s = this->_internal_executable();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rainstorm.NewStageTaskRequest.executable");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // bool stateful = 6;
  if (this->_internal_stateful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_stateful(), target);
  }

  // bool last = 7;
  if (this->_internal_last() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_last(), target);
  }

  // repeated string snd_addresses = 8;
  for (int i = 0, n = this->_internal_snd_addresses_size(); i < n; ++i) {
    const auto& s = this->_internal_snd_addresses().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rainstorm.NewStageTaskRequest.snd_addresses");
    target = stream->WriteString(8, s, target);
  }

  // repeated int32 snd_ports = 9;
  {
    int byte_size = _impl_._snd_ports_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_snd_ports(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rainstorm.NewStageTaskRequest)
  return target;
}

::size_t NewStageTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rainstorm.NewStageTaskRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated string snd_addresses = 8;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_snd_addresses().size());
  for (int i = 0, n = _internal_snd_addresses().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_snd_addresses().Get(i));
  }
  // repeated int32 snd_ports = 9;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_snd_ports())
    ;
    _impl_._snd_ports_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_job_id());
  }

  // string executable = 5;
  if (!this->_internal_executable().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_executable());
  }

  // int32 stage_id = 2;
  if (this->_internal_stage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_stage_id());
  }

  // int32 task_id = 3;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_task_id());
  }

  // int32 task_count = 4;
  if (this->_internal_task_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_task_count());
  }

  // bool stateful = 6;
  if (this->_internal_stateful() != 0) {
    total_size += 2;
  }

  // bool last = 7;
  if (this->_internal_last() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NewStageTaskRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NewStageTaskRequest*>(&to_msg);
  auto& from = static_cast<const NewStageTaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rainstorm.NewStageTaskRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_snd_addresses()->MergeFrom(from._internal_snd_addresses());
  _this->_internal_mutable_snd_ports()->MergeFrom(from._internal_snd_ports());
  if (!from._internal_job_id().empty()) {
    _this->_internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_executable().empty()) {
    _this->_internal_set_executable(from._internal_executable());
  }
  if (from._internal_stage_id() != 0) {
    _this->_impl_.stage_id_ = from._impl_.stage_id_;
  }
  if (from._internal_task_id() != 0) {
    _this->_impl_.task_id_ = from._impl_.task_id_;
  }
  if (from._internal_task_count() != 0) {
    _this->_impl_.task_count_ = from._impl_.task_count_;
  }
  if (from._internal_stateful() != 0) {
    _this->_impl_.stateful_ = from._impl_.stateful_;
  }
  if (from._internal_last() != 0) {
    _this->_impl_.last_ = from._impl_.last_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NewStageTaskRequest::CopyFrom(const NewStageTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rainstorm.NewStageTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NewStageTaskRequest::InternalSwap(NewStageTaskRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.snd_addresses_.InternalSwap(&other->_impl_.snd_addresses_);
  _impl_.snd_ports_.InternalSwap(&other->_impl_.snd_ports_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.job_id_, &other->_impl_.job_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.executable_, &other->_impl_.executable_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.last_)
      + sizeof(NewStageTaskRequest::_impl_.last_)
      - PROTOBUF_FIELD_OFFSET(NewStageTaskRequest, _impl_.stage_id_)>(
          reinterpret_cast<char*>(&_impl_.stage_id_),
          reinterpret_cast<char*>(&other->_impl_.stage_id_));
}

::google::protobuf::Metadata NewStageTaskRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateTaskSndRequest::_Internal {
 public:
};

UpdateTaskSndRequest::UpdateTaskSndRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rainstorm.UpdateTaskSndRequest)
}
inline PROTOBUF_NDEBUG_INLINE UpdateTaskSndRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::rainstorm::UpdateTaskSndRequest& from_msg)
      : snd_address_(arena, from.snd_address_),
        _cached_size_{0} {}

UpdateTaskSndRequest::UpdateTaskSndRequest(
    ::google::protobuf::Arena* arena,
    const UpdateTaskSndRequest& from)
    : ::google::protobuf::Message(arena) {
  UpdateTaskSndRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, index_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, index_),
           offsetof(Impl_, snd_port_) -
               offsetof(Impl_, index_) +
               sizeof(Impl_::snd_port_));

  // @@protoc_insertion_point(copy_constructor:rainstorm.UpdateTaskSndRequest)
}
inline PROTOBUF_NDEBUG_INLINE UpdateTaskSndRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : snd_address_(arena),
        _cached_size_{0} {}

inline void UpdateTaskSndRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, index_),
           0,
           offsetof(Impl_, snd_port_) -
               offsetof(Impl_, index_) +
               sizeof(Impl_::snd_port_));
}
UpdateTaskSndRequest::~UpdateTaskSndRequest() {
  // @@protoc_insertion_point(destructor:rainstorm.UpdateTaskSndRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateTaskSndRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.snd_address_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
UpdateTaskSndRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(UpdateTaskSndRequest, _impl_._cached_size_),
              false,
          },
          &UpdateTaskSndRequest::MergeImpl,
          &UpdateTaskSndRequest::kDescriptorMethods,
          &descriptor_table_rainstorm_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 50, 2> UpdateTaskSndRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_UpdateTaskSndRequest_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rainstorm::UpdateTaskSndRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateTaskSndRequest, _impl_.index_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateTaskSndRequest, _impl_.index_)}},
    // string snd_address = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateTaskSndRequest, _impl_.snd_address_)}},
    // int32 snd_port = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateTaskSndRequest, _impl_.snd_port_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateTaskSndRequest, _impl_.snd_port_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 index = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateTaskSndRequest, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string snd_address = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateTaskSndRequest, _impl_.snd_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 snd_port = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateTaskSndRequest, _impl_.snd_port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\36\0\13\0\0\0\0\0"
    "rainstorm.UpdateTaskSndRequest"
    "snd_address"
  }},
};

PROTOBUF_NOINLINE void UpdateTaskSndRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rainstorm.UpdateTaskSndRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.snd_address_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.snd_port_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.snd_port_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* UpdateTaskSndRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rainstorm.UpdateTaskSndRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_index(), target);
  }

  // string snd_address = 2;
  if (!this->_internal_snd_address().empty()) {
    const std::string& _s = this->_internal_snd_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rainstorm.UpdateTaskSndRequest.snd_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 snd_port = 3;
  if (this->_internal_snd_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_snd_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rainstorm.UpdateTaskSndRequest)
  return target;
}

::size_t UpdateTaskSndRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rainstorm.UpdateTaskSndRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string snd_address = 2;
  if (!this->_internal_snd_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_snd_address());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_index());
  }

  // int32 snd_port = 3;
  if (this->_internal_snd_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_snd_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void UpdateTaskSndRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateTaskSndRequest*>(&to_msg);
  auto& from = static_cast<const UpdateTaskSndRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rainstorm.UpdateTaskSndRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_snd_address().empty()) {
    _this->_internal_set_snd_address(from._internal_snd_address());
  }
  if (from._internal_index() != 0) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  if (from._internal_snd_port() != 0) {
    _this->_impl_.snd_port_ = from._impl_.snd_port_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateTaskSndRequest::CopyFrom(const UpdateTaskSndRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rainstorm.UpdateTaskSndRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateTaskSndRequest::InternalSwap(UpdateTaskSndRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.snd_address_, &other->_impl_.snd_address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateTaskSndRequest, _impl_.snd_port_)
      + sizeof(UpdateTaskSndRequest::_impl_.snd_port_)
      - PROTOBUF_FIELD_OFFSET(UpdateTaskSndRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::google::protobuf::Metadata UpdateTaskSndRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class KV::_Internal {
 public:
};

KV::KV(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rainstorm.KV)
}
inline PROTOBUF_NDEBUG_INLINE KV::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::rainstorm::KV& from_msg)
      : key_(arena, from.key_),
        value_(arena, from.value_),
        _cached_size_{0} {}

KV::KV(
    ::google::protobuf::Arena* arena,
    const KV& from)
    : ::google::protobuf::Message(arena) {
  KV* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:rainstorm.KV)
}
inline PROTOBUF_NDEBUG_INLINE KV::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : key_(arena),
        value_(arena),
        _cached_size_{0} {}

inline void KV::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
KV::~KV() {
  // @@protoc_insertion_point(destructor:rainstorm.KV)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void KV::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
KV::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(KV, _impl_._cached_size_),
              false,
          },
          &KV::MergeImpl,
          &KV::kDescriptorMethods,
          &descriptor_table_rainstorm_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 29, 2> KV::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_KV_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rainstorm::KV>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(KV, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(KV, _impl_.id_)}},
    // string key = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(KV, _impl_.key_)}},
    // string value = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(KV, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(KV, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string key = 2;
    {PROTOBUF_FIELD_OFFSET(KV, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 3;
    {PROTOBUF_FIELD_OFFSET(KV, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\14\0\3\5\0\0\0\0"
    "rainstorm.KV"
    "key"
    "value"
  }},
};

PROTOBUF_NOINLINE void KV::Clear() {
// @@protoc_insertion_point(message_clear_start:rainstorm.KV)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* KV::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rainstorm.KV)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rainstorm.KV.key");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rainstorm.KV.value");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rainstorm.KV)
  return target;
}

::size_t KV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rainstorm.KV)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void KV::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<KV*>(&to_msg);
  auto& from = static_cast<const KV&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rainstorm.KV)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KV::CopyFrom(const KV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rainstorm.KV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void KV::InternalSwap(KV* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata KV::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DataChunk::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::rainstorm::DataChunk, _impl_._oneof_case_);
};

void DataChunk::set_allocated_pair(::rainstorm::KV* pair) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (pair) {
    ::google::protobuf::Arena* submessage_arena = pair->GetArena();
    if (message_arena != submessage_arena) {
      pair = ::google::protobuf::internal::GetOwnedMessage(message_arena, pair, submessage_arena);
    }
    set_has_pair();
    _impl_.request_.pair_ = pair;
  }
  // @@protoc_insertion_point(field_set_allocated:rainstorm.DataChunk.pair)
}
DataChunk::DataChunk(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rainstorm.DataChunk)
}
inline PROTOBUF_NDEBUG_INLINE DataChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::rainstorm::DataChunk& from_msg)
      : request_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

DataChunk::DataChunk(
    ::google::protobuf::Arena* arena,
    const DataChunk& from)
    : ::google::protobuf::Message(arena) {
  DataChunk* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (request_case()) {
    case REQUEST_NOT_SET:
      break;
      case kPair:
        _impl_.request_.pair_ = ::google::protobuf::Message::CopyConstruct<::rainstorm::KV>(arena, *from._impl_.request_.pair_);
        break;
      case kFinished:
        _impl_.request_.finished_ = from._impl_.request_.finished_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:rainstorm.DataChunk)
}
inline PROTOBUF_NDEBUG_INLINE DataChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : request_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void DataChunk::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DataChunk::~DataChunk() {
  // @@protoc_insertion_point(destructor:rainstorm.DataChunk)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DataChunk::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_request()) {
    clear_request();
  }
  _impl_.~Impl_();
}

void DataChunk::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:rainstorm.DataChunk)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (request_case()) {
    case kPair: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.pair_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.pair_);
      }
      break;
    }
    case kFinished: {
      // No need to clear
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
DataChunk::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(DataChunk, _impl_._cached_size_),
              false,
          },
          &DataChunk::MergeImpl,
          &DataChunk::kDescriptorMethods,
          &descriptor_table_rainstorm_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 1, 0, 2> DataChunk::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DataChunk_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rainstorm::DataChunk>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .rainstorm.KV pair = 1;
    {PROTOBUF_FIELD_OFFSET(DataChunk, _impl_.request_.pair_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool finished = 2;
    {PROTOBUF_FIELD_OFFSET(DataChunk, _impl_.request_.finished_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rainstorm::KV>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void DataChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:rainstorm.DataChunk)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* DataChunk::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rainstorm.DataChunk)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (request_case()) {
    case kPair: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *_impl_.request_.pair_, _impl_.request_.pair_->GetCachedSize(), target, stream);
      break;
    }
    case kFinished: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this->_internal_finished(), target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rainstorm.DataChunk)
  return target;
}

::size_t DataChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rainstorm.DataChunk)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .rainstorm.KV pair = 1;
    case kPair: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.pair_);
      break;
    }
    // bool finished = 2;
    case kFinished: {
      total_size += 2;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void DataChunk::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DataChunk*>(&to_msg);
  auto& from = static_cast<const DataChunk&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rainstorm.DataChunk)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_request();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPair: {
        if (oneof_needs_init) {
          _this->_impl_.request_.pair_ =
              ::google::protobuf::Message::CopyConstruct<::rainstorm::KV>(arena, *from._impl_.request_.pair_);
        } else {
          _this->_impl_.request_.pair_->MergeFrom(from._internal_pair());
        }
        break;
      }
      case kFinished: {
        _this->_impl_.request_.finished_ = from._impl_.request_.finished_;
        break;
      }
      case REQUEST_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DataChunk::CopyFrom(const DataChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rainstorm.DataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DataChunk::InternalSwap(DataChunk* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata DataChunk::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StreamDataChunk::_Internal {
 public:
};

StreamDataChunk::StreamDataChunk(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rainstorm.StreamDataChunk)
}
inline PROTOBUF_NDEBUG_INLINE StreamDataChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::rainstorm::StreamDataChunk& from_msg)
      : chunks_{visibility, arena, from.chunks_},
        _cached_size_{0} {}

StreamDataChunk::StreamDataChunk(
    ::google::protobuf::Arena* arena,
    const StreamDataChunk& from)
    : ::google::protobuf::Message(arena) {
  StreamDataChunk* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:rainstorm.StreamDataChunk)
}
inline PROTOBUF_NDEBUG_INLINE StreamDataChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : chunks_{visibility, arena},
        _cached_size_{0} {}

inline void StreamDataChunk::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
StreamDataChunk::~StreamDataChunk() {
  // @@protoc_insertion_point(destructor:rainstorm.StreamDataChunk)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StreamDataChunk::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
StreamDataChunk::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(StreamDataChunk, _impl_._cached_size_),
              false,
          },
          &StreamDataChunk::MergeImpl,
          &StreamDataChunk::kDescriptorMethods,
          &descriptor_table_rainstorm_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> StreamDataChunk::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StreamDataChunk_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rainstorm::StreamDataChunk>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .rainstorm.DataChunk chunks = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamDataChunk, _impl_.chunks_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .rainstorm.DataChunk chunks = 1;
    {PROTOBUF_FIELD_OFFSET(StreamDataChunk, _impl_.chunks_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rainstorm::DataChunk>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void StreamDataChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:rainstorm.StreamDataChunk)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunks_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* StreamDataChunk::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rainstorm.StreamDataChunk)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .rainstorm.DataChunk chunks = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_chunks_size());
       i < n; i++) {
    const auto& repfield = this->_internal_chunks().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rainstorm.StreamDataChunk)
  return target;
}

::size_t StreamDataChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rainstorm.StreamDataChunk)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .rainstorm.DataChunk chunks = 1;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->_internal_chunks()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void StreamDataChunk::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamDataChunk*>(&to_msg);
  auto& from = static_cast<const StreamDataChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rainstorm.StreamDataChunk)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_chunks()->MergeFrom(
      from._internal_chunks());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamDataChunk::CopyFrom(const StreamDataChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rainstorm.StreamDataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamDataChunk::InternalSwap(StreamDataChunk* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chunks_.InternalSwap(&other->_impl_.chunks_);
}

::google::protobuf::Metadata StreamDataChunk::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AckDataChunk::_Internal {
 public:
};

AckDataChunk::AckDataChunk(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rainstorm.AckDataChunk)
}
inline PROTOBUF_NDEBUG_INLINE AckDataChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::rainstorm::AckDataChunk& from_msg)
      : id_{visibility, arena, from.id_},
        _id_cached_byte_size_{0},
        _cached_size_{0} {}

AckDataChunk::AckDataChunk(
    ::google::protobuf::Arena* arena,
    const AckDataChunk& from)
    : ::google::protobuf::Message(arena) {
  AckDataChunk* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:rainstorm.AckDataChunk)
}
inline PROTOBUF_NDEBUG_INLINE AckDataChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_{visibility, arena},
        _id_cached_byte_size_{0},
        _cached_size_{0} {}

inline void AckDataChunk::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AckDataChunk::~AckDataChunk() {
  // @@protoc_insertion_point(destructor:rainstorm.AckDataChunk)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AckDataChunk::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AckDataChunk::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AckDataChunk, _impl_._cached_size_),
              false,
          },
          &AckDataChunk::MergeImpl,
          &AckDataChunk::kDescriptorMethods,
          &descriptor_table_rainstorm_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AckDataChunk::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AckDataChunk_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rainstorm::AckDataChunk>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated int32 id = 1;
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AckDataChunk, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AckDataChunk, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AckDataChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:rainstorm.AckDataChunk)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* AckDataChunk::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rainstorm.AckDataChunk)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 id = 1;
  {
    int byte_size = _impl_._id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rainstorm.AckDataChunk)
  return target;
}

::size_t AckDataChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rainstorm.AckDataChunk)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated int32 id = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_id())
    ;
    _impl_._id_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AckDataChunk::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AckDataChunk*>(&to_msg);
  auto& from = static_cast<const AckDataChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rainstorm.AckDataChunk)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_id()->MergeFrom(from._internal_id());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AckDataChunk::CopyFrom(const AckDataChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rainstorm.AckDataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AckDataChunk::InternalSwap(AckDataChunk* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.id_.InternalSwap(&other->_impl_.id_);
}

::google::protobuf::Metadata AckDataChunk::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DataChunkLeader::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::rainstorm::DataChunkLeader, _impl_._oneof_case_);
};

void DataChunkLeader::set_allocated_pair(::rainstorm::KV* pair) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (pair) {
    ::google::protobuf::Arena* submessage_arena = pair->GetArena();
    if (message_arena != submessage_arena) {
      pair = ::google::protobuf::internal::GetOwnedMessage(message_arena, pair, submessage_arena);
    }
    set_has_pair();
    _impl_.request_.pair_ = pair;
  }
  // @@protoc_insertion_point(field_set_allocated:rainstorm.DataChunkLeader.pair)
}
DataChunkLeader::DataChunkLeader(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rainstorm.DataChunkLeader)
}
inline PROTOBUF_NDEBUG_INLINE DataChunkLeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::rainstorm::DataChunkLeader& from_msg)
      : request_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

DataChunkLeader::DataChunkLeader(
    ::google::protobuf::Arena* arena,
    const DataChunkLeader& from)
    : ::google::protobuf::Message(arena) {
  DataChunkLeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (request_case()) {
    case REQUEST_NOT_SET:
      break;
      case kJobId:
        new (&_impl_.request_.job_id_) decltype(_impl_.request_.job_id_){arena, from._impl_.request_.job_id_};
        break;
      case kPair:
        _impl_.request_.pair_ = ::google::protobuf::Message::CopyConstruct<::rainstorm::KV>(arena, *from._impl_.request_.pair_);
        break;
      case kFinished:
        _impl_.request_.finished_ = from._impl_.request_.finished_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:rainstorm.DataChunkLeader)
}
inline PROTOBUF_NDEBUG_INLINE DataChunkLeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : request_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void DataChunkLeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DataChunkLeader::~DataChunkLeader() {
  // @@protoc_insertion_point(destructor:rainstorm.DataChunkLeader)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DataChunkLeader::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_request()) {
    clear_request();
  }
  _impl_.~Impl_();
}

void DataChunkLeader::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:rainstorm.DataChunkLeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (request_case()) {
    case kJobId: {
      _impl_.request_.job_id_.Destroy();
      break;
    }
    case kPair: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.pair_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.pair_);
      }
      break;
    }
    case kFinished: {
      // No need to clear
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
DataChunkLeader::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(DataChunkLeader, _impl_._cached_size_),
              false,
          },
          &DataChunkLeader::MergeImpl,
          &DataChunkLeader::kDescriptorMethods,
          &descriptor_table_rainstorm_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 1, 40, 2> DataChunkLeader::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DataChunkLeader_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rainstorm::DataChunkLeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string job_id = 1;
    {PROTOBUF_FIELD_OFFSET(DataChunkLeader, _impl_.request_.job_id_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .rainstorm.KV pair = 2;
    {PROTOBUF_FIELD_OFFSET(DataChunkLeader, _impl_.request_.pair_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool finished = 3;
    {PROTOBUF_FIELD_OFFSET(DataChunkLeader, _impl_.request_.finished_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rainstorm::KV>()},
  }}, {{
    "\31\6\0\0\0\0\0\0"
    "rainstorm.DataChunkLeader"
    "job_id"
  }},
};

PROTOBUF_NOINLINE void DataChunkLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:rainstorm.DataChunkLeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* DataChunkLeader::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rainstorm.DataChunkLeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (request_case()) {
    case kJobId: {
      const std::string& _s = this->_internal_job_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rainstorm.DataChunkLeader.job_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
      break;
    }
    case kPair: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *_impl_.request_.pair_, _impl_.request_.pair_->GetCachedSize(), target, stream);
      break;
    }
    case kFinished: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this->_internal_finished(), target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rainstorm.DataChunkLeader)
  return target;
}

::size_t DataChunkLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rainstorm.DataChunkLeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // string job_id = 1;
    case kJobId: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_job_id());
      break;
    }
    // .rainstorm.KV pair = 2;
    case kPair: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.pair_);
      break;
    }
    // bool finished = 3;
    case kFinished: {
      total_size += 2;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void DataChunkLeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DataChunkLeader*>(&to_msg);
  auto& from = static_cast<const DataChunkLeader&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:rainstorm.DataChunkLeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_request();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kJobId: {
        if (oneof_needs_init) {
          _this->_impl_.request_.job_id_.InitDefault();
        }
        _this->_impl_.request_.job_id_.Set(from._internal_job_id(), arena);
        break;
      }
      case kPair: {
        if (oneof_needs_init) {
          _this->_impl_.request_.pair_ =
              ::google::protobuf::Message::CopyConstruct<::rainstorm::KV>(arena, *from._impl_.request_.pair_);
        } else {
          _this->_impl_.request_.pair_->MergeFrom(from._internal_pair());
        }
        break;
      }
      case kFinished: {
        _this->_impl_.request_.finished_ = from._impl_.request_.finished_;
        break;
      }
      case REQUEST_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DataChunkLeader::CopyFrom(const DataChunkLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rainstorm.DataChunkLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DataChunkLeader::InternalSwap(DataChunkLeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata DataChunkLeader::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StreamDataChunkLeader::_Internal {
 public:
};

StreamDataChunkLeader::StreamDataChunkLeader(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rainstorm.StreamDataChunkLeader)
}
inline PROTOBUF_NDEBUG_INLINE StreamDataChunkLeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::rainstorm::StreamDataChunkLeader& from_msg)
      : chunks_{visibility, arena, from.chunks_},
        _cached_size_{0} {}

StreamDataChunkLeader::StreamDataChunkLeader(
    ::google::protobuf::Arena* arena,
    const StreamDataChunkLeader& from)
    : ::google::protobuf::Message(arena) {
  StreamDataChunkLeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:rainstorm.StreamDataChunkLeader)
}
inline PROTOBUF_NDEBUG_INLINE StreamDataChunkLeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : chunks_{visibility, arena},
        _cached_size_{0} {}

inline void StreamDataChunkLeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
StreamDataChunkLeader::~StreamDataChunkLeader() {
  // @@protoc_insertion_point(destructor:rainstorm.StreamDataChunkLeader)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StreamDataChunkLeader::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
StreamDataChunkLeader::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(StreamDataChunkLeader, _impl_._cached_size_),
              false,
          },
          &StreamDataChunkLeader::MergeImpl,
          &StreamDataChunkLeader::kDescriptorMethods,
          &descriptor_table_rainstorm_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> StreamDataChunkLeader::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StreamDataChunkLeader_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rainstorm::StreamDataChunkLeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .rainstorm.DataChunkLeader chunks = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamDataChunkLeader, _impl_.chunks_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .rainstorm.DataChunkLeader chunks = 1;
    {PROTOBUF_FIELD_OFFSET(StreamDataChunkLeader, _impl_.chunks_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rainstorm::DataChunkLeader>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void StreamDataChunkLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:rainstorm.StreamDataChunkLeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunks_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* StreamDataChunkLeader::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rainstorm.StreamDataChunkLeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .rainstorm.DataChunkLeader chunks = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_chunks_size());
       i < n; i++) {
    const auto& repfield = this->_internal_chunks().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rainstorm.StreamDataChunkLeader)
  return target;
}

::size_t StreamDataChunkLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rainstorm.StreamDataChunkLeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .rainstorm.DataChunkLeader chunks = 1;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->_internal_chunks()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void StreamDataChunkLeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamDataChunkLeader*>(&to_msg);
  auto& from = static_cast<const StreamDataChunkLeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rainstorm.StreamDataChunkLeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_chunks()->MergeFrom(
      from._internal_chunks());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamDataChunkLeader::CopyFrom(const StreamDataChunkLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rainstorm.StreamDataChunkLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamDataChunkLeader::InternalSwap(StreamDataChunkLeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chunks_.InternalSwap(&other->_impl_.chunks_);
}

::google::protobuf::Metadata StreamDataChunkLeader::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace rainstorm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_rainstorm_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
